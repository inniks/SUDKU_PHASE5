package xxatcust.oracle.apps.sudoku.model.readonlyvo;

import java.math.BigDecimal;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Mar 25 14:33:35 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class QuotesVORowImpl extends ViewRowImpl {
    public void setUsrId(int usrId) {
        this.usrId = usrId;
    }

    public int getUsrId() {
        return usrId;
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        QuoteDescription {
            public Object get(QuotesVORowImpl obj) {
                return obj.getQuoteDescription();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setQuoteDescription((String)value);
            }
        },
        DealId {
            public Object get(QuotesVORowImpl obj) {
                return obj.getDealId();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setDealId((String)value);
            }
        },
        SalesChannel {
            public Object get(QuotesVORowImpl obj) {
                return obj.getSalesChannel();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setSalesChannel((String)value);
            }
        },
        SalesRepresentative {
            public Object get(QuotesVORowImpl obj) {
                return obj.getSalesRepresentative();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setSalesRepresentative((String)value);
            }
        },
        CustomerSupportRepresent {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustomerSupportRepresent();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCustomerSupportRepresent((String)value);
            }
        },
        OrganizationUnit {
            public Object get(QuotesVORowImpl obj) {
                return obj.getOrganizationUnit();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setOrganizationUnit((String)value);
            }
        },
        OrderType {
            public Object get(QuotesVORowImpl obj) {
                return obj.getOrderType();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setOrderType((String)value);
            }
        },
        CustomerName {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustomerName();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCustomerName((String)value);
            }
        },
        CustomerNumber {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustomerNumber();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCustomerNumber((String)value);
            }
        },
        AdvantestQuotationNumber {
            public Object get(QuotesVORowImpl obj) {
                return obj.getAdvantestQuotationNumber();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAdvantestQuotationNumber((String)value);
            }
        },
        QuotationDate {
            public Object get(QuotesVORowImpl obj) {
                return obj.getQuotationDate();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setQuotationDate((String)value);
            }
        },
        Page {
            public Object get(QuotesVORowImpl obj) {
                return obj.getPage();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setPage((String)value);
            }
        },
        Systemid {
            public Object get(QuotesVORowImpl obj) {
                return obj.getSystemid();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setSystemid((String)value);
            }
        },
        PaymentTerms {
            public Object get(QuotesVORowImpl obj) {
                return obj.getPaymentTerms();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setPaymentTerms((String)value);
            }
        },
        IncoTerms {
            public Object get(QuotesVORowImpl obj) {
                return obj.getIncoTerms();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setIncoTerms((String)value);
            }
        },
        Currency {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCurrency();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCurrency((String)value);
            }
        },
        QuoteTo {
            public Object get(QuotesVORowImpl obj) {
                return obj.getQuoteTo();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setQuoteTo((String)value);
            }
        },
        ShipTo {
            public Object get(QuotesVORowImpl obj) {
                return obj.getShipTo();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setShipTo((String)value);
            }
        },
        PartyId {
            public Object get(QuotesVORowImpl obj) {
                return obj.getPartyId();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setPartyId((BigDecimal)value);
            }
        },
        SalesContactName {
            public Object get(QuotesVORowImpl obj) {
                return obj.getSalesContactName();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setSalesContactName((String)value);
            }
        },
        SalesPhoneNum {
            public Object get(QuotesVORowImpl obj) {
                return obj.getSalesPhoneNum();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setSalesPhoneNum((String)value);
            }
        },
        SalesFaxNum {
            public Object get(QuotesVORowImpl obj) {
                return obj.getSalesFaxNum();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setSalesFaxNum((String)value);
            }
        },
        SalesEmail {
            public Object get(QuotesVORowImpl obj) {
                return obj.getSalesEmail();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setSalesEmail((String)value);
            }
        },
        CustomerContactName {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustomerContactName();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCustomerContactName((String)value);
            }
        },
        CustomerPhoneNum {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustomerPhoneNum();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCustomerPhoneNum((String)value);
            }
        },
        CustomerFaxNum {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustomerFaxNum();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCustomerFaxNum((String)value);
            }
        },
        CustomerEmail {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustomerEmail();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCustomerEmail((String)value);
            }
        },
        Customerparentid {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustomerparentid();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCustomerparentid((BigDecimal)value);
            }
        },
        AttentionToOrDept {
            public Object get(QuotesVORowImpl obj) {
                return obj.getAttentionToOrDept();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttentionToOrDept((String)value);
            }
        },
        QuoteEmail {
            public Object get(QuotesVORowImpl obj) {
                return obj.getQuoteEmail();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setQuoteEmail((String)value);
            }
        },
        OrgId {
            public Object get(QuotesVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setOrgId((BigDecimal)value);
            }
        },
        PriceList {
            public Object get(QuotesVORowImpl obj) {
                return obj.getPriceList();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setPriceList((String)value);
            }
        },
        CustAccid {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustAccid();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCustAccid((String)value);
            }
        },
        BusinessAgreement {
            public Object get(QuotesVORowImpl obj) {
                return obj.getBusinessAgreement();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setBusinessAgreement((String)value);
            }
        },
        BusinessAgreementId {
            public Object get(QuotesVORowImpl obj) {
                return obj.getBusinessAgreementId();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setBusinessAgreementId((String)value);
            }
        },
        Discount {
            public Object get(QuotesVORowImpl obj) {
                return obj.getDiscount();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setDiscount((String)value);
            }
        },
        SalesRepName {
            public Object get(QuotesVORowImpl obj) {
                return obj.getSalesRepName();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setSalesRepName((String)value);
            }
        },
        CurrencyCode {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCurrencyCode();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCurrencyCode((String)value);
            }
        },
        IncoTermsMeaning {
            public Object get(QuotesVORowImpl obj) {
                return obj.getIncoTermsMeaning();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setIncoTermsMeaning((String)value);
            }
        },
        PaymentTermsMean {
            public Object get(QuotesVORowImpl obj) {
                return obj.getPaymentTermsMean();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setPaymentTermsMean((String)value);
            }
        },
        SalesChCode {
            public Object get(QuotesVORowImpl obj) {
                return obj.getSalesChCode();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setSalesChCode((String)value);
            }
        },
        CustPhoneFax {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustPhoneFax();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCustPhoneFax((String)value);
            }
        },
        PrdNumRefConfig {
            public Object get(QuotesVORowImpl obj) {
                return obj.getPrdNumRefConfig();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setPrdNumRefConfig((String)value);
            }
        },
        PrdNumTargetConfig {
            public Object get(QuotesVORowImpl obj) {
                return obj.getPrdNumTargetConfig();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setPrdNumTargetConfig((String)value);
            }
        },
        RefPriceRegConfig {
            public Object get(QuotesVORowImpl obj) {
                return obj.getRefPriceRegConfig();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setRefPriceRegConfig((String)value);
            }
        },
        RefPriceTargetConfig {
            public Object get(QuotesVORowImpl obj) {
                return obj.getRefPriceTargetConfig();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setRefPriceTargetConfig((String)value);
            }
        },
        NumberFormat {
            public Object get(QuotesVORowImpl obj) {
                return obj.getNumberFormat();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setNumberFormat((String)value);
            }
        },
        CurrencyForSC {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCurrencyForSC();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCurrencyForSC((String)value);
            }
        },
        IncoTermForSC {
            public Object get(QuotesVORowImpl obj) {
                return obj.getIncoTermForSC();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setIncoTermForSC((String)value);
            }
        },
        CustomerNameForSC {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustomerNameForSC();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCustomerNameForSC((String)value);
            }
        },
        CustNum {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustNum();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCustNum((String)value);
            }
        },
        CustName {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustName();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setCustName((String)value);
            }
        },
        OperatingUnit {
            public Object get(QuotesVORowImpl obj) {
                return obj.getOperatingUnit();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setOperatingUnit((String)value);
            }
        },
        OUVO {
            public Object get(QuotesVORowImpl obj) {
                return obj.getOUVO();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        OrderTypeVO {
            public Object get(QuotesVORowImpl obj) {
                return obj.getOrderTypeVO();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        SalesChannelVO {
            public Object get(QuotesVORowImpl obj) {
                return obj.getSalesChannelVO();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        SalesRepresentativeVO {
            public Object get(QuotesVORowImpl obj) {
                return obj.getSalesRepresentativeVO();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        CustomerSupportRepresentVO {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustomerSupportRepresentVO();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        IncoTermVO1 {
            public Object get(QuotesVORowImpl obj) {
                return obj.getIncoTermVO1();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        NodeCategoryVO {
            public Object get(QuotesVORowImpl obj) {
                return obj.getNodeCategoryVO();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        PaymentTermsVO {
            public Object get(QuotesVORowImpl obj) {
                return obj.getPaymentTermsVO();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        PrimarySalesPersonVO {
            public Object get(QuotesVORowImpl obj) {
                return obj.getPrimarySalesPersonVO();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        QuotesVO {
            public Object get(QuotesVORowImpl obj) {
                return obj.getQuotesVO();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        CurrencyVO {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCurrencyVO();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        PriceListVO {
            public Object get(QuotesVORowImpl obj) {
                return obj.getPriceListVO();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        businessAgreementVo {
            public Object get(QuotesVORowImpl obj) {
                return obj.getbusinessAgreementVo();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        userPrefEntityVO {
            public Object get(QuotesVORowImpl obj) {
                return obj.getuserPrefEntityVO();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        NumberFormatViewVA {
            public Object get(QuotesVORowImpl obj) {
                return obj.getNumberFormatViewVA();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        YesNoLOVVA {
            public Object get(QuotesVORowImpl obj) {
                return obj.getYesNoLOVVA();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        CustNameVO {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustNameVO();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        userPrefSCVO {
            public Object get(QuotesVORowImpl obj) {
                return obj.getuserPrefSCVO();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        CustomerNameVO1 {
            public Object get(QuotesVORowImpl obj) {
                return obj.getCustomerNameVO1();
            }

            public void put(QuotesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(QuotesVORowImpl object);

        public abstract void put(QuotesVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    private int usrId =
        Integer.parseInt((String)ADFContext.getCurrent().getSessionScope().get("UserId") ==
                         null ? "0" :
                         (String)ADFContext.getCurrent().getSessionScope().get("UserId"));


    public static final int QUOTEDESCRIPTION =
        AttributesEnum.QuoteDescription.index();
    public static final int DEALID = AttributesEnum.DealId.index();
    public static final int SALESCHANNEL = AttributesEnum.SalesChannel.index();
    public static final int SALESREPRESENTATIVE =
        AttributesEnum.SalesRepresentative.index();
    public static final int CUSTOMERSUPPORTREPRESENT =
        AttributesEnum.CustomerSupportRepresent.index();
    public static final int ORGANIZATIONUNIT =
        AttributesEnum.OrganizationUnit.index();
    public static final int ORDERTYPE = AttributesEnum.OrderType.index();
    public static final int CUSTOMERNAME = AttributesEnum.CustomerName.index();
    public static final int CUSTOMERNUMBER =
        AttributesEnum.CustomerNumber.index();
    public static final int ADVANTESTQUOTATIONNUMBER =
        AttributesEnum.AdvantestQuotationNumber.index();
    public static final int QUOTATIONDATE =
        AttributesEnum.QuotationDate.index();
    public static final int PAGE = AttributesEnum.Page.index();
    public static final int SYSTEMID = AttributesEnum.Systemid.index();
    public static final int PAYMENTTERMS = AttributesEnum.PaymentTerms.index();
    public static final int INCOTERMS = AttributesEnum.IncoTerms.index();
    public static final int CURRENCY = AttributesEnum.Currency.index();
    public static final int QUOTETO = AttributesEnum.QuoteTo.index();
    public static final int SHIPTO = AttributesEnum.ShipTo.index();
    public static final int PARTYID = AttributesEnum.PartyId.index();
    public static final int SALESCONTACTNAME =
        AttributesEnum.SalesContactName.index();
    public static final int SALESPHONENUM =
        AttributesEnum.SalesPhoneNum.index();
    public static final int SALESFAXNUM = AttributesEnum.SalesFaxNum.index();
    public static final int SALESEMAIL = AttributesEnum.SalesEmail.index();
    public static final int CUSTOMERCONTACTNAME =
        AttributesEnum.CustomerContactName.index();
    public static final int CUSTOMERPHONENUM =
        AttributesEnum.CustomerPhoneNum.index();
    public static final int CUSTOMERFAXNUM =
        AttributesEnum.CustomerFaxNum.index();
    public static final int CUSTOMEREMAIL =
        AttributesEnum.CustomerEmail.index();
    public static final int CUSTOMERPARENTID =
        AttributesEnum.Customerparentid.index();
    public static final int ATTENTIONTOORDEPT =
        AttributesEnum.AttentionToOrDept.index();
    public static final int QUOTEEMAIL = AttributesEnum.QuoteEmail.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int PRICELIST = AttributesEnum.PriceList.index();
    public static final int CUSTACCID = AttributesEnum.CustAccid.index();
    public static final int BUSINESSAGREEMENT =
        AttributesEnum.BusinessAgreement.index();
    public static final int BUSINESSAGREEMENTID =
        AttributesEnum.BusinessAgreementId.index();
    public static final int DISCOUNT = AttributesEnum.Discount.index();
    public static final int SALESREPNAME = AttributesEnum.SalesRepName.index();
    public static final int CURRENCYCODE = AttributesEnum.CurrencyCode.index();
    public static final int INCOTERMSMEANING =
        AttributesEnum.IncoTermsMeaning.index();
    public static final int PAYMENTTERMSMEAN =
        AttributesEnum.PaymentTermsMean.index();
    public static final int SALESCHCODE = AttributesEnum.SalesChCode.index();
    public static final int CUSTPHONEFAX = AttributesEnum.CustPhoneFax.index();
    public static final int PRDNUMREFCONFIG =
        AttributesEnum.PrdNumRefConfig.index();
    public static final int PRDNUMTARGETCONFIG =
        AttributesEnum.PrdNumTargetConfig.index();
    public static final int REFPRICEREGCONFIG =
        AttributesEnum.RefPriceRegConfig.index();
    public static final int REFPRICETARGETCONFIG =
        AttributesEnum.RefPriceTargetConfig.index();
    public static final int NUMBERFORMAT = AttributesEnum.NumberFormat.index();
    public static final int CURRENCYFORSC =
        AttributesEnum.CurrencyForSC.index();
    public static final int INCOTERMFORSC =
        AttributesEnum.IncoTermForSC.index();
    public static final int CUSTOMERNAMEFORSC =
        AttributesEnum.CustomerNameForSC.index();
    public static final int CUSTNUM = AttributesEnum.CustNum.index();
    public static final int CUSTNAME = AttributesEnum.CustName.index();
    public static final int OPERATINGUNIT =
        AttributesEnum.OperatingUnit.index();
    public static final int OUVO = AttributesEnum.OUVO.index();
    public static final int ORDERTYPEVO = AttributesEnum.OrderTypeVO.index();
    public static final int SALESCHANNELVO =
        AttributesEnum.SalesChannelVO.index();
    public static final int SALESREPRESENTATIVEVO =
        AttributesEnum.SalesRepresentativeVO.index();
    public static final int CUSTOMERSUPPORTREPRESENTVO =
        AttributesEnum.CustomerSupportRepresentVO.index();
    public static final int INCOTERMVO1 = AttributesEnum.IncoTermVO1.index();
    public static final int NODECATEGORYVO =
        AttributesEnum.NodeCategoryVO.index();
    public static final int PAYMENTTERMSVO =
        AttributesEnum.PaymentTermsVO.index();
    public static final int PRIMARYSALESPERSONVO =
        AttributesEnum.PrimarySalesPersonVO.index();
    public static final int QUOTESVO = AttributesEnum.QuotesVO.index();
    public static final int CURRENCYVO = AttributesEnum.CurrencyVO.index();
    public static final int PRICELISTVO = AttributesEnum.PriceListVO.index();
    public static final int BUSINESSAGREEMENTVO =
        AttributesEnum.businessAgreementVo.index();
    public static final int USERPREFENTITYVO =
        AttributesEnum.userPrefEntityVO.index();
    public static final int NUMBERFORMATVIEWVA =
        AttributesEnum.NumberFormatViewVA.index();
    public static final int YESNOLOVVA = AttributesEnum.YesNoLOVVA.index();
    public static final int CUSTNAMEVO = AttributesEnum.CustNameVO.index();
    public static final int USERPREFSCVO = AttributesEnum.userPrefSCVO.index();
    public static final int CUSTOMERNAMEVO1 =
        AttributesEnum.CustomerNameVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public QuotesVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute QuoteDescription.
     * @return the QuoteDescription
     */
    public String getQuoteDescription() {
        return (String)getAttributeInternal(QUOTEDESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute QuoteDescription.
     * @param value value to set the  QuoteDescription
     */
    public void setQuoteDescription(String value) {
        setAttributeInternal(QUOTEDESCRIPTION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DealId.
     * @return the DealId
     */
    public String getDealId() {
        return (String)getAttributeInternal(DEALID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DealId.
     * @param value value to set the  DealId
     */
    public void setDealId(String value) {
        setAttributeInternal(DEALID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SalesChannel.
     * @return the SalesChannel
     */
    //    public String getSalesChannel() {
    //
    //        if (getAttributeInternal(SALESCHCODE) != null) {
    //            String salesCh = null;
    //                Object[] obj = { getAttributeInternal(SALESCHCODE) };
    //                Key key = new Key(obj);
    //                Row[] rows = this.getSalesChannelVO().findByKey(key, 1);
    //                if (rows != null && rows.length > 0) {
    //                    salesCh = (String)rows[0].getAttribute("Meaning");
    ////                    System.out.println("SalesChannel is "+salesCh);
    //                }
    //                return salesCh;
    //            }
    //         else
    //        return (String)getAttributeInternal(SALESCHANNEL);
    //    }
    public String getSalesChannel() {
        //        System.out.println("sales channel-1:"+this.getSalesChannel());
        //        System.out.println("sales channel-2:"+this.getAttributeInternal(SALESCHANNEL));
        //        System.out.println("sales channel-3:"+getSalesChannel().toString());
        //          ViewObjectImpl vo = (ViewObjectImpl)this.getSalesChannelVO().getViewObject();
        //          String colType = "Sales_Channel";
        //          String salesChannel = null,defaultval = null;
        //          List<String> temp = null;
        //          String userId = (String)ADFContext.getCurrent().getSessionScope().get("UserId");
        //          StringBuilder sb = new StringBuilder("('");
        //
        //               if(vo!=null){
        //                   Object[] obj = {userId,colType};
        //                   Key key = new Key(obj);
        //                   Row[] rows = this.getuserPrefEntityVO().findByKey(key, 2);
        //                   if(rows!=null && rows.length>0){
        //                       salesChannel = (String)rows[0].getAttribute("ColumnVal");
        //                       defaultval = (String)rows[0].getAttribute("DefaultVal");
        //                       }
        //                   System.out.println("currency values is:"+salesChannel);
        //                               if (salesChannel != null) {
        //                                   temp = Arrays.asList(salesChannel.split("\\s*,\\s*"));
        //                                   sb.append(temp.get(0));
        //                                   for (int i = 1; i < temp.size(); i++) {
        //                                       sb.append("','").append(temp.get(i));
        //                                   }
        //                                   sb.append("')");
        //                       }
        //                       System.out.println("sales Channel values:"+sb.toString());
        //                       vo.setWhereClause("meaning in"+sb.toString());
        //                       vo.executeQuery();
        //                   }
        //               if(defaultval!=null)
        //                   return defaultval;
        //               else
        return (String)getAttributeInternal(SALESCHANNEL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SalesChannel.
     * @param value value to set the  SalesChannel
     */
    public void setSalesChannel(String value) {
        setAttributeInternal(SALESCHANNEL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SalesRepresentative.
     * @return the SalesRepresentative
     */
    public String getSalesRepresentative() {
        return (String)getAttributeInternal(SALESREPRESENTATIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SalesRepresentative.
     * @param value value to set the  SalesRepresentative
     */
    public void setSalesRepresentative(String value) {
        setAttributeInternal(SALESREPRESENTATIVE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustomerSupportRepresent.
     * @return the CustomerSupportRepresent
     */
    public String getCustomerSupportRepresent() {
        //        ViewObject vo = this.getCustomerSupportRepresentVO().getViewObject();
        //        String colType = "CSR";
        //        String csr = null,defaultval = null;
        //        String defaultCSRVal = null;
        //        String userId = (String)ADFContext.getCurrent().getSessionScope().get("UserId");
        //        StringBuilder sb = new StringBuilder("(");
        //             if(vo!=null){
        //                 Object[] obj = {userId,colType};
        //                 Key key = new Key(obj);
        //                 Row[] rows = this.getuserPrefEntityVO().findByKey(key, 2);
        //                 if(rows!=null && rows.length>0){
        //                     csr = (String)rows[0].getAttribute("ColumnVal");
        //                     defaultval = (String)rows[0].getAttribute("DefaultVal");
        //                     }
        //                 if(csr!=null){
        //                         sb.append(csr).append(")");
        //                         System.out.println("csr values is:"+sb.toString());
        //                         System.out.println("csr values:"+sb.toString());
        //                              vo.setWhereClause("person_id in"+sb.toString());
        //                              vo.executeQuery();
        //                     }
        //                 }
        //        if(defaultval !=null){
        //        vo.clearCache();
        //        vo.setWhereClause(null);
        //        Row rows[] = vo.getFilteredRows("PersonId", defaultval);
        //        if(rows!=null && rows.length>0){
        //            defaultCSRVal = (String)rows[0].getAttribute("CustomerName");
        //            }
        //        }
        return (String)getAttributeInternal(CUSTOMERSUPPORTREPRESENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustomerSupportRepresent.
     * @param value value to set the  CustomerSupportRepresent
     */
    public void setCustomerSupportRepresent(String value) {
        setAttributeInternal(CUSTOMERSUPPORTREPRESENT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrganizationUnit.
     * @return the OrganizationUnit
     */

    public String getOrganizationUnit() {
        //        String ou = null;
        //        if (getAttributeInternal(ORGANIZATIONUNIT) != null) {
        //            System.out.println("OrgId vale::::"+this.getOrgId());
        //            Object[] obj = { this.getOrgId() };
        //            Key key = new Key(obj);
        //            Row[] rows = this.getOUVO().findByKey(key, 1);
        //            if (rows != null && rows.length > 0) {
        //                ou = (String)rows[0].getAttribute("OperatingUnit");
        //            }
        //            return ou;
        //        } else
        return (String)getAttributeInternal(ORGANIZATIONUNIT);
    }

    public boolean getuserBasedOU(BigDecimal orgId) {
        boolean isXMLOrgIdExists = false;
        List temp = new ArrayList();
        String orglist = null;
        StringBuilder sb = new StringBuilder("(");
        ViewObjectImpl vo = (ViewObjectImpl)this.getOUVO().getViewObject();
        String colType = "Operating_unit";
        if (vo != null) {
            vo.clearCache();
            Object[] obj = { usrId, colType };
            Key key = new Key(obj);
            Row[] rows = this.getuserPrefEntityVO().findByKey(key, 2);
            if (rows != null && rows.length > 0) {
                orglist = (String)rows[0].getAttribute("ColumnVal");
            }
            temp = Arrays.asList(orglist.split("\\s*,\\s*"));
            if (temp != null && temp.size() > 0) {
                if (orgId != null) {
                    if (temp.contains(orgId)) {
                        isXMLOrgIdExists = true;
                    }

                }
            }
            if (orglist != null) {
                if (orgId != null)
                    sb.append(orgId).append(",");

                sb.append(orglist).append(")");
                System.out.println("orgList values:" + sb.toString());
                vo.setWhereClause("org_id in" + sb.toString());
                vo.executeQuery();
            } else {
                vo.setWhereClause(null);
                vo.executeQuery();
            }
        }
        return isXMLOrgIdExists;
    }

    public String getUserBasedOrderType(BigDecimal orgId, BigDecimal otId) {
        BigDecimal orgNumber = null;
        if (orgId != null) {
            orgNumber = orgId;
        } else {
            orgNumber = this.getOrgId();
        }
        System.out.println("OrgId from OrderType::" + orgNumber);
        String defaultVal = null, defaultOT = null;
        BigDecimal defaultId = null;
        if (this.getOrgId() != null) {
            String orderTypeValues = null;
            StringBuilder sb = new StringBuilder("(");
            ViewObjectImpl vo =
                (ViewObjectImpl)this.getOrderTypeVO().getViewObject();
            ViewObjectImpl userBasedVO = (ViewObjectImpl)this.getuserPrefEntityVO().getViewObject();
            
            String colType = "'Order_type'";
            if (userBasedVO != null) {
                userBasedVO.clearCache();
                userBasedVO.setWhereClause(null);
//                Object[] obj = { usrId, colType,orgNumber };
//                Key key = new Key(obj);
//                Row[] rows = this.getuserPrefEntityVO().findByKey(key, 3);
                RowQualifier rq1 =
                    new RowQualifier("ColumnType =" + colType + " and UserId=" +
                                     usrId + " and OperatingUnit ='" + String.valueOf(orgNumber) +"'");
                Row[] rows = userBasedVO.getFilteredRows(rq1);
                if (rows != null && rows.length > 0) {
                    orderTypeValues =
                            (String)rows[0].getAttribute("ColumnVal"); //DefaultVal
                    defaultVal = (String)rows[0].getAttribute("DefaultVal");
                } else
                    sb.append("''");
                if (defaultVal != null) {
                    vo.clearCache();
                    vo.setWhereClause(null);
                    vo.setNamedWhereClauseParam("p_orgId", orgNumber);
                    Row r1[] =
                        vo.getFilteredRows("TransactionTypeId", new BigDecimal(defaultVal));
                    if (r1 != null && r1.length > 0) {
                        defaultId =
                                (BigDecimal)r1[0].getAttribute("TransactionTypeId");
                        defaultOT = (String)r1[0].getAttribute("Name");
                    }
                }
                if (otId != null && orderTypeValues != null) {
                    sb.append(otId).append(",").append(orderTypeValues);
                } else if (defaultId != null && orderTypeValues != null) {
                    sb.append(defaultId).append(",").append(orderTypeValues);
                } else {
                    sb.append(orderTypeValues);
                }

                sb.append(")");
                //                if (defaultId != null) {
                //                    vo.clearCache();
                //                    vo.setNamedWhereClauseParam("p_orgId", orgNumber);
                //                    Row fRow[] =
                //                        vo.getFilteredRows("TransactionTypeId", defaultId);
                //                    if (fRow != null && fRow.length > 0) {
                //                        defaultOT = (String)fRow[0].getAttribute("Name");
                //                    }
                //                }
                if (orderTypeValues != null) {
                    vo.clearCache();
                    vo.setWhereClause(null);
                    vo.setNamedWhereClauseParam("p_orgId", orgNumber);
                    if (!sb.toString().equalsIgnoreCase("()"))
                        vo.setWhereClause("transaction_type_id in" +
                                          sb.toString());
                    vo.executeQuery();
                    if (vo.getEstimatedRowCount() < 2) {
                        vo.clearCache();
                        vo.setWhereClause("org_id =" + orgNumber);
                        vo.executeQuery();

                    }
                } else {
                    vo.clearCache();
                    vo.setWhereClause("org_id =" + orgNumber);
                    vo.executeQuery();
                }

            }
        }
        return defaultOT;
    }


    public Map getUserBasedCustomerDetails(BigDecimal orgId, String custNum,
                                           String custName) {
        String acountNum = null;
        ViewObjectImpl vo =
            (ViewObjectImpl)this.getCustNameVO().getViewObject();
        ViewObjectImpl userBasedVO = (ViewObjectImpl)this.getuserPrefEntityVO().getViewObject();
        BigDecimal orgNumber = null;
        if (orgId != null) {
            orgNumber = orgId;
            if (custName != null) {
                vo.clearCache();
                vo.setWhereClause(null);
                vo.setNamedWhereClauseParam("P_org_id", null);
                vo.setNamedWhereClauseParam("P_org_id", orgNumber);
                Row r[] = vo.getFilteredRows("Customername", custName);
                if (r != null && r.length > 0) {
                    acountNum = (String)r[0].getAttribute("Accountnumber");
                }
            }
        } else {
            orgNumber = this.getOrgId();
        }
        String custVal = null, defaultVal = null, customername = null;
        Map custDetailsMap = new HashMap();
        if (orgNumber != null) {
            List temp = new ArrayList();
            StringBuilder sb = new StringBuilder("('");

            String colType = "'Customer'";
            if (userBasedVO != null) {
//                                Object[] obj = { usrId, colType,orgNumber };
//                                Key key = new Key(obj);
//                                Row[] rows = this.getuserPrefEntityVO().findByKey(key, 3);
                userBasedVO.clearCache();
                userBasedVO.setWhereClause(null);
                RowQualifier rq1 =
                    new RowQualifier("ColumnType =" + colType + " and UserId=" +
                                     usrId + " and OperatingUnit ='" + String.valueOf(orgNumber) +"'");
                Row[] rows = userBasedVO.getFilteredRows(rq1);
        
                if (rows != null && rows.length > 0) {
                    custVal =
                            (String)rows[0].getAttribute("ColumnVal"); //DefaultVal
                    defaultVal = (String)rows[0].getAttribute("DefaultVal");
                    System.out.println("default customer value:" + defaultVal);
                }
                    if (defaultVal != null && vo != null) {
                        vo.clearCache();
                        vo.setWhereClause(null);
                        vo.setNamedWhereClauseParam("P_org_id", null);
                        vo.setNamedWhereClauseParam("P_org_id", orgNumber);
                        Row fRow[] =
                            vo.getFilteredRows("Accountnumber", defaultVal); //Accountnumber
                        if (fRow != null && fRow.length > 0) {
                            customername =
                                    (String)fRow[0].getAttribute("Customername");
                            custDetailsMap.put("custNum", defaultVal);
                            custDetailsMap.put("custName", customername);
                        }

                    }
                    if (custVal != null) {
                        temp = Arrays.asList(custVal.split("\\s*,\\s*"));
                        if (acountNum != null) {
                            sb.append(acountNum);
                            for (int i = 0; i < temp.size(); i++) {
                                sb.append("','").append(temp.get(i));
                            }
                        } else if (custNum != null) {
                            custNum = custNum.trim();
                            sb.append(custNum);
                            for (int i = 0; i < temp.size(); i++) {
                                sb.append("','").append(temp.get(i));
                            }
                        } else if (defaultVal != null) {
                            sb.append(defaultVal);
                            for (int i = 0; i < temp.size(); i++) {
                                sb.append("','").append(temp.get(i));
                            }
                        } else {
                            sb.append(temp.get(0));
                            for (int i = 1; i < temp.size(); i++) {
                                sb.append("','").append(temp.get(i));
                            }
                        }
                    }
                    
                }
                sb.append("')");
                System.out.println("customer Name list valuse ::" +
                                   sb.toString());
                vo.clearCache();
                vo.setWhereClause(null);
                vo.setNamedWhereClauseParam("P_org_id", orgNumber);
                if (!sb.toString().equalsIgnoreCase("('')")) {
                    vo.setWhereClause("accountnumber in" + sb.toString());
                }
                System.out.println("Query is:"+sb.toString());
                vo.executeQuery();
                System.out.println("row count:" + vo.getEstimatedRowCount());
                if (vo.getEstimatedRowCount() < 2) {
                    vo.clearCache();
                    vo.setWhereClause(null);
                    vo.setNamedWhereClauseParam("P_org_id", orgNumber);
                    vo.executeQuery();
                }
            }
        return custDetailsMap;
    }

    public Map getSalesChannelBasedCustomerDetails(String salesChannel) {
        String custVal = null, defaultVal = null, customername = null;
        Map custDetailsMap = new HashMap();
        if (this.getOrgId() != null) {
            System.out.println("OrgId value from quotesVORowImpl:getSalesChannelBasedCustomerDetails " +
                               this.getOrgId());
            List temp = new ArrayList();
            StringBuilder sb = new StringBuilder("('");
            ViewObjectImpl vo =
                (ViewObjectImpl)this.getCustNameVO().getViewObject();
//            ViewObjectImpl scBasedVO = (ViewObjectImpl)this.getuserPrefSCVO().getViewObject();

            String colType = "Customer";
            if (vo != null) {
                System.out.println("SalesChannel::" + salesChannel);
                Object[] obj = { usrId, colType, salesChannel,String.valueOf(this.getOrgId()) };
                Key key = new Key(obj);
                Row[] rows = this.getuserPrefSCVO().findByKey(key, 4);
//                scBasedVO.clearCache();
//                scBasedVO.setWhereClause(null);
//		RowQualifier rq1 =
//                    new RowQualifier("ColumnType =" + colType +
//                                     " and UserId=" + usrId + " and OperatingUnit ='"+String.valueOf(this.getOrgId())+"'");
//                        Row[] rows = scBasedVO.getFilteredRows(rq1);
                if (rows != null && rows.length > 0) {
                    custVal =
                            (String)rows[0].getAttribute("ColumnVal"); //DefaultVal
                    defaultVal = (String)rows[0].getAttribute("DefaultVal");
                    if (defaultVal != null) {
                        vo.clearCache();
                        vo.setWhereClause(null);
                        vo.setNamedWhereClauseParam("P_org_id", null);
                        vo.setNamedWhereClauseParam("P_org_id",
                                                    this.getOrgId());
                        Row fRow[] =
                            vo.getFilteredRows("Accountnumber", defaultVal); //Accountnumber
                        if (fRow != null && fRow.length > 0) {
                            customername =
                                    (String)fRow[0].getAttribute("Customername");
                            custDetailsMap.put("custNum", defaultVal);
                            custDetailsMap.put("custName", customername);
                        }

                    }
                    if (custVal != null)
                        temp = Arrays.asList(custVal.split("\\s*,\\s*"));
                    if (temp != null && temp.size() > 0) {
                        if (defaultVal != null) {
                            sb.append(defaultVal);
                            for (int i = 0; i < temp.size(); i++) {
                                sb.append("','").append(temp.get(i));
                            }
                        } else {
                            sb.append(temp.get(0));
                            for (int i = 1; i < temp.size(); i++) {
                                sb.append("','").append(temp.get(i));
                            }
                        }
                    }
                }
                sb.append("')");
                if (!sb.toString().equalsIgnoreCase("('')")) {
                    System.out.println("customer Name list valuse ::" +
                                       sb.toString());
                    vo.clearCache();
                    vo.setWhereClause(null);
                    vo.setNamedWhereClauseParam("P_org_id", this.getOrgId());
                    vo.setWhereClause("accountnumber in" + sb.toString());
                    vo.executeQuery();
                    System.out.println("For sc based cust Rowcount:" +
                                       vo.getEstimatedRowCount());
                    if (vo.getEstimatedRowCount() == 1) {
                        vo.clearCache();
                        vo.setWhereClause(null);
                        vo.setNamedWhereClauseParam("P_org_id",
                                                    this.getOrgId());
                        //                            vo.setWhereClause("accountnumber in" + sb.toString());
                        vo.executeQuery();
                    }
                } else {
                    getUserBasedCustomerDetails(this.getOrgId(), null, null);
                }
            }
        }
        return custDetailsMap;
    }

    public String getSalesChannelBasedCurrency(String salesChannel) {
        ViewObjectImpl vo =
            (ViewObjectImpl)this.getCurrencyVO().getViewObject();
        String colType = "Currency";
        String currency = null, defaultval = null;
        String defaultCurrencyVal = null;
        List<String> temp = null;
        Row fRow[] = null;
        StringBuilder sb = new StringBuilder("('");
        if (vo != null) {
            Object[] obj = { usrId, colType, salesChannel,String.valueOf(this.getOrgId()) };
            Key key = new Key(obj);
            Row[] rows = this.getuserPrefSCVO().findByKey(key, 4);
            if (rows != null && rows.length > 0) {
                currency = (String)rows[0].getAttribute("ColumnVal");
                defaultval = (String)rows[0].getAttribute("DefaultVal");
            }
            System.out.println("currency values is:" + currency);
            if (defaultval !=
                null) { //vo.getFilteredRows("CurrencyCode",defaultval);
                vo.clearCache();
                vo.setWhereClause(null);
                fRow = vo.getFilteredRows("CurrencyCode", defaultval);
                if (fRow != null && fRow.length > 0)
                    defaultCurrencyVal = (String)fRow[0].getAttribute("Name");
            }
            if (currency != null) {
                temp = Arrays.asList(currency.split("\\s*,\\s*"));
                if (defaultval != null) {
                    sb.append(defaultval);
                    for (int i = 0; i < temp.size(); i++) {
                        sb.append("','").append(temp.get(i));
                    }
                } else {
                    sb.append(temp.get(0));
                    for (int i = 1; i < temp.size(); i++) {
                        sb.append("','").append(temp.get(i));
                    }
                }
                sb.append("')");
                System.out.println("currency List :values:" + sb.toString());
                vo.clearCache();
                vo.setWhereClause("currency_code in" + sb.toString());
                vo.executeQuery();
            } else {
                getUserBasedCurrency(null);
            }
        }
        return defaultval;
    }

    public String getSalesChannelBasedIncoTerm(String salesChannel) {
        ViewObjectImpl vo =
            (ViewObjectImpl)this.getIncoTermVO1().getViewObject();
        String colType = "IncoTerm";
        String incoTerm = null, defaultval = null;
//        String defaultIncoTerm = null;
        List<String> temp = null;
        StringBuilder sb = new StringBuilder("('");
        if (vo != null) {
            Object[] obj = { usrId, colType, salesChannel,String.valueOf(this.getOrgId()) };
            Key key = new Key(obj);
            Row[] rows = this.getuserPrefSCVO().findByKey(key, 4);
            if (rows != null && rows.length > 0) {
                incoTerm = (String)rows[0].getAttribute("ColumnVal");
                defaultval = (String)rows[0].getAttribute("DefaultVal");
            }
            System.out.println("IncoTerm values is:" + incoTerm);
            if (incoTerm != null) {
                temp = Arrays.asList(incoTerm.split("\\s*,\\s*"));
                sb.append(defaultval);
                for (int i = 0; i < temp.size(); i++) {
                    sb.append("','").append(temp.get(i));
                }
                sb.append("')");
                vo.clearCache();
                System.out.println("incoTerm values:" + sb.toString());
                vo.setWhereClause(null);
                vo.setWhereClause("meaning in" + sb.toString());
                vo.executeQuery();
            } else
                getUserBasedIncoTerm(null);

        }
        //        if (defaultval != null) {
        //            Row rows[] = vo.getFilteredRows("Meaning", defaultval);
        //            if (rows != null && rows.length > 0) {
        //                defaultIncoTerm = (String)rows[0].getAttribute("Description");
        //            }
        //        }

        return defaultval;
    }

    public String getSalesChannelBasedPaymentTerm(String salesChannel) {
        ViewObjectImpl vo =
            (ViewObjectImpl)this.getPaymentTermsVO().getViewObject();
        String colType = "PaymentTerms";
        String paymentTerm = null, defaultval = null;
        String defaultPaymentTerm = null;
        List<String> temp = null;
        StringBuilder sb = new StringBuilder("('");
        if (vo != null) {
            Object[] obj = { usrId, colType, salesChannel,String.valueOf(this.getOrgId()) };
            Key key = new Key(obj);
            Row[] rows = this.getuserPrefSCVO().findByKey(key, 4);
            if (rows != null && rows.length > 0) {
                paymentTerm = (String)rows[0].getAttribute("ColumnVal");
                defaultval = (String)rows[0].getAttribute("DefaultVal");
            }
            if (defaultval != null) {
                vo.clearCache();
                vo.setWhereClause(null);
                Row rows1[] = vo.getFilteredRows("Name", defaultval);
                if (rows1 != null && rows1.length > 0) {
                    defaultPaymentTerm =
                            (String)rows1[0].getAttribute("Description");
                }
            }
            System.out.println("PaymentTerm values is:" + paymentTerm);
            if (paymentTerm != null) {
                temp = Arrays.asList(paymentTerm.split("\\s*,\\s*"));
                if (defaultval != null) {
                    sb.append(defaultval);
                    for (int i = 0; i < temp.size(); i++) {
                        sb.append("','").append(temp.get(i));
                    }
                } else {
                    sb.append(temp.get(0));
                    for (int i = 1; i < temp.size(); i++) {
                        sb.append("','").append(temp.get(i));
                    }
                }
            }
                sb.append("')");
                System.out.println("Payment Term values:" + sb.toString());
                vo.clearCache();
                vo.setWhereClause(null);
                if (!sb.toString().equalsIgnoreCase("('')"))
                    vo.setWhereClause("Name in" + sb.toString());
                vo.executeQuery();
           
        }
        return defaultval;
    }

    public String getSalesChannelBasedBA(String salesChannel) {
        ViewObjectImpl vo =
            (ViewObjectImpl)this.getbusinessAgreementVo().getViewObject();
        String colType = "Business_Agreement";
        String ba = null, defaultval = null;

        String defaultBA = null;
        List<String> temp = null;
        StringBuilder sb = new StringBuilder("(");
        if (vo != null) {
            Object[] obj = { usrId, colType, salesChannel,String.valueOf(this.getOrgId()) };
            Key key = new Key(obj);
            Row[] rows = this.getuserPrefSCVO().findByKey(key, 4);
            if (rows != null && rows.length > 0) {
                ba = (String)rows[0].getAttribute("ColumnVal");
                defaultval = (String)rows[0].getAttribute("DefaultVal");
            }
            if (defaultval != null) {
                vo.clearCache();
                vo.setWhereClause(null);
                Row rows1[] =
                    vo.getFilteredRows("AgreementId", new BigDecimal(defaultval));
                if (rows1 != null && rows1.length > 0) {
                    defaultBA = (String)rows1[0].getAttribute("Name");
                }
            }
            System.out.println("ba values is:" + ba);
            if (ba != null) {
                temp = Arrays.asList(ba.split("\\s*,\\s*"));
                if (defaultval != null) {
                    sb.append(defaultval);
                    for (int i = 0; i < temp.size(); i++) {
                        sb.append(",").append(temp.get(i));
                    }
                } else {
                    sb.append(temp.get(0));
                    for (int i = 1; i < temp.size(); i++) {
                        sb.append(",").append(temp.get(i));
                    }
                }
            }
            sb.append(")");

            System.out.println("ba values:" + sb.toString());
            vo.clearCache();
            vo.setWhereClause(null);
            if (!sb.toString().equalsIgnoreCase("()"))
                vo.setWhereClause("agreement_id in" + sb.toString());
            else {
            }
            vo.executeQuery();
        }
        return defaultBA;
    }


    public String getUserBasedSalesRep(BigDecimal orgId) {
        BigDecimal orgNumber = null;
        if (orgId != null) {
            orgNumber = orgId;
        } else {
            orgNumber = this.getOrgId();
        }
        System.out.println("OrgId from Sales Representative::" + orgNumber);
        String defaultVal = null, defaultSalesRep = null;
        if (orgNumber != null) {
            String salesRepValues = null;
            StringBuilder sb = new StringBuilder("(");
            ViewObjectImpl vo =
                (ViewObjectImpl)this.getSalesRepresentativeVO().getViewObject();
            ViewObjectImpl userBasedVO = (ViewObjectImpl)this.getuserPrefEntityVO().getViewObject();
            String colType = "'Sales_Rep'";
            if (userBasedVO != null) {
                userBasedVO.clearCache();
                userBasedVO.setWhereClause(null);
//                Object[] obj = { usrId, colType,orgNumber };
//                Key key = new Key(obj);
//                Row[] rows = this.getuserPrefEntityVO().findByKey(key, 3);
                  RowQualifier rq1 =
                    new RowQualifier("ColumnType =" + colType + " and UserId=" +
                                     usrId + " and OperatingUnit ='" + String.valueOf(orgNumber) +"'");
                Row[] rows = userBasedVO.getFilteredRows(rq1);
                if (rows != null && rows.length > 0) {
                    salesRepValues =
                            (String)rows[0].getAttribute("ColumnVal"); //DefaultVal
                    defaultVal = (String)rows[0].getAttribute("DefaultVal");
                }
                if(defaultVal!=null){
                    sb.append(defaultVal);
                }
                if(defaultVal!=null && salesRepValues!=null)
                    sb.append(",");
                if(salesRepValues!=null)
                sb.append(salesRepValues);
                sb.append(")");
                if (defaultVal != null) {
                    vo.clearCache();
                    vo.setWhereClause(null);
                    vo.setNamedWhereClauseParam("p_orgId", null);
                    vo.setNamedWhereClauseParam("p_orgId", orgNumber);
                    RowQualifier rq =
                        new RowQualifier(" ResourceId =" +
                                         new BigDecimal(defaultVal));
                    Row fRow[] = vo.getFilteredRows(rq);
                    if (fRow != null && fRow.length > 0) {
                        defaultSalesRep =
                                (String)fRow[0].getAttribute("ResourceName");
                    }
                }

                vo.clearCache();
                vo.setWhereClause(null);
                vo.setNamedWhereClauseParam("p_orgId", orgNumber);
                if (!sb.toString().equalsIgnoreCase("()"))
                    vo.setWhereClause("RESOURCE_ID in" + sb.toString());
                System.out.println("Query:" + vo.getQuery());
                vo.executeQuery();
                System.out.println("sales Rep Estimated Row Count:" +
                                   vo.getEstimatedRowCount());
            }
        }
        return defaultSalesRep;
    }

    public String getUserBasedCSR(BigDecimal csr) {
        String defaultVal = null, defaultCSR = null;
        String csrValues = null;
        StringBuilder sb = new StringBuilder("(");
        ViewObjectImpl vo =
            (ViewObjectImpl)this.getCustomerSupportRepresentVO().getViewObject();
        String colType = "CSR";
        if (vo != null) {
            Object[] obj = { usrId, colType };
            Key key = new Key(obj);
            Row[] rows = this.getuserPrefEntityVO().findByKey(key, 2);
            if (rows != null && rows.length > 0) {
                csrValues =
                        (String)rows[0].getAttribute("ColumnVal"); //DefaultVal
                defaultVal = (String)rows[0].getAttribute("DefaultVal");
            }
            if (csrValues!=null) {
                if (csr != null) {
                    sb.append(csr).append(",").append(csrValues);
                } else if (defaultVal != null) {
                    sb.append(defaultVal).append(",").append(csrValues);
                } else
                    sb.append(csrValues);
            }
              sb.append(")");
            if (defaultVal != null) {
                vo.clearCache();
                vo.setWhereClause(null);
                Row fRow[] =
                    vo.getFilteredRows("PersonId", new BigDecimal(defaultVal));
                if (fRow != null && fRow.length > 0) {
                    defaultCSR = (String)fRow[0].getAttribute("CustomerName");
                }
            }
            vo.clearCache();
            vo.reset();
            vo.setWhereClause(null);
            if (!sb.toString().equalsIgnoreCase("()")) 
                vo.setWhereClause("person_id in" + sb.toString());
            vo.executeQuery();
        }

        return defaultCSR;
    }


    public String getUserBasedCurrency(String currencyCode) {
        System.out.println("OrgId::"+this.getOrgId());
       System.out.println("orgIdd::"+new BigDecimal(this.getOrgId().toString()));
       System.out.println("orgIddd::"+String.valueOf(this.getOrgId()));
        if (currencyCode != null) {
            currencyCode = currencyCode.trim();
        }
        ViewObjectImpl vo =
            (ViewObjectImpl)this.getCurrencyVO().getViewObject();
        ViewObjectImpl userPrefVO = (ViewObjectImpl)this.getuserPrefEntityVO().getViewObject();
        String colType = "Currency";
        String currency = null, defaultval = null;
        String defaultCurrencyVal = null;
        List<String> temp = null;
        Row fRow[] = null;
        StringBuilder sb = new StringBuilder("('");
        if (vo != null & userPrefVO!=null) {
            userPrefVO.clearCache();
            userPrefVO.setWhereClause(null);
            Object[] obj = { usrId, colType};
            Key key = new Key(obj);
            Row[] rows = userPrefVO.findByKey(key, 2);
            if (rows != null && rows.length > 0) {
                currency = (String)rows[0].getAttribute("ColumnVal");
                defaultval = (String)rows[0].getAttribute("DefaultVal");
            }
            System.out.println("currency values is:" + currency);
            if (defaultval !=
                null) { //vo.getFilteredRows("CurrencyCode",defaultval);
                vo.clearCache();
                vo.setWhereClause(null);
                fRow = vo.getFilteredRows("CurrencyCode", defaultval);
                if (fRow != null && fRow.length > 0)
                    defaultCurrencyVal = (String)fRow[0].getAttribute("Name");
            }
            if (currency != null) {
                temp = Arrays.asList(currency.split("\\s*,\\s*"));
                if (currencyCode != null) {
                    sb.append(currencyCode);
                    for (int i = 0; i < temp.size(); i++) {
                        sb.append("','").append(temp.get(i));
                    }
                } else if (defaultval != null) {
                    sb.append(defaultval);
                    for (int i = 0; i < temp.size(); i++) {
                        sb.append("','").append(temp.get(i));
                    }
                } else {
                    sb.append(temp.get(0));
                    for (int i = 1; i < temp.size(); i++) {
                        sb.append("','").append(temp.get(i));
                    }
                }
            }
            sb.append("')");
            vo.clearCache();
            vo.setWhereClause(null);
            if (!sb.toString().equalsIgnoreCase("('')")) {
                System.out.println("currency List :values:" + sb.toString());
                vo.setWhereClause("currency_code in" + sb.toString());
            }
            vo.executeQuery();

        }
        return defaultval;
    }

    public String getUserBasedIncoTerm(String itMeaning) {
        ViewObjectImpl vo =
            (ViewObjectImpl)this.getIncoTermVO1().getViewObject();
        String colType = "IncoTerm";
        String incoTerm = null, defaultval = null;
//        String defaultIncoTerm = null;
        List<String> temp = null;
        StringBuilder sb = new StringBuilder("('");
        if (vo != null) {
            Object[] obj = { usrId, colType };
            Key key = new Key(obj);
            Row[] rows = this.getuserPrefEntityVO().findByKey(key, 2);
            if (rows != null && rows.length > 0) {
                incoTerm = (String)rows[0].getAttribute("ColumnVal");
                defaultval = (String)rows[0].getAttribute("DefaultVal");
            }
            System.out.println("IncoTerm values is:" + incoTerm);
            if (incoTerm != null) {
                temp = Arrays.asList(incoTerm.split("\\s*,\\s*"));

                if (itMeaning != null) {
                    sb.append(itMeaning);
                    for (int i = 0; i < temp.size(); i++) {
                        sb.append("','").append(temp.get(i));
                    }
                } else if (defaultval != null) {
                    sb.append(defaultval);
                    for (int i = 0; i < temp.size(); i++) {
                        sb.append("','").append(temp.get(i));
                    }
                } else {
                    sb.append(temp.get(0));
                    for (int i = 1; i < temp.size(); i++) {
                        sb.append("','").append(temp.get(i));
                    }
                }
            }
                sb.append("')");
                vo.clearCache();
                vo.setWhereClause(null);
                if (!sb.toString().equalsIgnoreCase("('')")) {
                    vo.setWhereClause("meaning in" + sb.toString());
                }
                vo.executeQuery();
           
        }
        return defaultval;
    }

    public String getUserBasedPaymentTerm() {
        ViewObjectImpl vo =
            (ViewObjectImpl)this.getPaymentTermsVO().getViewObject();
        String colType = "PaymentTerms";
        String defaultval = null;
        //        String defaultPaymentTerm = null;
        if (vo != null) {
            Object[] obj = { usrId, colType };
            Key key = new Key(obj);
            Row[] rows = this.getuserPrefEntityVO().findByKey(key, 2);
            if (rows != null && rows.length > 0) {
                defaultval = (String)rows[0].getAttribute("DefaultVal");
            }
            //            if (defaultval != null) {
            //                vo.clearCache();
            //                vo.setWhereClause(null);
            //                Row rows1[] = vo.getFilteredRows("Name", defaultval);
            //                if (rows1 != null && rows1.length > 0) {
            //                    defaultPaymentTerm =
            //                            (String)rows1[0].getAttribute("Description");
            //                }
            //            }
            vo.clearCache();
            vo.setWhereClause(null);
            vo.executeQuery();
            System.out.println("count:"+vo.getEstimatedRowCount());
        }
        return defaultval;
    }


    public void getUserBasedSalesChannel(String sc) {
        ViewObjectImpl vo =
            (ViewObjectImpl)this.getSalesChannelVO().getViewObject();
        String colType = "Sales_Channel";
        String salesChannel = null;
        List<String> temp = null;
        StringBuilder sb = new StringBuilder("('");
        if (vo != null) {
            Object[] obj = { usrId, colType };
            Key key = new Key(obj);
            Row[] rows = this.getuserPrefEntityVO().findByKey(key, 2);
            if (rows != null && rows.length > 0) {
                salesChannel = (String)rows[0].getAttribute("ColumnVal");
            }
            System.out.println("SalesChannel values is:" + salesChannel);
            if (salesChannel != null) {
                temp = Arrays.asList(salesChannel.split("\\s*,\\s*"));

                if (sc != null) {
                    sb.append(sc);
                    for (int i = 0; i < temp.size(); i++) {
                        sb.append("','").append(temp.get(i));
                    }
                } else {
                    sb.append(temp.get(0));
                    for (int i = 1; i < temp.size(); i++) {
                        sb.append("','").append(temp.get(i));
                    }
                }
            }
            sb.append("')");
            vo.clearCache();
            vo.setWhereClause(null);
            if (!sb.toString().equalsIgnoreCase("('')")) {
                System.out.println("sales Channel values:" + sb.toString());
                vo.setWhereClause("meaning in" + sb.toString());
            }
            vo.executeQuery();

        }

    }

    //    public String getOrganizationUnit() {
    //        String oiglist = null,Ou = null;
    //        StringBuilder sb = new StringBuilder("(");
    //        ViewObjectImpl vo = (ViewObjectImpl)this.getOUVO().getViewObject();
    //        String userId = (String)ADFContext.getCurrent().getSessionScope().get("UserId");
    //        String colType = "Operating_unit";
    //        String orgIdOnLoad = (String)ADFContext.getCurrent().getSessionScope().get("OrganizationUnit");
    //        if(vo!=null ){
    //            Object[] obj = {userId,colType};
    //            Key key = new Key(obj);
    //            Row[] rows = this.getuserPrefEntityVO().findByKey(key, 2);
    //            if(rows!=null && rows.length>0){
    //                oiglist = (String)rows[0].getAttribute("ColumnVal");
    //                }
    //           sb.append(oiglist).append(")");
    //           System.out.println("orgList values:"+sb.toString());
    ////           RowQualifier rq = new RowQualifier("OrgId in"+sb.toString());
    ////           Row r[] = vo.getFilteredRows(rq);
    ////           if(r!=null && r.length>0)
    ////           Ou = (String)r[0].getAttribute("OperatingUnit");
    ////            this.setOrgId((BigDecimal)r[0].getAttribute("OrgId"));
    ////            ADFContext.getCurrent().getSessionScope().put("OrganizationUnit",r[0].getAttribute("OperatingUnit"));
    ////                ADFContext.getCurrent().getSessionScope().set();
    ////            orgIdOnLoad = (String)r[0].getAttribute("OperatingUnit");
    ////                System.out.println("OU value is:"+Ou);
    //                vo.setWhereClause("org_id in"+sb.toString());
    //                vo.executeQuery();
    ////                RowSetIterator iter = vo.getRowSetIterator();
    ////                if(iter.hasNext()){
    ////                    Row r = iter.next();
    //////                this.setOrgId((BigDecimal)r.getAttribute("OrgId"));
    ////                ADFContext.getCurrent().getSessionScope().put("OrganizationUnit",r.getAttribute("OperatingUnit"));
    //////                System.out.println("Orgid value isss:"+this.getOrgId());
    ////                orgIdOnLoad = (String)r.getAttribute("OperatingUnit");
    ////            }
    //            }
    ////        System.out.println(getAttributeInternal(ORGANIZATIONUNIT));
    ////        if(orgIdOnLoad!=null)
    ////        return orgIdOnLoad;
    ////        else{
    ////            return null;
    //            return (String)getAttributeInternal(ORGANIZATIONUNIT);
    ////        }
    //    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrganizationUnit.
     * @param value value to set the  OrganizationUnit
     */
    public void setOrganizationUnit(String value) {
        setAttributeInternal(ORGANIZATIONUNIT, value);
    }


    /**
     * Gets the attribute value for the calculated attribute OrderType.
     * @return the OrderType
     */
    public String getOrderType() {
        System.out.println("OrgId::" + this.getOrgId());
        //        String orderTypeVal = null;
        //        String orderTypeOnLoad = (String)ADFContext.getCurrent().getSessionScope().get("OrderTypeValue");
        //        if (this.getOrgId()!=null && orderTypeOnLoad==null) {
        ////            System.out.println(this.getOrgId().toString());
        //            String orderTypeValues = null;
        //            StringBuilder sb = new StringBuilder("(");
        //            ViewObjectImpl vo = (ViewObjectImpl)this.getOrderTypeVO().getViewObject();
        //            String userId =
        //                (String)ADFContext.getCurrent().getSessionScope().get("UserId");
        //            String colType = "Order_type";
        //            if (vo != null) {
        //                Object[] obj = { userId, colType };
        //                Key key = new Key(obj);
        //                Row[] rows = this.getuserPrefEntityVO().findByKey(key, 2);
        //                if (rows != null && rows.length > 0) {
        //                    orderTypeValues =
        //                            (String)rows[0].getAttribute("ColumnVal");
        //                }
        //                sb.append(orderTypeValues).append(")");
        //                RowQualifier rq = new RowQualifier("TransactionTypeId in" + sb.toString() +
        //                                  " ANd OrgId =" + this.getOrgId());
        //                Row r[] = vo.getFilteredRows(rq);
        //                if(r!=null && r.length>0){
        ////                    this.setOrderType((String)r[0].getAttribute("Name"));
        //                        orderTypeVal = (String)r[0].getAttribute("Name");
        //                        orderTypeOnLoad = (String)r[0].getAttribute("Name");
        //                        ADFContext.getCurrent().getSessionScope().put("OrderTypeValue",r[0].getAttribute("Name"));
        //                    }
        ////                vo.setWhereClause("transaction_type_id in" + sb.toString() +
        ////                                  " ANd org_id =" + this.getOrgId());
        ////                vo.executeQuery();
        //            }
        //        }
        //
        ////        RowSetIterator iter = this.getOrderTypeVO().createRowSetIterator(null);
        ////
        ////        while(iter.hasNext()){
        ////            Row row = iter.next();
        ////            if(row!=null)
        ////                System.out.println("Name from VA:"+row.getAttribute("Name"));
        ////                System.out.println("Id from VA:"+row.getAttribute("TransactionTypeId"));
        ////
        ////            }
        //        if(orderTypeVal!=null)
        //        return orderTypeVal;
        //        else
        //            return null;
        return (String)getAttributeInternal(ORDERTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrderType.
     * @param value value to set the  OrderType
     */
    public void setOrderType(String value) {
        setAttributeInternal(ORDERTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustomerName.
     * @return the CustomerName
     */
    //    public String getCustomerName() {
    //        return (String) getAttributeInternal(CUSTOMERNAME);
    //    }
    public String getCustomerName() {
        //        System.out.println("OrgId"+getAttributeInternal(ORGID));
        //        if (getAttributeInternal(ORGID)!=null) {
        //            String custVal = null;
        //            List temp = new ArrayList();
        //            StringBuilder sb = new StringBuilder("('");
        //
        //
        //            ViewObjectImpl vo = (ViewObjectImpl)this.getCustomerNameVO().getViewObject();
        //        //            ViewObjectImpl voImpl = (ViewObjectImpl)vo;
        //
        //            //        ViewObjectImpl userPrefVA = (ViewObjectImpl)this.getuserPrefEntityVO();
        //            String userId =
        //                (String)ADFContext.getCurrent().getSessionScope().get("UserId");
        //            String colType = "Customer";
        //            if (vo != null) {
        //
        //                Object[] obj = { userId, colType };
        //                Key key = new Key(obj);
        //                Row[] rows = this.getuserPrefEntityVO().findByKey(key, 2);
        //                if(rows!=null && rows.length>0){
        //                   custVal = (String)rows[0].getAttribute("ColumnVal");
        //                    if(custVal !=null){
        //                            temp =  Arrays.asList(custVal.split("\\s*,\\s*"));
        //                            sb.append(temp.get(0));
        //                            for(int i=1;i<temp.size();i++){
        //                                    sb.append("','").append(temp.get(i));
        //                                }
        //                        }
        //                        sb.append("')");
        //                    }
        ////                      sb.append(rows[0].getAttribute("ColumnVal"));
        ////                      for(int i=1;i<rows.length;i++){
        ////                              sb.append("','").append(rows[i].getAttribute("ColumnVal")).append("'");
        ////                          }
        ////                        for(Row r: rows){
        ////                            sb.append("'").append(r.getAttribute("ColumnVal")).append("',");
        ////                            }
        //
        //                        if (rows != null && rows.length > 0) {
        //                            custVal =
        //                                    (String)rows[0].getAttribute("ColumnVal");
        //                        }
        //                        sb.append(")");
        //                        System.out.println("customer Name list valuse ::"+sb.toString());
        //                        vo.setNamedWhereClauseParam("p_orgId", this.getOrgId());
        //                        RowQualifier rq =  new RowQualifier("accountnumber in" + sb.toString());
        //                        Row r[] = vo.getFilteredRows(rq);
        //                        if(r!=null && r.length>0)
        //                        if(this.getOrgId()!=null && this.getOrgId().intValue()>0)
        //                        vo.setNamedWhereClauseParam("p_orgId", this.getOrgId());
        //                        vo.setWhereClause("accountnumber in" + sb.toString());
        ////                vo.applyViewCriteria(null);
        //        //                ViewCriteria vc = vo.createViewCriteria();
        ////                vo.ensureVariableManager().setVariableValue("P_org_id", 121);
        //        //                                      vo.setNamedWhereClauseParam("P_org_id", getAttributeInternal(ORGID));
        //                vo.executeQuery();
        //            }
        //        }
        //
        //
        //
        //
        ////        if (getAttributeInternal(CUSTOMERNUMBER)!= null) {
        ////            String custName = null;
        ////            Object partyId = getAttributeInternal(PARTYID);
        ////            if (partyId != null) {
        //////                System.out.println("partyId:" + partyId);
        ////                Object[] obj = { partyId };
        ////                Key key = new Key(obj);
        ////                Row[] rows = this.getCustomerNameVO().findByKey(key, 1);
        ////                if (rows != null && rows.length > 0) {
        ////                    custName = (String)rows[0].getAttribute("Customername");
        ////                }
        //////                System.out.println("custName from VORowImpl:" + custName);
        ////            }
        //            return custName;
        //        } else
        return (String)getAttributeInternal(CUSTOMERNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustomerName.
     * @param value value to set the  CustomerName
     */
    public void setCustomerName(String value) {
        setAttributeInternal(CUSTOMERNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustomerNumber.
     * @return the CustomerNumber
     */
    //    public String getCustomerNumber() {
    //        return (String) getAttributeInternal(CUSTOMERNUMBER);
    //    }
    public String getCustomerNumber() {

        //        System.out.println("OrgId"+getAttributeInternal(ORGID));
        //        if (getAttributeInternal(ORGID)!=null) {
        //            String custVal = null;
        //            List temp = new ArrayList();
        //            StringBuilder sb = new StringBuilder("('");
        //
        //
        //            ViewObject vo = this.getCustNameVO().getViewObject();
        ////            ViewObjectImpl voImpl = (ViewObjectImpl)vo;
        //
        //            //        ViewObjectImpl userPrefVA = (ViewObjectImpl)this.getuserPrefEntityVO();
        //            String userId =
        //                (String)ADFContext.getCurrent().getSessionScope().get("UserId");
        //            String colType = "Customer";
        //            if (vo != null) {
        //
        //                Object[] obj = { userId, colType };
        //                Key key = new Key(obj);
        //                Row[] rows = this.getuserPrefEntityVO().findByKey(key, 2);
        //                if(rows!=null && rows.length>0){
        //                   custVal = (String)rows[0].getAttribute("ColumnVal");
        //                    ;
        //                    if(custVal !=null){
        //                            temp =  Arrays.asList(custVal.split("\\s*,\\s*"));
        //                            sb.append(temp.get(0));
        //                            for(int i=1;i<temp.size();i++){
        //                                    sb.append("','").append(temp.get(i));
        //                                }
        //                        }
        //                        sb.append("')");
        //                    }
        //              sb.append(rows[0].getAttribute("ColumnVal"));
        //              for(int i=1;i<rows.length;i++){
        //                      sb.append("','").append(r.getAttribute("ColumnVal")).append("'");
        //                  }
        //                for(Row r: rows){
        //                    sb.append("'").append(r.getAttribute("ColumnVal")).append("',");
        //                    }
        //
        //                if (rows != null && rows.length > 0) {
        //                    custVal =
        //                            (String)rows[0].getAttribute("ColumnVal");
        //                }
        //                sb.append(custVal).append(")");
        //                vo.setWhereClause("accountnumber in" + sb.toString());
        //                vo.applyViewCriteria(null);
        ////                ViewCriteria vc = vo.createViewCriteria();
        //                vo.ensureVariableManager().setVariableValue("P_org_id", 121);
        ////                                      vo.setNamedWhereClauseParam("P_org_id", getAttributeInternal(ORGID));
        //                vo.executeQuery();
        //            }
        //        }

        //        if (getAttributeInternal(CUSTOMERNAME) != null) {
        //            Object partyId = getAttributeInternal(PARTYID);
        //            String custNum = null;
        //            if (partyId != null) {
        //                Object[] obj = { partyId };
        //                Key key = new Key(obj);
        //                Row[] rows = this.getCustomerNameVO().findByKey(key, 1);
        ////                System.out.println("Estimated cust Numbers list size: " +
        ////                                   rows.length);
        //                if (rows != null && rows.length > 0) {
        //                    custNum = (String)rows[0].getAttribute("Accountnumber");
        //                }
        //
        //            }
        //            return custNum;
        //        } else
        return (String)getAttributeInternal(CUSTOMERNUMBER);
    }


    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustomerNumber.
     * @param value value to set the  CustomerNumber
     */
    public void setCustomerNumber(String value) {
        setAttributeInternal(CUSTOMERNUMBER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AdvantestQuotationNumber.
     * @return the AdvantestQuotationNumber
     */
    public String getAdvantestQuotationNumber() {
        return (String)getAttributeInternal(ADVANTESTQUOTATIONNUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AdvantestQuotationNumber.
     * @param value value to set the  AdvantestQuotationNumber
     */
    public void setAdvantestQuotationNumber(String value) {
        setAttributeInternal(ADVANTESTQUOTATIONNUMBER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute QuotationDate.
     * @return the QuotationDate
     */
    public String getQuotationDate() {
        return (String)getAttributeInternal(QUOTATIONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute QuotationDate.
     * @param value value to set the  QuotationDate
     */
    public void setQuotationDate(String value) {
        setAttributeInternal(QUOTATIONDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Page.
     * @return the Page
     */
    public String getPage() {
        return (String)getAttributeInternal(PAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Page.
     * @param value value to set the  Page
     */
    public void setPage(String value) {
        setAttributeInternal(PAGE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Systemid.
     * @return the Systemid
     */
    public String getSystemid() {
        return (String)getAttributeInternal(SYSTEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Systemid.
     * @param value value to set the  Systemid
     */
    public void setSystemid(String value) {
        setAttributeInternal(SYSTEMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymentTerms.
     * @return the PaymentTerms
     */
    public String getPaymentTerms() {
        //        ViewObject vo = this.getPaymentTermsVO().getViewObject();
        //        String salesChannel = (String)getAttributeInternal(SALESCHANNEL);
        //        String colType = "PaymentTerms";
        //        String paymentTerms = null,defaultval = null;
        //        String defaultPaymentTermVal = null;
        //        List<String> temp = null;
        //        String userId = (String)ADFContext.getCurrent().getSessionScope().get("UserId");
        //        StringBuilder sb = new StringBuilder("('");
        //        if(salesChannel ==null){
        //             if(vo!=null){
        //                 Object[] obj = {userId,colType};
        //                 Key key = new Key(obj);
        //                 Row[] rows = this.getuserPrefEntityVO().findByKey(key, 2);
        //                 if(rows!=null && rows.length>0){
        //                     paymentTerms = (String)rows[0].getAttribute("ColumnVal");
        //                     defaultval = (String)rows[0].getAttribute("DefaultVal");
        //                     }
        //                 System.out.println("PaymentTerm values is:"+paymentTerms);
        //                             if (paymentTerms != null) {
        //                                 temp = Arrays.asList(paymentTerms.split("\\s*,\\s*"));
        //                                 sb.append(temp.get(0));
        //                                 for (int i = 1; i < temp.size(); i++) {
        //                                     sb.append("','").append(temp.get(i));
        //                                 }
        //                                 sb.append("')");
        //                         System.out.println("paymentTerms values:"+sb.toString());
        //                              vo.setWhereClause("name in"+sb.toString());
        //                              vo.executeQuery();
        //                     }
        //
        //                 }
        //        }
        //        else{
        //            if(vo!=null){
        //                Object[] obj = {userId,colType,salesChannel};
        //                Key key = new Key(obj);
        //                Row[] rows = this.getuserPrefSCVO().findByKey(key, 3);
        //                if(rows!=null && rows.length>0){
        //                    paymentTerms = (String)rows[0].getAttribute("ColumnVal");
        //                        defaultval = (String)rows[0].getAttribute("DefaultVal");
        //                    }
        //                    if(paymentTerms!=null){
        //                            temp = Arrays.asList(paymentTerms.split("\\s*,\\s*"));
        //                            if(temp!=null && temp.size()>0){
        //                                sb.append(temp.get(0));
        //                                for(int i=1;i>temp.size();i++)
        //                                    sb.append("','").append(temp.get(i));
        //                                }
        //                            sb.append(paymentTerms).append("')");
        //                            System.out.println("PaymentTerm values:"+sb.toString());
        //                                 vo.setWhereClause("name in"+sb.toString());
        //                                 vo.executeQuery();
        //                        }
        //
        //                }
        //        }
        //
        //        if(defaultval !=null){
        //        vo.clearCache();
        //        vo.setWhereClause(null);
        //        Row rows[] = vo.getFilteredRows("Name", defaultval);
        //        if(rows!=null && rows.length>0){
        //            defaultPaymentTermVal = (String)rows[0].getAttribute("Description");
        //            }
        //        }
        return (String)getAttributeInternal(PAYMENTTERMS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymentTerms.
     * @param value value to set the  PaymentTerms
     */
    public void setPaymentTerms(String value) {
        setAttributeInternal(PAYMENTTERMS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IncoTerms.
     * @return the IncoTerms
     */
    public String getIncoTerms() {
        //        ViewObject vo = this.getIncoTermVO1().getViewObject();
        //              String salesChannel = (String)getAttributeInternal(SALESCHANNEL);
        //              String colType = "IncoTerm";
        //              String incoTerm = null,defaultval = null;
        //              String defaultCurrencyVal = null;
        //              List<String> temp = null;
        //              String userId = (String)ADFContext.getCurrent().getSessionScope().get("UserId");
        //              StringBuilder sb = new StringBuilder("('");
        //              if(salesChannel ==null){
        //                       if(vo!=null){
        //                           Object[] obj = {userId,colType};
        //                           Key key = new Key(obj);
        //                           Row[] rows = this.getuserPrefEntityVO().findByKey(key, 2);
        //                           if(rows!=null && rows.length>0){
        //                               incoTerm = (String)rows[0].getAttribute("ColumnVal");
        //                               defaultval = (String)rows[0].getAttribute("DefaultVal");
        //                               }
        //                           System.out.println("IncoTerm values is:"+incoTerm);
        //                                       if (incoTerm != null) {
        //                                           temp = Arrays.asList(incoTerm.split("\\s*,\\s*"));
        //                                           sb.append(temp.get(0));
        //                                           for (int i = 1; i < temp.size(); i++) {
        //                                               sb.append("','").append(temp.get(i));
        //                                           }
        //                                           sb.append("')");
        //                                   System.out.println("incoTerm values:"+sb.toString());
        //                                        vo.setWhereClause("meaning in"+sb.toString());
        //                                        vo.executeQuery();
        //                               }
        //
        //                           }
        //                  }
        //              else{
        //                      if(vo!=null){
        //                          Object[] obj = {userId,colType,salesChannel};
        //                          Key key = new Key(obj);
        //                          Row[] rows = this.getuserPrefSCVO().findByKey(key, 3);
        //                          if(rows!=null && rows.length>0){
        //                              incoTerm = (String)rows[0].getAttribute("ColumnVal");
        //                                  defaultval = (String)rows[0].getAttribute("DefaultVal");
        //                              }
        //                              if(incoTerm!=null){
        //                                      temp = Arrays.asList(incoTerm.split("\\s*,\\s*"));
        //                                      if(temp!=null && temp.size()>0){
        //                                          sb.append(temp.get(0));
        //                                          for(int i=1;i>temp.size();i++)
        //                                              sb.append("','").append(temp.get(i));
        //                                          }
        //                                      sb.append(incoTerm).append("')");
        //                                      System.out.println("incoTerm values:"+sb.toString());
        //                                           vo.setWhereClause("meaning in"+sb.toString());
        //                                           vo.executeQuery();
        //                                  }
        //
        //                          }
        //                  }
        //
        //              if(defaultval !=null){
        //              vo.clearCache();
        //              vo.setWhereClause(null);
        //              Row rows[] = vo.getFilteredRows("Meaning", defaultval);
        //                  if(rows!=null && rows.length>0){
        //                      defaultCurrencyVal = (String)rows[0].getAttribute("Description");
        //                      }
        //              }
        return (String)getAttributeInternal(INCOTERMS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IncoTerms.
     * @param value value to set the  IncoTerms
     */
    public void setIncoTerms(String value) {
        setAttributeInternal(INCOTERMS, value);
    }

    //    /**
    //     * Gets the attribute value for the calculated attribute Currency.
    //     * @return the Currency
    //     */
    //    public String getCurrency() {
    //        String currencyMeaning = null;
    //        if (getAttributeInternal(CURRENCYCODE) != null) {
    //            Object[] obj = { getAttributeInternal(CURRENCYCODE)};
    //            Key key = new Key(obj);
    ////            System.out.println("Key Created " + key);
    //            Row[] rows = this.getCurrencyVO().findByKey(key, 1);
    ////            System.out.println("Estimated currency rows " + rows.length);
    //            if (rows != null && rows.length > 0) {
    //                currencyMeaning = (String)rows[0].getAttribute("Name");
    ////                System.out.println("Currency Meaning " + currencyMeaning);
    //            }
    //            return currencyMeaning;
    //        } else
    //            return (String)getAttributeInternal(CURRENCY);
    //    }

    /**
     * Gets the attribute value for the calculated attribute Currency.
     * @return the Currency
     */
    public String getCurrency() {
        //            ViewObject vo = this.getCurrencyVO().getViewObject();
        //        String salesChannel = (String)getAttributeInternal(SALESCHANNEL);
        //        String colType = "Currency";
        //        String currency = null,defaultval = null;
        //        String defaultCurrencyVal = null;
        //        List<String> temp = null;
        //        Row fRow[] = null;
        //        String userId = (String)ADFContext.getCurrent().getSessionScope().get("UserId");
        //        StringBuilder sb = new StringBuilder("('");
        //        if(salesChannel ==null){
        //                 if(vo!=null){
        //                     Object[] obj = {userId,colType};
        //                     Key key = new Key(obj);
        //                     Row[] rows = this.getuserPrefEntityVO().findByKey(key, 2);
        //                     if(rows!=null && rows.length>0){
        //                         currency = (String)rows[0].getAttribute("ColumnVal");
        //                         defaultval = (String)rows[0].getAttribute("DefaultVal");
        //                         }
        //                     System.out.println("currency values is:"+currency);
        //                     if(defaultval!=null){    //vo.getFilteredRows("CurrencyCode",defaultval);
        //                         vo.clearCache();
        //                         vo.setWhereClause(null);
        //                  fRow = vo.getFilteredRows("CurrencyCode", defaultval);
        //                  if(fRow!=null && fRow.length>0)
        //                         defaultCurrencyVal = (String)fRow[0].getAttribute("Name");
        //                     }
        //                                 if (currency != null) {
        //                                     temp = Arrays.asList(currency.split("\\s*,\\s*"));
        //                                     sb.append(temp.get(0));
        //                                     for (int i = 1; i < temp.size(); i++) {
        //                                         sb.append("','").append(temp.get(i));
        //                                     }
        //                                     sb.append("')");
        //                         }
        //                         System.out.println("currency List :values:"+sb.toString());
        //                         vo.clearCache();
        //                         vo.setWhereClause("currency_code in"+sb.toString());
        //                         vo.executeQuery();
        //                     }
        //            }
        //        else{
        //                if(vo!=null){
        //                    Object[] obj = {userId,colType,salesChannel};
        //                    Key key = new Key(obj);
        //                    Row[] rows = this.getuserPrefSCVO().findByKey(key, 3);
        //                    if(rows!=null && rows.length>0){
        //                        currency = (String)rows[0].getAttribute("ColumnVal");
        //                            defaultval = (String)rows[0].getAttribute("DefaultVal");
        //                        }
        //                        if(currency!=null){
        //                                temp = Arrays.asList(currency.split("\\s*,\\s*"));
        //                                if(temp!=null && temp.size()>0){
        //                                    sb.append(temp.get(0));
        //                                    for(int i=1;i>temp.size();i++)
        //                                        sb.append("','").append(temp.get(i));
        //                                    }
        //                                sb.append(currency).append("')");
        //                                System.out.println("orgList values:"+sb.toString());
        //                                     vo.setWhereClause("currency_code in"+sb.toString());
        //                                     vo.executeQuery();
        //                            }
        //
        //                    }
        //            }
        //        if(defaultval !=null){
        //            return defaultCurrencyVal;
        //        }
        //        else
        return (String)getAttributeInternal(CURRENCY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Currency.
     * @param value value to set the  Currency
     */
    public void setCurrency(String value) {
        setAttributeInternal(CURRENCY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute QuoteTo.
     * @return the QuoteTo
     */
    public String getQuoteTo() {
        return (String)getAttributeInternal(QUOTETO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute QuoteTo.
     * @param value value to set the  QuoteTo
     */
    public void setQuoteTo(String value) {
        setAttributeInternal(QUOTETO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ShipTo.
     * @return the ShipTo
     */
    public String getShipTo() {
        return (String)getAttributeInternal(SHIPTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ShipTo.
     * @param value value to set the  ShipTo
     */
    public void setShipTo(String value) {
        setAttributeInternal(SHIPTO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PartyId.
     * @return the PartyId
     */
    public BigDecimal getPartyId() {
        return (BigDecimal)getAttributeInternal(PARTYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PartyId.
     * @param value value to set the  PartyId
     */
    public void setPartyId(BigDecimal value) {
        setAttributeInternal(PARTYID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SalesContactName.
     * @return the SalesContactName
     */
    public String getSalesContactName() {
        return (String)getAttributeInternal(SALESCONTACTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SalesContactName.
     * @param value value to set the  SalesContactName
     */
    public void setSalesContactName(String value) {
        setAttributeInternal(SALESCONTACTNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SalesPhoneNum.
     * @return the SalesPhoneNum
     */
    public String getSalesPhoneNum() {
        return (String)getAttributeInternal(SALESPHONENUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SalesPhoneNum.
     * @param value value to set the  SalesPhoneNum
     */
    public void setSalesPhoneNum(String value) {
        setAttributeInternal(SALESPHONENUM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SalesFaxNum.
     * @return the SalesFaxNum
     */
    public String getSalesFaxNum() {
        return (String)getAttributeInternal(SALESFAXNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SalesFaxNum.
     * @param value value to set the  SalesFaxNum
     */
    public void setSalesFaxNum(String value) {
        setAttributeInternal(SALESFAXNUM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SalesEmail.
     * @return the SalesEmail
     */
    public String getSalesEmail() {
        return (String)getAttributeInternal(SALESEMAIL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SalesEmail.
     * @param value value to set the  SalesEmail
     */
    public void setSalesEmail(String value) {
        setAttributeInternal(SALESEMAIL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustomerContactName.
     * @return the CustomerContactName
     */
    public String getCustomerContactName() {
        return (String)getAttributeInternal(CUSTOMERCONTACTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustomerContactName.
     * @param value value to set the  CustomerContactName
     */
    public void setCustomerContactName(String value) {
        setAttributeInternal(CUSTOMERCONTACTNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustomerPhoneNum.
     * @return the CustomerPhoneNum
     */
    public String getCustomerPhoneNum() {
        return (String)getAttributeInternal(CUSTOMERPHONENUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustomerPhoneNum.
     * @param value value to set the  CustomerPhoneNum
     */
    public void setCustomerPhoneNum(String value) {
        setAttributeInternal(CUSTOMERPHONENUM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustomerFaxNum.
     * @return the CustomerFaxNum
     */
    public String getCustomerFaxNum() {
        return (String)getAttributeInternal(CUSTOMERFAXNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustomerFaxNum.
     * @param value value to set the  CustomerFaxNum
     */
    public void setCustomerFaxNum(String value) {
        setAttributeInternal(CUSTOMERFAXNUM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustomerEmail.
     * @return the CustomerEmail
     */
    public String getCustomerEmail() {
        return (String)getAttributeInternal(CUSTOMEREMAIL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustomerEmail.
     * @param value value to set the  CustomerEmail
     */
    public void setCustomerEmail(String value) {
        setAttributeInternal(CUSTOMEREMAIL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Customerparentid.
     * @return the Customerparentid
     */
    public BigDecimal getCustomerparentid() {
        return (BigDecimal)getAttributeInternal(CUSTOMERPARENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Customerparentid.
     * @param value value to set the  Customerparentid
     */
    public void setCustomerparentid(BigDecimal value) {
        setAttributeInternal(CUSTOMERPARENTID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AttentionToOrDept.
     * @return the AttentionToOrDept
     */
    public String getAttentionToOrDept() {
        return (String)getAttributeInternal(ATTENTIONTOORDEPT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AttentionToOrDept.
     * @param value value to set the  AttentionToOrDept
     */
    public void setAttentionToOrDept(String value) {
        setAttributeInternal(ATTENTIONTOORDEPT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute QuoteEmail.
     * @return the QuoteEmail
     */
    public String getQuoteEmail() {
        return (String)getAttributeInternal(QUOTEEMAIL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute QuoteEmail.
     * @param value value to set the  QuoteEmail
     */
    public void setQuoteEmail(String value) {
        setAttributeInternal(QUOTEEMAIL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public BigDecimal getOrgId() {
        return (BigDecimal)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(BigDecimal value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PriceList.
     * @return the PriceList
     */
    public String getPriceList() {
        return (String)getAttributeInternal(PRICELIST);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PriceList.
     * @param value value to set the  PriceList
     */
    public void setPriceList(String value) {
        setAttributeInternal(PRICELIST, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustAccid.
     * @return the CustAccid
     */
    public String getCustAccid() {
        return (String)getAttributeInternal(CUSTACCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustAccid.
     * @param value value to set the  CustAccid
     */
    public void setCustAccid(String value) {
        setAttributeInternal(CUSTACCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BusinessAgreement.
     * @return the BusinessAgreement
     */
    public String getBusinessAgreement() {

        return (String)getAttributeInternal(BUSINESSAGREEMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BusinessAgreement.
     * @param value value to set the  BusinessAgreement
     */
    public void setBusinessAgreement(String value) {
        setAttributeInternal(BUSINESSAGREEMENT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BusinessAgreementId.
     * @return the BusinessAgreementId
     */
    public String getBusinessAgreementId() {
        //        String agrimentId = null;
        //        if (getAttributeInternal(BUSINESSAGREEMENT) != null) {
        //            Object[] obj = { getAttributeInternal(BUSINESSAGREEMENT) };
        //            Key key = new Key(obj);
        //        //            System.out.println("Key Created " + key);
        //            Row[] rows = this.getCurrencyVO().findByKey(key, 1);
        //        //            System.out.println("Estimated currency rows " + rows.length);
        //            if (rows != null && rows.length > 0) {
        //                agrimentId = (String)rows[0].getAttribute("AgreementId");
        //        //                System.out.println("Currency Meaning " + currencyMeaning);
        //            }
        //            return agrimentId;
        //        } else
        return (String)getAttributeInternal(BUSINESSAGREEMENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BusinessAgreementId.
     * @param value value to set the  BusinessAgreementId
     */
    public void setBusinessAgreementId(String value) {
        setAttributeInternal(BUSINESSAGREEMENTID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Discount.
     * @return the Discount
     */
    public String getDiscount() {
        return (String)getAttributeInternal(DISCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Discount.
     * @param value value to set the  Discount
     */
    public void setDiscount(String value) {
        setAttributeInternal(DISCOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SalesRepName.
     * @return the SalesRepName
     */
    public String getSalesRepName() {
        return (String)getAttributeInternal(SALESREPNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SalesRepName.
     * @param value value to set the  SalesRepName
     */
    public void setSalesRepName(String value) {
        setAttributeInternal(SALESREPNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CurrencyCode.
     * @return the CurrencyCode
     */
    public String getCurrencyCode() {
        return (String)getAttributeInternal(CURRENCYCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CurrencyCode.
     * @param value value to set the  CurrencyCode
     */
    public void setCurrencyCode(String value) {
        setAttributeInternal(CURRENCYCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IncoTermsMeaning.
     * @return the IncoTermsMeaning
     */
    public String getIncoTermsMeaning() {
        return (String)getAttributeInternal(INCOTERMSMEANING);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IncoTermsMeaning.
     * @param value value to set the  IncoTermsMeaning
     */
    public void setIncoTermsMeaning(String value) {
        setAttributeInternal(INCOTERMSMEANING, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymentTermsMean.
     * @return the PaymentTermsMean
     */
    public String getPaymentTermsMean() {
        return (String)getAttributeInternal(PAYMENTTERMSMEAN);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymentTermsMean.
     * @param value value to set the  PaymentTermsMean
     */
    public void setPaymentTermsMean(String value) {
        setAttributeInternal(PAYMENTTERMSMEAN, value);
    }


    /**
     * Gets the attribute value for the calculated attribute SalesChCode.
     * @return the SalesChCode
     */
    public String getSalesChCode() {
        return (String)getAttributeInternal(SALESCHCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SalesChCode.
     * @param value value to set the  SalesChCode
     */
    public void setSalesChCode(String value) {
        setAttributeInternal(SALESCHCODE, value);
    }


    /**
     * Gets the attribute value for the calculated attribute CustPhoneFax.
     * @return the CustPhoneFax
     */
    public String getCustPhoneFax() {
        return (String)getAttributeInternal(CUSTPHONEFAX);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustPhoneFax.
     * @param value value to set the  CustPhoneFax
     */
    public void setCustPhoneFax(String value) {
        setAttributeInternal(CUSTPHONEFAX, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PrdNumRefConfig.
     * @return the PrdNumRefConfig
     */
    public String getPrdNumRefConfig() {
        return (String)getAttributeInternal(PRDNUMREFCONFIG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PrdNumRefConfig.
     * @param value value to set the  PrdNumRefConfig
     */
    public void setPrdNumRefConfig(String value) {
        setAttributeInternal(PRDNUMREFCONFIG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PrdNumTargetConfig.
     * @return the PrdNumTargetConfig
     */
    public String getPrdNumTargetConfig() {
        return (String)getAttributeInternal(PRDNUMTARGETCONFIG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PrdNumTargetConfig.
     * @param value value to set the  PrdNumTargetConfig
     */
    public void setPrdNumTargetConfig(String value) {
        setAttributeInternal(PRDNUMTARGETCONFIG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RefPriceRegConfig.
     * @return the RefPriceRegConfig
     */
    public String getRefPriceRegConfig() {

        return (String)getAttributeInternal(REFPRICEREGCONFIG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RefPriceRegConfig.
     * @param value value to set the  RefPriceRegConfig
     */
    public void setRefPriceRegConfig(String value) {
        setAttributeInternal(REFPRICEREGCONFIG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RefPriceTargetConfig.
     * @return the RefPriceTargetConfig
     */
    public String getRefPriceTargetConfig() {
        return (String)getAttributeInternal(REFPRICETARGETCONFIG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RefPriceTargetConfig.
     * @param value value to set the  RefPriceTargetConfig
     */
    public void setRefPriceTargetConfig(String value) {
        setAttributeInternal(REFPRICETARGETCONFIG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute NumberFormat.
     * @return the NumberFormat
     */
    public String getNumberFormat() {
        return (String)getAttributeInternal(NUMBERFORMAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute NumberFormat.
     * @param value value to set the  NumberFormat
     */
    public void setNumberFormat(String value) {
        setAttributeInternal(NUMBERFORMAT, value);
    }


    /**
     * Gets the attribute value for the calculated attribute CurrencyForSC.
     * @return the CurrencyForSC
     */
    public String getCurrencyForSC() {
        return (String)getAttributeInternal(CURRENCYFORSC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CurrencyForSC.
     * @param value value to set the  CurrencyForSC
     */
    public void setCurrencyForSC(String value) {
        setAttributeInternal(CURRENCYFORSC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IncoTermForSC.
     * @return the IncoTermForSC
     */
    public String getIncoTermForSC() {
        return (String)getAttributeInternal(INCOTERMFORSC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IncoTermForSC.
     * @param value value to set the  IncoTermForSC
     */
    public void setIncoTermForSC(String value) {
        setAttributeInternal(INCOTERMFORSC, value);
    }


    /**
     * Gets the attribute value for the calculated attribute CustomerNameForSC.
     * @return the CustomerNameForSC
     */
    public String getCustomerNameForSC() {
        return (String)getAttributeInternal(CUSTOMERNAMEFORSC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustomerNameForSC.
     * @param value value to set the  CustomerNameForSC
     */
    public void setCustomerNameForSC(String value) {
        setAttributeInternal(CUSTOMERNAMEFORSC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustNum.
     * @return the CustNum
     */
    public String getCustNum() {
        return (String)getAttributeInternal(CUSTNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustNum.
     * @param value value to set the  CustNum
     */
    public void setCustNum(String value) {
        setAttributeInternal(CUSTNUM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustName.
     * @return the CustName
     */
    public String getCustName() {
        return (String)getAttributeInternal(CUSTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustName.
     * @param value value to set the  CustName
     */
    public void setCustName(String value) {
        setAttributeInternal(CUSTNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OperatingUnit.
     * @return the OperatingUnit
     */
    public String getOperatingUnit() {
        return (String)getAttributeInternal(OPERATINGUNIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OperatingUnit.
     * @param value value to set the  OperatingUnit
     */
    public void setOperatingUnit(String value) {
        setAttributeInternal(OPERATINGUNIT, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> OUVO.
     */
    public RowSet getOUVO() {
        return (RowSet)getAttributeInternal(OUVO);
    }


    /**
     * Gets the view accessor <code>RowSet</code> OrderTypeVO.
     */
    public RowSet getOrderTypeVO() {
        //        RowSet iter = getOrderTyepVOSet();
        //        if(iter!=null && iter.getEstimatedRowCount()>0)
        //            return iter;
        //        else
        return (RowSet)getAttributeInternal(ORDERTYPEVO);
    }


    /**
     * Gets the view accessor <code>RowSet</code> SalesChannelVO.
     */
    public RowSet getSalesChannelVO() {
        return (RowSet)getAttributeInternal(SALESCHANNELVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> SalesRepresentativeVO.
     */
    public RowSet getSalesRepresentativeVO() {
        return (RowSet)getAttributeInternal(SALESREPRESENTATIVEVO);
    }


    /**
     * Gets the view accessor <code>RowSet</code> CustomerSupportRepresentVO.
     */
    public RowSet getCustomerSupportRepresentVO() {
        return (RowSet)getAttributeInternal(CUSTOMERSUPPORTREPRESENTVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> IncoTermVO1.
     */
    public RowSet getIncoTermVO1() {
        return (RowSet)getAttributeInternal(INCOTERMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> NodeCategoryVO.
     */
    public RowSet getNodeCategoryVO() {
        return (RowSet)getAttributeInternal(NODECATEGORYVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> PaymentTermsVO.
     */
    public RowSet getPaymentTermsVO() {
        return (RowSet)getAttributeInternal(PAYMENTTERMSVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> PrimarySalesPersonVO.
     */
    public RowSet getPrimarySalesPersonVO() {
        return (RowSet)getAttributeInternal(PRIMARYSALESPERSONVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> QuotesVO.
     */
    public RowSet getQuotesVO() {
        return (RowSet)getAttributeInternal(QUOTESVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> CurrencyVO.
     */
    public RowSet getCurrencyVO() {
        return (RowSet)getAttributeInternal(CURRENCYVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> PriceListVO.
     */
    public RowSet getPriceListVO() {
        return (RowSet)getAttributeInternal(PRICELISTVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> businessAgreementVo.
     */
    public RowSet getbusinessAgreementVo() {
        return (RowSet)getAttributeInternal(BUSINESSAGREEMENTVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> userPrefEntityVO.
     */
    public RowSet getuserPrefEntityVO() {
        return (RowSet)getAttributeInternal(USERPREFENTITYVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> NumberFormatViewVA.
     */
    public RowSet getNumberFormatViewVA() {
        return (RowSet)getAttributeInternal(NUMBERFORMATVIEWVA);
    }

    /**
     * Gets the view accessor <code>RowSet</code> YesNoLOVVA.
     */
    public RowSet getYesNoLOVVA() {
        return (RowSet)getAttributeInternal(YESNOLOVVA);
    }

    /**
     * Gets the view accessor <code>RowSet</code> CustNameVO.
     */
    public RowSet getCustNameVO() {
        return (RowSet)getAttributeInternal(CUSTNAMEVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> userPrefSCVO.
     */
    public RowSet getuserPrefSCVO() {
        return (RowSet)getAttributeInternal(USERPREFSCVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> CustomerNameVO1.
     */
    public RowSet getCustomerNameVO1() {
        return (RowSet)getAttributeInternal(CUSTOMERNAMEVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
