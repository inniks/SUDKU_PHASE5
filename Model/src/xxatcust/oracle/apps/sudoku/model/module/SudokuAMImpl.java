package xxatcust.oracle.apps.sudoku.model.module;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;

import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.apps.fnd.ext.common.AppsRequestWrapper;
import oracle.apps.fnd.ext.common.CookieStatus;
import oracle.apps.fnd.ext.common.EBiz;
import oracle.apps.fnd.ext.common.Session;

import oracle.jbo.AttributeDef;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.SessionData;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewObjectImpl;

import xxatcust.oracle.apps.sudoku.model.module.common.SudokuAM;
import xxatcust.oracle.apps.sudoku.model.readonlyvo.CFDReportVOImpl;
import xxatcust.oracle.apps.sudoku.model.readonlyvo.RuleSetVORowImpl;
import xxatcust.oracle.apps.sudoku.model.readonlyvo.XXATGlobalDirRVOImpl;
import xxatcust.oracle.apps.sudoku.model.util.SudokuUtils;


//import xxatcust.oracle.apps.sudoku.model.readonlyvo.QuotesVOImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 24 16:53:17 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SudokuAMImpl extends ApplicationModuleImpl implements SudokuAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SudokuAMImpl() {
    }
    static String url = null;
    private static ADFLogger _logger =
        ADFLogger.createADFLogger(SudokuAMImpl.class);
    AppsRequestWrapper wrappedRequest = null;
    HttpServletRequest request;
    Session appsSession = null;


    public Session getAppsSession() {
        return appsSession;
    }

    public String getCurrentUrl() {

        String currentUrlName = "";
        DBTransaction trans = getDBTransaction();
        Statement statement = null;
        ResultSet rows = null;
        String plsql =
            "select replace(HOME_URL,'AppsLogin') home_url from icx_parameters";

        statement = trans.createStatement(2);
        try {
            rows = statement.executeQuery(plsql);
            while (rows.next()) {
                currentUrlName = rows.getString("home_url");
            }
        } catch (Exception obj) {
            obj.printStackTrace();
        } finally {
            try {
                if (rows != null) {
                    rows.close();
                }
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
        return currentUrlName;

    }

    public String getPath() {

        ViewObjectImpl vo = getXXATGlobalDirRVO1();

        Row row = vo.first();

        String path = row.getAttribute("Description").toString();

        return path;


    }
    public int callDUTReport(String confighid, String configrevno,
                             String orderhid, String quoteno, String ponum,
                             int respId, int usrId) {
        CallableStatement cs = null;
        String stmt = "XXAT_DUT_REP(:1,:2,:3,:4,:5,:6,:7,:8)";
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        int reqid = 0;
        try {

            cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);


            cs.setString(1, confighid);
            cs.setString(2, configrevno);
            cs.setString(3, orderhid);
            cs.setString(4, quoteno);
            cs.setString(5, ponum);
            cs.setInt(6, respId);
            cs.setInt(7, usrId);
            cs.registerOutParameter(8, Types.INTEGER);
            System.out.println("print before execute the procedure");


            cs.executeUpdate();
            reqid = cs.getInt(8);

            System.out.println("print after execute the procedure");

            System.out.println("print reqid" + reqid);
        } catch (Exception e) {
            errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
            System.out.println("print error found in package execution" +
                               e.getMessage());
            //                e.printStackTrace();
        } finally {
            try {
                if (cs != null)
                    cs.close();
            } catch (SQLException s) {
                errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                //                    s.printStackTrace();
                System.out.println("print error found in package execution1" +
                                   s.getMessage());
            }
        }

        return reqid;
    }

    public String callMOFReport(String confighid, String configrevno,
                                String orderhid, String quoteno,
                                String ponum) {
        CallableStatement cs = null;
        String stmt =
            "XXAT_ASO_QUOTE_PKG.XXAT_MOF_REPORT_PRINT(:1,:2,:3,:4,:5,:6)";
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String output = null;
        try {

            cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);


            cs.setString(1, confighid);
            cs.setString(2, configrevno);
            cs.setString(3, orderhid);
            cs.setString(4, quoteno);
            cs.setString(5, ponum);
            //            cs.setInt(6, respId);
            //            cs.setInt(7, usrId);
            cs.registerOutParameter(6, Types.VARCHAR);
            System.out.println("print before execute the procedure");


            cs.executeUpdate();
            output = cs.getString(6);

            System.out.println("print after execute the procedure");

            System.out.println("print output" + output);
        } catch (Exception e) {
            errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
            System.out.println("print error found in package execution" +
                               e.getMessage());
            //                e.printStackTrace();
        } finally {
            try {
                if (cs != null)
                    cs.close();
            } catch (SQLException s) {
                errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                //                    s.printStackTrace();
                System.out.println("print error found in package execution1" +
                                   s.getMessage());
            }
        }

        return output;
    }

    public String callCFDReport(String quoteNum, int respId, int usrId) {

        CallableStatement cs = null;
        String returnval = null;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String reqstid = "";
        String returnStatus = "";
        String stmt = "   XXAT_CFD_REPT(:1,:2,:3,:4)";
        try {
            cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);
            if (quoteNum != null) {
                quoteNum = quoteNum.trim();
                cs.setString(1, quoteNum);
            } else
                errorMsg.append("<p><b> Quote Number is Missing.</b></p>");


            cs.setInt(2, respId);
            cs.setInt(3, usrId);
            cs.registerOutParameter(4, Types.VARCHAR);


            errorMsg.append("</body></html>");
            cs.executeUpdate();
            reqstid = cs.getString(4);
            //  String output =cs.getString(5);
            System.out.println("print req id" + reqstid);
            //            if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
            //                cs.executeUpdate();
            //                returnStatus = cs.getString(5);
            //                returnMessage = cs.getString(6);
            //            }
        } catch (Exception e) {
            errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
            //                e.printStackTrace();
        } finally {
            try {
                if (cs != null)
                    cs.close();
            } catch (SQLException s) {
                errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                //                    s.printStackTrace();
            }
        }

        return reqstid;
    }

    public String getWrappedRequestAgent() {
        String agent = wrappedRequest.getEbizInstance().getAppsServletAgent();
        return agent;
    }

    private Connection getCurrentConnection() {
        Statement st = null;
        try {
            st = this.getDBTransaction().createStatement(0);
            return st.getConnection();
        } catch (SQLException s) {
            s.printStackTrace();
            return null;
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException s2) {
                    _logger.info("HSOEOrderStatusAMImpl : getCurrentConnection-3 : 11111");
                    ;
                }
            }
        }
    }

    private String getApplServerId() {
        ServletContext servContext =
            (ServletContext)ADFContext.getCurrent().getEnvironment().getContext();
        String applServerId = servContext.getInitParameter("APPL_SERVER_ID");

        return applServerId;
    }


    public boolean checkEBSSession(HttpServletRequest request,
                                   HttpServletResponse response) {
        try {

            CookieStatus icxCookieStatus = null;
            Connection EBSconn = this.getCurrentConnection();
            EBiz instance = new EBiz(EBSconn, this.getApplServerId());
            _logger.info("Bundle AMimp: print ApplServerId " +
                         this.getApplServerId());
            _logger.info("Bundle AMimp: print instance " + instance);
            wrappedRequest =
                    new AppsRequestWrapper(request, response, EBSconn, instance);
            appsSession = wrappedRequest.getAppsSession();
            _logger.info("Bundle AMimp: print appsSession " + appsSession);

            icxCookieStatus =
                    appsSession.getCurrentState().getIcxCookieStatus();
            _logger.info("Bundle AMimp: print icxCookieStatus " +
                         icxCookieStatus);
            response.addHeader("X-UA-Compatible", "IE=EmulateIE9");

            if (!icxCookieStatus.equals(CookieStatus.VALID)) {
                return false;
            }
        } catch (Exception ob) {
            ob.printStackTrace();
            return false;
        }

        return true;
    }

    public Hashtable<String, String> getNodeCategoryMap() {
        ViewObjectImpl nodeCategoryVO = this.getNodeCategoryVO1();
        nodeCategoryVO.executeQuery();
        RowSetIterator rsi = nodeCategoryVO.createRowSetIterator(null);
        Hashtable<String, String> nodeCategoryMap =
            new Hashtable<String, String>();
        while (rsi.hasNext()) {
            Row currRow = rsi.getCurrentRow();
            if (currRow != null && currRow.getAttribute("Segment1") != null &&
                currRow.getAttribute("Attribute7") != null) {
                nodeCategoryMap.put((String)currRow.getAttribute("Segment1"),
                                    (String)currRow.getAttribute("Attribute7"));
            }
        }
        rsi.closeRowSetIterator();
        return nodeCategoryMap;
    }

    //    public void callGlobalpackage(){
    //        CallableStatement  cs = getDBTransaction().createCallableStatement("fnd_global.set_nls_context('AMERICAN')", 0);
    //
    //        if(cs !=null){
    //            try {
    //                cs.execute();
    //            } catch (SQLException e) {
    //                e.printStackTrace();
    //            }
    //            finally{
    //                if(cs!=null){
    //                    try{
    //                    cs.close();
    //                    }
    //                    catch(Exception e){
    //                        e.printStackTrace();
    //                        }
    //                    }
    //                }
    //        }
    //
    //
    //        }

    String query = "SELECT hca.cust_account_id,\n" +
        "  hca.account_number,\n" +
        "  hz.party_id,\n" +
        "  hz.party_name,\n" +
        "  hz_format_pub.format_address(hl.location_id, NULL, NULL, ', ', NULL, NULL,NULL, NULL) AS cur_address\n" +
        "FROM hz_parties hz,\n" +
        "  hz_party_sites ps,\n" +
        "  hz_party_site_uses psu,\n" +
        "  hz_cust_accounts_all hca,\n" +
        "  hz_locations hl,\n" +
        "  ar_lookups al\n" +
        "WHERE hca.account_number = ? --IN('100595', '97369', '154409' ,'10136')\n" +
        "AND hca.party_id          = hz.party_id\n" +
        "AND hz.party_id           = ps.party_id\n" +
        "AND psu.party_site_id     = ps.party_site_id\n" +
        "AND psu.status            = 'A'\n" +
        "AND al.lookup_type        = 'PARTY_SITE_USE_CODE'\n" +
        "AND al.lookup_code        = psu.SITE_USE_TYPE\n" +
        "AND psu.site_use_type     = ? --use 'BILL_TO' to get bill to address\n" +
        "AND psu.primary_per_type  = 'Y'\n" +
        "AND ps.location_id        = hl.location_id";


    //    String query = "SELECT \n" +
    //        "  hzsu.site_use_id   SITE_USE_ID,\n" +
    //        "  hzl.address1||DECODE(hzl.address2,\n" +
    //        "  NULL,\n" +
    //        "  NULL,\n" +
    //        "  ',\n" +
    //        "  '||hzl.address2)||',\n" +
    //        "  '||hzl.city||',\n" +
    //        "  '||hzl.STATE||',\n" +
    //        "  '||hzl.postal_code LOCATION,\n" +
    //        "  hzp.party_id,\n" +
    //        "  hzp.PARTY_NAME\n" +
    //        "FROM \n" +
    //        "  hz_parties hzp,\n" +
    //        "  hz_cust_accounts hza,\n" +
    //        "  hz_cust_acct_sites_all hzas,\n" +
    //        "  hz_cust_site_uses_all hzsu,\n" +
    //        "  hz_party_sites hzps,\n" +
    //        "  hz_locations hzl\n" +
    //        "WHERE \n" +
    //        "hzp.party_id = ?    and\n" +
    //        "  hza.party_id = hzp.party_id      AND\n" +
    //        "  hzas.cust_account_id = hza.cust_account_id      --AND\n" +
    //        "  and hzps.party_site_id = hzas.party_site_id      AND\n" +
    //        "  hzl.location_id = hzps.location_id      AND\n" +
    //        "  hzsu.site_use_code = ?      AND\n" +
    //        "  hzsu.PRIMARY_FLAG='Y' AND\n" +
    //        "  hzsu.ORG_ID=? AND\n" +
    //        "  hzsu.cust_acct_site_id = hzas.cust_acct_site_id AND\n" +
    //        "  hzsu.org_id = hzas.org_id\n ";


    public void getQuoteCustmerAddress(Row curRow) {
        String shipTo = "";
        String quoteTo = "";
        String custNumber = null;
        //        BigDecimal orgid = null;
        ViewObjectImpl quoteVO = null;
        Row row = null;
        PreparedStatement cs = null, cs1 = null;
        if (curRow != null) {
            if ((String)curRow.getAttribute("CustomerNumber") != null) {
                custNumber = (String)curRow.getAttribute("CustomerNumber");
                //                orgid = (BigDecimal)curRow.getAttribute("OrgId");
            }
        } else {
            quoteVO = this.getQuotesVO();
            if (quoteVO != null) {
                row = quoteVO.getCurrentRow();
                if (row != null) {
                    custNumber = (String)row.getAttribute("CustomerNumber");
                    //                    orgid = (BigDecimal)row.getAttribute("OrgId");
                }
            }
        }
        try {
            cs = this.getDBTransaction().createPreparedStatement(query, 0);
            cs.setString(1, custNumber);
            cs.setString(2, "BILL_TO");

            //            cs.setBigDecimal(3, orgid);

            ResultSet rs = cs.executeQuery();
            while (rs.next()) {

                quoteTo = rs.getString(5);
                //                System.out.println("quoteTo is:" + quoteTo);
            }
            cs1 = this.getDBTransaction().createPreparedStatement(query, 0);
            cs1.setString(1, custNumber);
            cs1.setString(2, "SHIP_TO");
            //            cs1.setBigDecimal(3, orgid);
            ResultSet rs1 = cs1.executeQuery();
            while (rs1.next()) {
                shipTo = rs1.getString(5);
                //                System.out.println("ShipTo is:" + shipTo);
            }
            if (curRow != null) {
                curRow.setAttribute("QuoteTo", quoteTo);
                curRow.setAttribute("ShipTo", shipTo);
                //                System.out.println("QuoteTo:" + quoteTo + ":shipto:" + shipTo);
            }
            if (row != null) {
                row.setAttribute("QuoteTo", quoteTo);
                row.setAttribute("ShipTo", shipTo);
                //                System.out.println("QuoteTo:" + quoteTo + ":shipto:" + shipTo);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public String callQuoteAPI(int respid, int usrId) {
        ViewObjectImpl quoteVO = this.getQuotesVO();
        String returnval = null;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String returnMessage = "";
        String returnConfrmMsg = "";
        //        callGlobalpackage();
        //        DBTransaction dbTrans = (DBTransaction)this.getTransaction();
        if (quoteVO != null) {
            Row quoteVORow = quoteVO.getCurrentRow();
            if (quoteVORow != null) {
                CallableStatement cs = null;
                String stmt =
                    "apps.XXAT_ASO_QUOTE_PKG.create_quote_hdr(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18,:19,:20,:21,:22)";

                try {
                    //            cs = dbTrans.createCallableStatement(("BEGIN xxat_quote_create_pkg.create_quote_hdr(?,?,?,?,?,?,?,?,?,?,?,?"+
                    //                                                                             ");" + "END;"), 12);


                    cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);

                    if (quoteVORow.getAttribute("OrganizationUnit") != null) {
                        cs.setString(1,
                                     quoteVORow.getAttribute("OrganizationUnit").toString());
                        //                        System.out.println("OrganizationUnit:" +
                        //                                           quoteVORow.getAttribute("OrganizationUnit").toString());
                    } else {
                        errorMsg.append("<p><b>Organization Unit is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("QuoteDescription") != null) {
                        cs.setString(2,
                                     quoteVORow.getAttribute("QuoteDescription").toString());
                        //                        System.out.println("QuoteDescription:" +
                        //                                           quoteVORow.getAttribute("QuoteDescription").toString());
                    } else {
                        String custName =
                            (String)quoteVORow.getAttribute("CustomerName");
                        cs.setString(2, "Quote For " + custName);
                        //                        System.out.println("QuoteDescription:" + "Quote For " +
                        //                                           custName);
                        quoteVORow.setAttribute("QuoteDescription",
                                                "Quote For " + custName);
                        //                        errorMsg.append("<p><b>Quote Description is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("CustomerNumber") != null) {
                        cs.setString(3,
                                     quoteVORow.getAttribute("CustomerNumber").toString());
                        //                        System.out.println("CustomerNumber:" +
                        //                                           quoteVORow.getAttribute("CustomerNumber").toString());
                    } else {
                        errorMsg.append("<p><b>Customer Number is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("OrderType") != null) {
                        cs.setString(4,
                                     quoteVORow.getAttribute("OrderType").toString());
                        //                        System.out.println("OrderType:" +
                        //                                           quoteVORow.getAttribute("OrderType").toString());
                    } else {
                        errorMsg.append("<p><b>Order Type is required.</b></p>");
                    }
                    //                if(quoteVORow.getAttribute("OrganizationUnit")!=null)
                    if (quoteVORow.getAttribute("PriceList") != null) {
                        cs.setString(5, "Systems Corporate Price List");
                        //                        System.out.println("Price List:" +
                        //                                           "Systems Corporate Price List");
                    } else {
                        errorMsg.append("<p><b> Price List is required.</b></p>");
                    }

                    if (quoteVORow.getAttribute("SalesChannel") != null) {
                        cs.setString(6,
                                     quoteVORow.getAttribute("SalesChannel").toString());
                        //                        System.out.println("SalesChannel:" +
                        //                                           quoteVORow.getAttribute("SalesChannel").toString());
                    } else {
                        cs.setString(6, null);
                        //                        errorMsg.append("<p><bSales Channel is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("SalesRepresentative") !=
                        null) {
                        cs.setString(7,
                                     quoteVORow.getAttribute("SalesRepresentative").toString());
                        //                        System.out.println("Sales Representative:" +
                        //                                           quoteVORow.getAttribute("SalesRepresentative").toString());
                    } else {
                        errorMsg.append("<p><b>Sales Representative is required.</b></p>");
                    }
                    //                    System.out.println("Payment Terms " +
                    //                                       quoteVORow.getAttribute("PaymentTerms"));
                    if (quoteVORow.getAttribute("PaymentTermsMean") != null) {
                        cs.setString(8,
                                     quoteVORow.getAttribute("PaymentTermsMean").toString());
                        //                        System.out.println("PaymentTerms:" +
                        //                                           quoteVORow.getAttribute("PaymentTermsMean").toString());
                    } else {
                        errorMsg.append("<p><b>Payment Terms is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("CurrencyCode") != null) {
                        cs.setString(9,
                                     quoteVORow.getAttribute("CurrencyCode").toString());
                        //                        System.out.println("Currency:" +
                        //                                           quoteVORow.getAttribute("CurrencyCode").toString());
                    } else {
                        errorMsg.append("<p><b>Currency is required.</b></p>");
                    }

                    if (quoteVORow.getAttribute("IncoTermsMeaning") != null) {
                        cs.setString(10,
                                     quoteVORow.getAttribute("IncoTermsMeaning").toString());
                        //                        System.out.println("IncoTerms:" +
                        //                                           quoteVORow.getAttribute("IncoTermsMeaning").toString());
                    } else {
                        errorMsg.append("<p><b>Inco Terms is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("CustomerSupportRepresent") !=
                        null) {
                        cs.setString(11,
                                     quoteVORow.getAttribute("CustomerSupportRepresent").toString());
                        //                        System.out.println("CustomerSupportRepresent:" +
                        //                                           quoteVORow.getAttribute("CustomerSupportRepresent").toString());
                    } else {
                        cs.setString(11, null);
                        //                        errorMsg.append("<p><b>Organization Unit is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("DealId") != null) {
                        cs.setString(12,
                                     quoteVORow.getAttribute("DealId").toString());
                    } else {
                        cs.setString(12, null);
                        //                        errorMsg.append("<p><b>Deal Id is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("AttentionToOrDept") != null) {
                        cs.setString(13,
                                     quoteVORow.getAttribute("AttentionToOrDept").toString());
                    } else {
                        cs.setString(13, null);
                        //                        errorMsg.append("<p><b>AttentionTo/Dept is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("QuoteEmail") != null) {
                        cs.setString(14,
                                     quoteVORow.getAttribute("QuoteEmail").toString());
                    } else {
                        cs.setString(14, null);
                        //                        errorMsg.append("<p><b>Email is required.</b></p>");
                    }
                    cs.setInt(15, respid);
                    cs.setInt(16, usrId);
                    if (quoteVORow.getAttribute("BusinessAgreementId") !=
                        null) {
                        cs.setString(17,
                                     quoteVORow.getAttribute("BusinessAgreementId").toString());
                        //                        System.out.println("CustAccId : " +
                        //                                           quoteVORow.getAttribute("CustAccid"));
                        //                        System.out.println("BusinessAgreement : " +
                        //                                           quoteVORow.getAttribute("BusinessAgreementId"));
                    } else {
                        cs.setString(17, null);
                    }
                    if (quoteVORow.getAttribute("Systemid") != null) {
                        cs.setString(18,
                                     quoteVORow.getAttribute("Systemid").toString());
                    } else {
                        cs.setString(18, null); //Systemid
                    }

                    //                    if (quoteVORow.getAttribute("Discount") != null) {
                    //                        cs.setString(19,
                    //                                     quoteVORow.getAttribute("Discount").toString());
                    //                    } else {
                    //                        cs.setString(19, null); //Systemid
                    //                    }

                    if (quoteVORow.getAttribute("Page") != null) {
                        cs.setString(19,
                                     quoteVORow.getAttribute("Page").toString());
                    } else {
                        cs.setString(19, null); //Systemid
                    }
                    if (quoteVORow.getAttribute("CustPhoneFax") != null) {
                        cs.setString(20,
                                     quoteVORow.getAttribute("CustPhoneFax").toString());
                    } else
                        cs.setString(20, null); // this is for p_faxphonenum
                    cs.registerOutParameter(21, Types.VARCHAR);
                    cs.registerOutParameter(22, Types.VARCHAR);
                    errorMsg.append("</body></html>");
                    String err = "<html><body></body></html>";
                    if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
                        cs.executeUpdate();
                        returnMessage = cs.getString(22);
                        returnConfrmMsg = cs.getString(21);
                    }
                    if (returnMessage != null &&
                        returnConfrmMsg.contains("S")) {
                        System.out.println("return Message is:" +
                                           returnMessage + " ::msg::");
                        String[] arrOfStr = returnMessage.split(":", 2);
                        quoteVORow.setAttribute("AdvantestQuotationNumber",
                                                arrOfStr[1]);
                    }
                } catch (Exception e) {
                    errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
                    //                    e.printStackTrace();
                } finally {
                    try {
                        if (cs != null)
                            cs.close();
                    } catch (SQLException s) {
                        errorMsg.append("<p><b>" + s.getMessage() +
                                        "</b></p>");
                        //                        s.printStackTrace();
                    }
                }
            }

        }
        if (errorMsg.toString() != null &&
            !"<html><body></body></html>".equals(errorMsg.toString())) {
            returnval = errorMsg.toString();
        } else {
            //            String s = "";
            if (returnConfrmMsg != null && returnMessage != null) {
                returnConfrmMsg =
                        returnConfrmMsg.concat("-").concat(returnMessage);
                returnval = returnConfrmMsg;
            } else
                returnval = "Getting Error From API";
        }
        return returnval;
    }

    public String callQuoteAPIOnCreateMode() {
        String returnMessage = "";
        CallableStatement cs = null;
        DBTransaction dbTrans = (DBTransaction)this.getTransaction();
        String stmt =
            "apps.XXAT_ASO_QUOTE_PKG.create_quote_hdr(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18,:19)";
        try {
            cs =
 dbTrans.createCallableStatement(("BEGIN xxat_quote_create_pkg.create_quote_hdr(?,?,?,?,?,?,?,?,?,?,?,?" +
                                  ");" + "END;"), 12);
            cs.setString(1, "USS-OU-8203");
            cs.setString(2, "Test Quote--Nik");
            cs.setString(3, "103413");
            cs.setString(4, "USS-8203 Sales: Trade");
            cs.setString(5, "Systems Corporate Price List");
            cs.setString(6, "AKM");
            cs.setString(7, "No Sales Credit");
            cs.setString(8, "20-280-E-JPY");
            cs.setString(9, "USD");
            cs.setString(10, "DAP");
            cs.setString(11, "Abdul Jamil, Yasmin (Yasmin)");
            cs.setString(12, "1234567");
            cs.setString(13, "Attemtiona to Dept");
            cs.setString(14, "bcdefg@xyz.com");
            cs.setInt(15, 51157);
            cs.setInt(16, 11639);
            cs.setString(17, null);
            cs.setString(18, null);
            cs.registerOutParameter(19, Types.VARCHAR);
            cs.executeUpdate();
            returnMessage = cs.getString(19);
        } catch (Exception e) {
            //returnMessage = e
            e.printStackTrace();
        } finally {
            try {
                if (cs != null)
                    cs.close();
            } catch (SQLException s) {
                s.printStackTrace();
            }
        }
        return returnMessage;
    }


    public void getUpdateQuote() {
        //        System.out.println("getUpdateQuote : start");
        Boolean quoteSessionState = false;
        ViewObjectImpl quoteVO = this.getQuoteUpdateVO1();
        Row row = null;
        if (quoteVO != null) {
            quoteVO.applyViewCriteria(null);
            quoteVO.reset();
            quoteVO.setNamedWhereClauseParam("bindQuoteNum", null);
            String quoteFromSesion =
                (String)ADFContext.getCurrent().getSessionScope().get("quoteNumber");
            if (quoteFromSesion == null) {
                quoteFromSesion =
                        (String)ADFContext.getCurrent().getSessionScope().get("targetQuoteNumber");
            }
            if (ADFContext.getCurrent().getSessionScope().get("isDuplicateQuote") !=
                null)
                quoteSessionState =
                        (Boolean)ADFContext.getCurrent().getSessionScope().get("isDuplicateQuote");
            String duplicateQuoteNum =
                (String)ADFContext.getCurrent().getSessionScope().get("targetQuoteNumber");
            System.out.println("from AMPIML:" + quoteFromSesion);
            if (quoteFromSesion != null) {
                //                Integer quoteNum = Integer.parseInt(quoteFromSesion);
                quoteFromSesion = quoteFromSesion.trim();
                if (quoteFromSesion.equalsIgnoreCase("")) {
                    quoteFromSesion = "-1";
                }
                BigDecimal quoteVal = new BigDecimal(quoteFromSesion);
                if (quoteSessionState && duplicateQuoteNum != null) {
                    quoteVO.setWhereClause("QUOTE_NUMBER=" +
                                           duplicateQuoteNum);
                } else
                    quoteVO.setWhereClause("QUOTE_NUMBER=" + quoteVal);
                System.out.println("get Query:" + quoteVO.getQuery());

                quoteVO.executeQuery();
                System.out.println("after Execution");
                RowSetIterator iter = quoteVO.createRowSetIterator("");

                while (iter.hasNext()) {
                    row = iter.next();
                    quoteVO.setCurrentRow(row);
                }
                getSalesRepDetails(row);
                getCustSupportRepDetails(row);
                getPaymentTermsForUpdate(row);
                getUpdateQuoteCustmerAddress();
                iter.closeRowSetIterator();


            } else {
                //exec empty row set . ideally shud have been create mode
            }
        }
    }

    public String getQuoteNum(String headerid) {
        System.out.println("headerId" + headerid);
        headerid = headerid.replaceAll("\\s", "");
        String quoteNum = "";

        if (headerid != null) {
            ViewObjectImpl quoteVO = this.getQuoteUpdateVO1();
            Row row = null;
            if (quoteVO != null) {
                quoteVO.reset();
                //                        int hderid = Integer.parseInt(headerid);
                BigDecimal headerNum = new BigDecimal(headerid);
                quoteVO.setWhereClause("Quote_Header_Id=" + headerNum);
                quoteVO.executeQuery();
                System.out.println("QUery is:" + quoteVO.getQuery());
                System.out.println("row Count:" +
                                   quoteVO.getEstimatedRowCount());
                RowSetIterator iter = quoteVO.createRowSetIterator("");
                if (iter.hasNext()) {
                    row = iter.next();
                    quoteVO.setCurrentRow(row);
                }
                quoteNum = row.getAttribute("QuoteNumber").toString();
                iter.closeRowSetIterator();
                //                        System.out.println("QUote Number from Duplicate:::::::"+row.getAttribute("QuoteNumber"));

            }
        }
        return quoteNum;
    }

    public void getSalesRepDetails(Row row) {
        ViewObjectImpl vo = this.getSalesRepresentativeVO();
        if (vo != null) {
            if (row != null) {
                System.out.println(" resource Name" +
                                   row.getAttribute("Salesrepresentative"));
                vo.setWhereClause("resource_name ='" +
                                  row.getAttribute("Salesrepresentative") +
                                  "'"); //Businesscentercsr
                System.out.println("Sales Rep Query:" + vo.getQuery());
                vo.executeQuery();
                RowSetIterator iter = vo.createRowSetIterator("");
                Row salesRow = null;
                while (iter.hasNext()) {
                    salesRow = iter.next();
                }
                if (salesRow != null) {
                    vo.setCurrentRow(salesRow);
                    row.setAttribute("SalesFaxNum",
                                     salesRow.getAttribute("Fax"));
                    row.setAttribute("SalesContactName",
                                     salesRow.getAttribute("ResourceName"));
                    row.setAttribute("SalesPhoneNum",
                                     salesRow.getAttribute("SourcePhone"));
                    row.setAttribute("SalesEmail",
                                     salesRow.getAttribute("SourceEmail"));
                }
            }
        }
    }

    public void getPaymentTermsForUpdate(Row row) {
        ViewObjectImpl vo = this.getPaymentTermsVO();

        if (vo != null) {
            System.out.println("1 " + vo);
            if (row != null) {
                System.out.println("2 " + row);
                System.out.println("PaymentTerms from getPaymentTermsForUpdate method :" +
                                   row.getAttribute("Paymentterms"));
                vo.setWhereClause("description = '" +
                                  row.getAttribute("Paymentterms") + "'");
                vo.executeQuery();
                RowSetIterator iter = vo.createRowSetIterator("");
                Row PaymentRow = null;
                while (iter.hasNext()) {
                    PaymentRow = iter.next();
                }
                if (PaymentRow != null) {
                    vo.setCurrentRow(PaymentRow);

                    row.setAttribute("PaymentTermsName",
                                     PaymentRow.getAttribute("Name"));
                    System.out.println("Tst " +
                                       row.getAttribute("PaymentTermsName"));
                }
            }
        }

    }

    public void getCustSupportRepDetails(Row row) {
        ViewObjectImpl vo = this.getCustomerSupportRepresentVO();
        if (vo != null) {
            if (row != null) {
                System.out.println(" Business center csr" +
                                   row.getAttribute("Businesscentercsr"));
                vo.setWhereClause("Customer_name = '" +
                                  row.getAttribute("Businesscentercsr") +
                                  "'"); //Businesscentercsr
                vo.executeQuery();
                RowSetIterator iter = vo.createRowSetIterator("");
                Row salesRow = null;
                while (iter.hasNext()) {
                    salesRow = iter.next();
                }
                if (salesRow != null) {
                    vo.setCurrentRow(salesRow);
                    row.setAttribute("CustomerFaxNum",
                                     salesRow.getAttribute("Fax"));
                    row.setAttribute("CustomerContactName",
                                     salesRow.getAttribute("CustomerName"));
                    row.setAttribute("CustomerPhoneNum",
                                     salesRow.getAttribute("PhoneNumber"));
                    row.setAttribute("CustomerEmail",
                                     salesRow.getAttribute("EmailAddress"));
                }
            }
        }
    }


    public void getUpdateQuoteCustmerAddress() {
        String shipTo = "";
        String quoteTo = "";
        PreparedStatement cs = null, cs1 = null;

        ViewObjectImpl quoteVO = this.getQuoteUpdateVO1();
        System.out.println("Query is:" + query);
        if (quoteVO != null) {
            Row row = quoteVO.getCurrentRow();
            if (row != null) {
                BigDecimal partyId = (BigDecimal)row.getAttribute("PartyId");
                //                BigDecimal orgid = (BigDecimal)row.getAttribute("OrgId");

                try {
                    cs =
 this.getDBTransaction().createPreparedStatement(query, 0);
                    cs.setBigDecimal(1, partyId);
                    cs.setString(2, "BILL_TO");
                    //                    cs.setBigDecimal(3, orgid);

                    ResultSet rs = cs.executeQuery();
                    while (rs.next()) {
                        quoteTo = rs.getString(2);
                        System.out.println("quoteTo is:" + quoteTo);
                    }
                    cs1 =
this.getDBTransaction().createPreparedStatement(query, 0);
                    cs1.setBigDecimal(1, partyId);
                    cs1.setString(2, "SHIP_TO");
                    //                    cs1.setBigDecimal(3, orgid);
                    ResultSet rs1 = cs1.executeQuery();
                    while (rs1.next()) {
                        shipTo = rs1.getString(2);
                        System.out.println("ShipTo is:" + shipTo);
                    }
                    row.setAttribute("QuoteTo", quoteTo);
                    row.setAttribute("ShipTo", shipTo);
                    System.out.println("QuoteTo:" + quoteTo + ":shipto:" +
                                       shipTo);

                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public String callUpdateQuoteAPI(int respid, int usrId) {
        ViewObjectImpl quoteVO = this.getQuoteUpdateVO1();
        String returnval = null;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String returnMessage = null;
        String returnMsgStatus = null;
        if (quoteVO != null) {
            Row quoteVORow = quoteVO.getCurrentRow();
            if (quoteVORow != null) {
                CallableStatement cs = null;
                String stmt =
                    "apps.XXAT_ASO_QUOTE_PKG.update_quote_hdr(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18,:19,:20)";
                try {
                    cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);

                    if (quoteVORow.getAttribute("QuoteNumber") != null) {
                        cs.setString(1,
                                     quoteVORow.getAttribute("QuoteNumber").toString());
                        System.out.println("QuoteNumber:" +
                                           quoteVORow.getAttribute("QuoteNumber").toString());
                    }
                    //                                                             else{
                    //                                                                 errorMsg.append("<p><b>QuoteNumber is required.</b></p>");
                    //                                                                 }
                    if (quoteVORow.getAttribute("QuoteName") != null) {
                        cs.setString(2,
                                     quoteVORow.getAttribute("QuoteName").toString());
                        System.out.println("QuoteName:" +
                                           quoteVORow.getAttribute("QuoteName").toString());
                    } else {
                        String custName =
                            (String)quoteVORow.getAttribute("Customername");
                        cs.setString(2, "Quote For " + custName);
                        System.out.println("QuoteDescription:" + "Quote For " +
                                           custName);
                        quoteVORow.setAttribute("QuoteName",
                                                "Quote For " + custName);
                    }
                    if (quoteVORow.getAttribute("Ordertypename") != null) {
                        cs.setString(3,
                                     quoteVORow.getAttribute("Ordertypename").toString());
                        System.out.println("Ordertypename:" +
                                           quoteVORow.getAttribute("Ordertypename").toString());
                    } else {
                        errorMsg.append("<p><b>OrderType is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("Pricelistname") != null) {
                        cs.setString(4,
                                     quoteVORow.getAttribute("Pricelistname").toString());
                        System.out.println("Pricelistname:" +
                                           quoteVORow.getAttribute("Pricelistname").toString());
                    } else {
                        errorMsg.append("<p><b>Price List is required.</b></p>");
                    }
                    //-------------------

                    if (quoteVORow.getAttribute("Saleschannel") != null) {
                        cs.setString(5,
                                     quoteVORow.getAttribute("Saleschannel").toString());
                        System.out.println("Saleschannel:" +
                                           quoteVORow.getAttribute("Saleschannel").toString());
                    } else {
                        cs.setString(5, null);
                    }
                    //                if(quoteVORow.getAttribute("OrganizationUnit")!=null)
                    if (quoteVORow.getAttribute("Salesrepresentative") !=
                        null) {
                        cs.setString(6,
                                     quoteVORow.getAttribute("Salesrepresentative").toString());
                        System.out.println("Sales representative" +
                                           quoteVORow.getAttribute("Salesrepresentative"));
                    } else {
                        errorMsg.append("<p><b> Sales Representative is required.</b></p>");
                    }

                    if (quoteVORow.getAttribute("PaymentTermsName") != null) {
                        cs.setString(7,
                                     quoteVORow.getAttribute("PaymentTermsName").toString());
                        System.out.println("PaymentTermsName:" +
                                           quoteVORow.getAttribute("PaymentTermsName").toString());
                    } else {
                        //                                                                 cs.setString(6,null);
                        errorMsg.append("<p><b> Payment Terms is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("CurrencyCode") != null) {
                        cs.setString(8,
                                     quoteVORow.getAttribute("CurrencyCode").toString());
                        System.out.println("Currency:" +
                                           quoteVORow.getAttribute("CurrencyCode").toString());
                    } else {
                        errorMsg.append("<p><b>Currency Code is required.</b></p>");
                    }

                    if (quoteVORow.getAttribute("Businesscentercsr") != null) {
                        cs.setString(9,
                                     quoteVORow.getAttribute("Businesscentercsr").toString());
                        System.out.println("Businesscentercsr:" +
                                           quoteVORow.getAttribute("Businesscentercsr").toString());
                    } else {
                        cs.setString(9, null);
                        //                                                             errorMsg.append("<p><b>Businesscentercsr is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("Attribute8") != null) {
                        cs.setString(10,
                                     quoteVORow.getAttribute("Attribute8").toString());
                        System.out.println("Attribute8:" +
                                           quoteVORow.getAttribute("Attribute8").toString());
                    } else {
                        cs.setString(10, null);
                        //                                                             errorMsg.append("<p><b>Deal id is required.</b></p>");
                    }

                    if (quoteVORow.getAttribute("Attribute12") != null) {
                        cs.setString(11,
                                     quoteVORow.getAttribute("Attribute12").toString());
                        System.out.println("Attribute12:" +
                                           quoteVORow.getAttribute("Attribute12").toString());
                    } else {
                        cs.setString(11, null);
                        //errorMsg.append("<p><b>Attentiom/Department To is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("Attribute13") != null) {
                        cs.setString(12,
                                     quoteVORow.getAttribute("Attribute13").toString());
                        System.out.println("Attribute13:" +
                                           quoteVORow.getAttribute("Attribute13").toString());
                    } else {
                        cs.setString(12, null);
                        //                        errorMsg.append("<p><b>Organization Unit is required.</b></p>");
                    }
                    cs.setInt(13, respid);
                    cs.setInt(14, usrId);
                    //                                                         if(quoteVORow.getAttribute("DealId")!=null){
                    //                                                                 cs.setString(12,quoteVORow.getAttribute("DealId").toString());
                    //                                                                 }
                    //                                                         else{
                    //                                                                 cs.setString(12,null);
                    //                                     //                        errorMsg.append("<p><b>Deal Id is required.</b></p>");
                    //                                                             }
                    if (quoteVORow.getAttribute("Agrimentname") != null) {
                        cs.setString(15,
                                     quoteVORow.getAttribute("Agrimentname").toString());
                    } else {
                        cs.setString(15, null);
                        //                        errorMsg.append("<p><b>AttentionTo/Dept is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("Attribute2") != null) {
                        cs.setString(16,
                                     quoteVORow.getAttribute("Attribute2").toString());
                    } else {
                        cs.setString(16, null);
                    }

                    //                    cs.setString(17, null); //Discount ,change later
                    cs.setString(17, null); //Page, Change later
                    cs.setString(18, null); // p_phonefax add later
                    cs.registerOutParameter(19, Types.VARCHAR);
                    cs.registerOutParameter(20, Types.VARCHAR);
                    errorMsg.append("</body></html>");
                    String err = "<html><body></body></html>";
                    if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
                        cs.executeUpdate();
                        returnMsgStatus = cs.getString(19);
                        returnMessage = cs.getString(20);
                        if (returnMessage != null)
                            System.out.println("return Message is:" +
                                               returnMessage + " ::msg::");
                    }
                } catch (Exception e) {
                    errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
                    //                    e.printStackTrace();
                } finally {
                    try {
                        if (cs != null)
                            cs.close();
                    } catch (SQLException s) {
                        errorMsg.append("<p><b>" + s.getMessage() +
                                        "</b></p>");
                        //                        s.printStackTrace();
                    }
                }
            }
        }
        if (errorMsg.toString() != null &&
            !"<html><body></body></html>".equals(errorMsg.toString()))
            returnval = errorMsg.toString();
        else {
            if (returnMsgStatus != null && returnMessage != null) {
                returnMsgStatus =
                        returnMsgStatus.concat("-").concat(returnMessage);
                returnval = returnMsgStatus;
            } else
                returnval = "Getting Error From API";
        }
        return returnval;

    }


    public void searchQuote() {
        ViewObjectImpl quoteSearchVO = this.getQuoteSearchVO();
        Row quoteSearchVORow = quoteSearchVO.getCurrentRow();
        ViewObjectImpl quoteResultTabVO = this.getQuoteSearchTabVO();
        if (quoteResultTabVO != null) {
            quoteResultTabVO.setWhereClause(null);
            quoteResultTabVO.applyViewCriteria(null);
            quoteResultTabVO.reset();
            ViewCriteria quoteSearchTabVC =
                quoteResultTabVO.getViewCriteria("QuoteSearchTabVC");
            quoteSearchTabVC.resetCriteria();
            quoteResultTabVO.setNamedWhereClauseParam("p_quoteNum", null);
            quoteResultTabVO.setNamedWhereClauseParam("p_custName", null);
            quoteResultTabVO.setNamedWhereClauseParam("p_orgId", null);
            quoteResultTabVO.setNamedWhereClauseParam("p_quoteNum",
                                                      quoteSearchVORow.getAttribute("QuoteNumber"));
            quoteResultTabVO.setNamedWhereClauseParam("p_custName",
                                                      quoteSearchVORow.getAttribute("Customer"));
            quoteResultTabVO.setNamedWhereClauseParam("p_orgId",
                                                      quoteSearchVORow.getAttribute("OUId"));
            //            System.out.println("Quote Number" +
            //                               quoteSearchVORow.getAttribute("QuoteNumber"));
            //            System.out.println("Org id" +
            //                               quoteSearchVORow.getAttribute("OUId"));
            quoteResultTabVO.applyViewCriteria(null);
            quoteResultTabVO.applyViewCriteria(quoteSearchTabVC);
            //            String query = quoteResultTabVO.getQuery().toString();
            //            System.out.println("query is:" + query);
            quoteResultTabVO.executeQuery();

        }


    }

    /*    public void getFaxNum() {
        ViewObjectImpl queryVO = this.getQuotesVO();
        Row row = queryVO.getCurrentRow();

        BigDecimal parentId;
        System.out.println("Description:"+row.getAttribute("QuoteDescription"));
        System.out.println("Customer name is:"+row.getAttribute("CustomerName"));
        System.out.println("CSR" +
                           row.getAttribute("CustomerSupportRepresent"));
        System.out.println("CCN" + row.getAttribute("CustomerContactName"));

        System.out.println(row.getAttribute("Customerparentid"));
        parentId = (BigDecimal)row.getAttribute("Customerparentid");
        String faxNum = null;
        PreparedStatement pstmt = null;
        String faxNumber =
            "select PHONE_NUMBER Fax from per_phones where PHONE_TYPE='WF' AND parent_id=?";
        if (parentId != null)
            pstmt = getDBTransaction().createPreparedStatement(faxNumber, 0);
        try {
            pstmt.setBigDecimal(1, parentId);
            pstmt.execute();
            ResultSet rs = pstmt.getResultSet();
            while (rs.next()) {
                faxNum = rs.getString(1);
                System.out.println("fax Number is:" + faxNum);
            }

            row.setAttribute("CustomerFaxNum", faxNum);
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException closeerr) {
                closeerr.printStackTrace();
            }
        }
    }    */

    //    public void getFaxNum(){
    //
    //        ViewObjectImpl vo =
    //
    //        }

    public void initQuoteSearch() {
        ViewObjectImpl searchVO = this.getQuoteSearchVO();
        ViewObjectImpl searchTabVO = this.getQuoteSearchTabVO();
        if (searchVO != null && searchTabVO != null) {
            searchVO.executeEmptyRowSet();
            searchTabVO.executeEmptyRowSet();
            RowSetIterator iter = searchVO.createRowSetIterator("clear");
            if (iter != null) {
                if (iter.hasNext())
                    iter.next().remove();
                iter.closeRowSetIterator();
            }
            searchTabVO.setWhereClause("1=2");
            searchTabVO.executeQuery();
            searchVO.clearCache();
            Row row = searchVO.createRow();
            if (row != null) {
                searchVO.insertRow(row);
                searchVO.setCurrentRow(row);
            }

        }
    }


    public void copyQuoteDetailsFromQheaderObjToCreate(String ou,
                                                       String incoTerm,
                                                       String currency,
                                                       String payterm,
                                                       String custNumber,
                                                       String custName) {
        ViewObjectImpl quoteVO = this.getQuotesVO();
        if (quoteVO != null)
            quoteVO.executeEmptyRowSet();
        quoteVO.clearCache();
        Row row = quoteVO.createRow();
        row.setAttribute("OrganizationUnit", ou);
        row.setAttribute("IncoTerms", incoTerm);
        row.setAttribute("Currency", currency);
        row.setAttribute("PaymentTerms", payterm);
        row.setAttribute("CustomerNumber", custNumber);
        row.setAttribute("CustomerName", custName);
        if (row != null) {
            quoteVO.insertRow(row);
            quoteVO.setCurrentRow(row);
        }
    }

    public void initImportSource() {
        ViewObjectImpl impSrcVO = this.getImportSourceVO1();
        if (impSrcVO != null) {
            Row cRw = impSrcVO.createRow();
            impSrcVO.insertRow(cRw);
            cRw.setAttribute("ReuseQuote", "Y");
            impSrcVO.setCurrentRow(cRw);

        }
    }


    public Row getQuoteExportValues(String quoteNumber) {
        Row row = null;
        if (quoteNumber != null) {
            ViewObjectImpl exportVO = this.getQuoteExportVO1();
            if (exportVO != null) {
                exportVO.setNamedWhereClauseParam("pquoteno", quoteNumber);
                exportVO.executeQuery();
                row = exportVO.getRowAtRangeIndex(0);
            }
        }
        return row;
    }

    public boolean isSalesChValidate(String salesCh) {
        boolean isSalesChVal = false;

        ViewObjectImpl vo = this.getSalesChannelVO();
        if (vo != null) {

            vo.setWhereClause("meaning='" + salesCh + "'");
            vo.executeQuery();
            if (vo.getEstimatedRowCount() > 0)
                isSalesChVal = true;
            else
                isSalesChVal = false;
        }
        return isSalesChVal;
    }

    public String isSalesChValidate(String salesCh, String override) {
        String salesChannelCode = null;

        ViewObjectImpl vo = this.getSalesChannelVO();
        if (vo != null) {
            vo.setWhereClause("meaning='" + salesCh + "'");
            vo.executeQuery();
            if (vo.getEstimatedRowCount() > 0) {
                Row r = vo.getRowAtRangeIndex(0);
                if (r != null) {
                    salesChannelCode = (String)r.getAttribute("LookupCode");
                }
            }
        }
        return salesChannelCode;
    }

    public String clearQuoteFieldwithParams(String ou, String orderType,
                                            String priceList,
                                            String businessCSR,
                                            String incoTerm, String quoteDesc,
                                            String salesCh, String payTerm,
                                            String currency, String custNumber,
                                            String custName,
                                            String businessAggrement,
                                            String custEmail, String custPhone,
                                            String ccontact) {
        //        String custNumber = "104413";
        //custName = "  NXP Semiconductors Taiwan Ltd.   ";
        HashMap<String, Boolean> qheaderValidMap =
            new HashMap<String, Boolean>();
        String invalidQuteParams = SudokuUtils.invalidQteParams;
        String msgName = getFNDMsges(invalidQuteParams);
        Map sessionMap = ADFContext.getCurrent().getSessionScope();
        boolean showWarning = false;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        if (msgName != null)
            errorMsg.append(msgName);
        else
            errorMsg.append(invalidQuteParams);
        //        errorMsg.append("The following quote parameters could not be verified in the Imported Reference Configuration.");
        BigDecimal orgid = null;
        BigDecimal partyId = null;
        System.out.println("OU:" + ou + "--IncoTerm:" + incoTerm +
                           "--currency:" + currency + "--payTerm:" + payTerm +
                           "--custNumber:" + custNumber + "custName:" +
                           custName + "Price List Id " + priceList);
        ViewObjectImpl quoteVO = this.getQuotesVO();
        if (quoteVO != null) {
            quoteVO.executeEmptyRowSet();
            quoteVO.clearCache();
            Row row = quoteVO.createRow();
            if (row != null) {
                //Setting value of email , phone and contact without any validations
                if (custEmail != null && !custEmail.equalsIgnoreCase("")) {
                    row.setAttribute("QuoteEmail", custEmail);
                }

                if (custPhone != null && !custPhone.equalsIgnoreCase("")) {
                    row.setAttribute("CustPhoneFax", custPhone);
                }
                if (ccontact != null && !ccontact.equalsIgnoreCase("")) {
                    row.setAttribute("AttentionToOrDept", ccontact);
                }
                if (ou != null) {
                    ou = ou.trim();
                    if (!ou.equals("")) {
                        if (isOUValidate(ou)) {
                            qheaderValidMap.put("OU", Boolean.TRUE);
                            row.setAttribute("OrganizationUnit", ou);
                            orgid = getOrgId(ou);
                            if (orgid != null) {
                                Row salesRepRow = getDefaulSalesRepVal(orgid);
                                if (salesRepRow != null) {
                                    row.setAttribute("SalesRepresentative",
                                                     salesRepRow.getAttribute("ResourceName"));
                                    row.setAttribute("SalesContactName",
                                                     salesRepRow.getAttribute("ResourceName"));
                                    row.setAttribute("SalesPhoneNum",
                                                     salesRepRow.getAttribute("SourcePhone"));
                                    row.setAttribute("SalesFaxNum",
                                                     salesRepRow.getAttribute("Fax"));
                                    row.setAttribute("SalesEmail",
                                                     salesRepRow.getAttribute("SourceEmail"));
                                    //The sales rep attr like phone email are to be populated from PrimarySalesRepVo, Query needs to be updated
                                    //                                    row.setAttribute("SalesContactName",
                                    //                                                     salesRepRow.getAttribute("ResourceName"));
                                    //                                    row.setAttribute("SalesRepresentative",
                                    //                                                     salesRepRow.getAttribute("Name"));
                                    //                                    row.setAttribute("SalesRepresentative",
                                    //                                                     salesRepRow.getAttribute("Name"));
                                    //                                    row.setAttribute("SalesRepresentative",
                                    //                                                     salesRepRow.getAttribute("Name"));
                                }
                                row.setAttribute("OrgId", orgid);


                                if (orderType != null) {
                                    orderType = orderType.trim();
                                    if (!orderType.equals("")) {
                                        if (isOrderType(orderType, orgid)) {
                                            qheaderValidMap.put("OrderType",
                                                                Boolean.TRUE);
                                            row.setAttribute("OrderType",
                                                             orderType);

                                        } else {
                                            showWarning = true;
                                            errorMsg.append("<p><b>Order Type:</b></p>");
                                        }
                                    }
                                }


                                if (custName != null || custNumber != null) {
                                    boolean numCheck = false;
                                    boolean nameCheck = false;
                                    if (custNumber != null) {
                                        custNumber = custNumber.trim();
                                        if (!custNumber.equals("")) {
                                            if (isCustNumValidate(custNumber,
                                                                  orgid)) {
                                                qheaderValidMap.put("custNum",
                                                                    Boolean.TRUE);
                                                row.setAttribute("CustomerNumber",
                                                                 custNumber);
                                                numCheck = true;
                                            } else if (custName != null) {
                                                custName = custName.trim();
                                                if (isCustNameValidate(custName,
                                                                       orgid)) {
                                                    qheaderValidMap.put("custName",
                                                                        Boolean.TRUE);
                                                    row.setAttribute("CustomerName",
                                                                     custName);
                                                    nameCheck = true;
                                                } else
                                                    errorMsg.append("<p>Customer Details:</p>");
                                            } else {
                                                showWarning = true;
                                                errorMsg.append("<p>Customer Details:</p>");
                                            }
                                        }

                                    } else if (custName != null) {
                                        custName = custName.trim();
                                        if (!custName.equals("")) {
                                            if (isCustNameValidate(custName,
                                                                   orgid)) {
                                                qheaderValidMap.put("custName",
                                                                    Boolean.TRUE);
                                                row.setAttribute("CustomerName",
                                                                 custName);
                                                nameCheck = true;

                                            } else
                                                errorMsg.append("<p>Customer Details:</p>");
                                        } else {
                                            //showWarning = true;
                                            System.out.println("customer details are null");
                                        }
                                    }

                                    if (numCheck || nameCheck) {
                                        partyId =
                                                getPartyId(custNumber, custName,
                                                           numCheck,
                                                           nameCheck);
                                        System.out.println("partyId::" +
                                                           partyId);
                                        row.setAttribute("PartyId", partyId);

                                        if (businessAggrement != null) {
                                            businessAggrement =
                                                    businessAggrement.trim();
                                            if (!businessAggrement.equals("")) {
                                                String custAccid =
                                                    row.getAttribute("CustAccid").toString();
                                                if (isBusAgreement(businessAggrement,
                                                                   custAccid)) {
                                                    qheaderValidMap.put("businessAgreement",
                                                                        Boolean.TRUE);
                                                    row.setAttribute("BusinessAgreement",
                                                                     businessAggrement);
                                                } else {
                                                    showWarning = true;
                                                    errorMsg.append("<p>Business Agreement</p>");
                                                    System.out.println("Business Agreement");
                                                }
                                            }
                                        }

                                        if (partyId != null && orgid != null)
                                            getQuoteCustmerAddress(row);
                                    }
                                }
                            }
                        } else {
                            showWarning = true;
                            errorMsg.append("<p>Operating Unit</p>");
                            System.out.println("OU");
                        }
                    }
                }


                if (businessCSR != null) {
                    businessCSR = businessCSR.trim();
                    if (!businessCSR.equals("")) {
                        HashMap<String, String> busCSRMap =
                            isBusinessCSR(businessCSR);
                        if (busCSRMap != null) {
                            String validCSR = busCSRMap.get("validCSR");
                            if (validCSR != null &&
                                validCSR.equalsIgnoreCase("Y")) {
                                qheaderValidMap.put("custSupportRep",
                                                    Boolean.TRUE);
                                row.setAttribute("CustomerSupportRepresent",
                                                 businessCSR);
                                row.setAttribute("CustomerContactName",
                                                 busCSRMap.get("CustomerName"));
                                row.setAttribute("CustomerEmail",
                                                 busCSRMap.get("Email"));
                                row.setAttribute("CustomerPhoneNum",
                                                 busCSRMap.get("PhoneNumber"));
                                row.setAttribute("CustomerFaxNum",
                                                 busCSRMap.get("Fax"));
                            } else if (validCSR != null &&
                                       validCSR.equalsIgnoreCase("N")) {
                                showWarning = true;
                                errorMsg.append("<p>Business Center CSR</p>");
                                System.out.println("Business Center CSR");
                            }
                        }
                    }
                }

                if (priceList != null) {
                    priceList = priceList.trim();
                    if (!priceList.equals("")) {
                        if (isPriceList(priceList) != null) {
                            qheaderValidMap.put("priceList", Boolean.TRUE);
                            String priceName = isPriceList(priceList);
                            if (priceName != null) {
                                row.setAttribute("PriceList", priceName);
                            }
                        } else {
                            showWarning = true;
                            errorMsg.append("<p>Price List</p>");
                            System.out.println("Price List");
                        }
                    }
                }
                if (currency != null) {
                    currency = currency.trim();
                    if (!currency.equals("")) {
                        if (isCurrencyValidate(currency)) {
                            qheaderValidMap.put("currency", Boolean.TRUE);
                            row.setAttribute("CurrencyCode", currency);
                        } else {
                            showWarning = true;
                            errorMsg.append("<p>Currency</p>");
                            System.out.println("Currency");
                        }
                    }
                }

                if (incoTerm != null) {
                    incoTerm = incoTerm.trim();
                    if (!incoTerm.equals("")) {
                        if (isIncoTermValidate(incoTerm)) {
                            qheaderValidMap.put("incoTerm", Boolean.TRUE);
                            row.setAttribute("IncoTermsMeaning", incoTerm);
                        } else {
                            showWarning = true;
                            errorMsg.append("<p>IncoTerm</p>");
                            System.out.println("IncoTerm");
                        }
                    }
                }

                if (salesCh != null) {
                    salesCh = salesCh.trim();
                    if (!salesCh.equals("")) {
                        String salesChannelCode =
                            isSalesChValidate(salesCh, null);
                        if (salesChannelCode != null) {
                            // if (isSalesChValidate(salesCh)) {
                            qheaderValidMap.put("salesChannel", Boolean.TRUE);
                            row.setAttribute("SalesChCode", salesChannelCode);
                        } else {
                            showWarning = true;
                            errorMsg.append("<p>Sales Channel</p>");
                            System.out.println("Sales Channel");
                        }
                    }
                }
                if (quoteDesc != null) {
                    quoteDesc = quoteDesc.trim();
                    System.out.println("Quote Desc:" + quoteDesc);
                    row.setAttribute("QuoteDescription", quoteDesc);
                }


                if (payTerm != null) {
                    payTerm = payTerm.trim();
                    if (!payTerm.equals("")) {
                        if (isPayTermValidate(payTerm)) {
                            qheaderValidMap.put("paymentTerm", Boolean.TRUE);
                            row.setAttribute("PaymentTermsMean", payTerm);
                        } else {
                            showWarning = true;
                            errorMsg.append("<p>Payment Terms</p>");
                            System.out.println("PaymentTerm");
                        }
                    }
                }

                sessionMap.put("qheaderValidMap", qheaderValidMap);
                quoteVO.insertRow(row);
                quoteVO.setCurrentRow(row);
            }
            errorMsg.append("</body></html>");

        }
        if (showWarning)
            return errorMsg.toString();
        else
            return null;
    }


    public boolean isCurrencyValidate(String currency) {
        boolean isCurrency = false;
        ViewObjectImpl vo = this.getCurrencyVO();
        if (vo != null) {
            vo.setWhereClause("currency_code='" + currency + "'");
            vo.executeQuery();
            System.out.println("Currency Query:" + vo.getQuery() + "count:" +
                               vo.getEstimatedRowCount());
            if (vo.getEstimatedRowCount() > 0)
                isCurrency = true;
            else
                isCurrency = false;
        }
        return isCurrency;
    }


    public boolean isIncoTermValidate(String incoTerm) {
        boolean isIncoTermVal = false;

        ViewObjectImpl vo = this.getIncoTermVO();
        if (vo != null) {
            vo.setWhereClause("meaning='" + incoTerm + "'");
            vo.executeQuery();
            if (vo.getEstimatedRowCount() > 0)
                isIncoTermVal = true;
            else
                isIncoTermVal = false;
        }
        return isIncoTermVal;
    }

    public boolean isPayTermValidate(String paymentTerm) {
        boolean isPaymentTerm = false;

        ViewObjectImpl vo = this.getPaymentTermsVO();
        if (vo != null) {
            vo.setWhereClause("name='" + paymentTerm + "'");
            vo.executeQuery();
            if (vo.getEstimatedRowCount() > 0)
                isPaymentTerm = true;
            else
                isPaymentTerm = false;
        }
        return isPaymentTerm;
    }


    public HashMap<String, String> isBusinessCSR(String csr) {
        boolean isCSR = false;
        HashMap<String, String> businessCSRMap = new HashMap<String, String>();
        ViewObjectImpl vo = this.getCustomerSupportRepresentVO();
        if (vo != null) {
            vo.setWhereClause("Customer_name='" + csr + "'");
            vo.executeQuery();
            if (vo.getEstimatedRowCount() > 0) {
                Row r = vo.getRowAtRangeIndex(0);
                businessCSRMap.put("validCSR", "Y");
                businessCSRMap.put("PhoneNumber",
                                   (String)r.getAttribute("PhoneNumber"));
                businessCSRMap.put("CustomerName",
                                   (String)r.getAttribute("CustomerName"));
                businessCSRMap.put("Email",
                                   (String)r.getAttribute("EmailAddress"));
                businessCSRMap.put("Fax", (String)r.getAttribute("Fax"));
                isCSR = true;
            } else {
                businessCSRMap.put("validCSR", "N");
                isCSR = false;
            }
        }
        return businessCSRMap;
    }


    public String isPriceList(String priceList) {
        boolean isPriceList = false;
        Row row = null;
        String name = null;
        ViewObjectImpl vo = this.getPriceListVO();
        if (vo != null) {
            vo.setWhereClause("price_list_id='" + priceList + "'");
            vo.executeQuery();
            if (vo.getEstimatedRowCount() > 0) {
                isPriceList = true;
                RowSetIterator iter = vo.createRowSetIterator("");
                while (iter.hasNext()) {
                    row = iter.next();
                    if (row != null) {
                        name = (String)row.getAttribute("Name");
                    }
                }
            } else
                isPriceList = false;
        }
        return name;
    }

    public boolean isBusAgreement(String busAgr, String custAccId) {
        boolean isBusAgr = false;
        if (busAgr != null && custAccId != null) {
            busAgr = busAgr.trim();
            ViewObjectImpl vo = this.getbusinessAgreementVo();
            if (vo != null) {
                vo.setNamedWhereClauseParam("p_custAccId", custAccId);
                vo.setWhereClause("Name='" + busAgr + "'");
                vo.executeQuery();
                if (vo.getEstimatedRowCount() > 0)
                    isBusAgr = true;
                else
                    isBusAgr = false;
            }
        }
        return isBusAgr;
    }


    //    public boolean isCustValidate(String custNum, String custName,
    //                                  BigDecimal orgid) {
    //        ViewObjectImpl vo = this.getCustomerNameVO();
    //        //        ViewObject vo1 = findViewObject("CustomerNameVO");
    //        boolean isCustValidate = false;
    //            if (vo != null) {
    //        if (custNum != null)
    //            custNum = custNum.trim();
    //        else
    //            custName = custName.trim();
    //
    //            vo.setNamedWhereClauseParam("p_orgId", orgid);
    //            //                vo.setWhereClauseParam(0, orgid);
    //            if (custName != null)
    //                vo.setWhereClause("customername='" + custName + "'");
    //            else
    //                vo.setWhereClause("accountnumber='" + custNum + "'");
    //            System.out.println("QUery is:" + vo.getQuery());
    //            vo.executeQuery();
    //            System.out.println("QUery is:" + vo.getQuery());
    //            if (vo.getEstimatedRowCount() > 0)
    //                isCustValidate = true;
    //            else
    //                isCustValidate = false;
    //        }
    //        return isCustValidate;
    //    }


    public boolean isOrderType(String orderType, BigDecimal orgid) {
        ViewObjectImpl vo = this.getOrderTypeVO();
        boolean isOrderType = false;
        if (vo != null) {
            if (orderType != null) {
                orderType = orderType.trim();
                vo.setNamedWhereClauseParam("p_orgId", orgid);
                vo.setWhereClause("NAME='" + orderType + "'");
                vo.executeQuery();
                if (vo.getEstimatedRowCount() > 0)
                    isOrderType = true;
                else
                    isOrderType = false;
            }
        }
        return isOrderType;
    }


    public boolean isCustNumValidate(String custNum, BigDecimal orgid) {
        ViewObjectImpl vo = this.getCustomerNameVO();
        boolean isCustValidate = false;
        if (vo != null) {
            if (custNum != null) {
                custNum = custNum.trim();
                vo.setNamedWhereClauseParam("p_orgId", orgid);
                vo.setWhereClause("accountnumber='" + custNum + "'");
                vo.executeQuery();
                if (vo.getEstimatedRowCount() > 0)
                    isCustValidate = true;
                else
                    isCustValidate = false;
            }
        }
        return isCustValidate;
    }

    public boolean isCustNameValidate(String custName, BigDecimal orgid) {
        ViewObjectImpl vo = this.getCustomerNameVO();
        boolean isCustValidate = false;
        if (vo != null) {
            if (custName != null) {
                custName = custName.trim();
                vo.setNamedWhereClauseParam("p_orgId", orgid);
                vo.setWhereClause("customername='" + custName + "'");
                vo.executeQuery();
                if (vo.getEstimatedRowCount() > 0)
                    isCustValidate = true;
                else
                    isCustValidate = false;
            }
        }
        return isCustValidate;
    }


    public boolean isOUValidate(String ou) {
        boolean checkOU = false;
        if (ou != null) {
            ViewObjectImpl vo = this.getOUVO();
            if (vo != null) {
                vo.setWhereClause("operating_unit='" + ou + "'");
                vo.executeQuery();
                if (vo.getEstimatedRowCount() > 0)
                    checkOU = true;
            } else
                checkOU = false;
        }
        return checkOU;
    }

    public BigDecimal getPartyId(String customerNum, String custName,
                                 boolean numCheck, boolean nameCheck) {

        BigDecimal partyId = null;
        ViewObjectImpl vo = this.getCustomerNumberVO();
        if (vo != null) {
            if (customerNum != null && numCheck) {
                //                customerNum ="104413";
                //                customerNum = customerNum.replaceAll("\\s","");
                vo.setWhereClause("accountnumber='" + customerNum + "'");
                vo.executeQuery();
                //                System.out.println("Query::" + vo.getQuery());
            }
            if (custName != null && nameCheck) {
                custName = custName.trim();
                //                custName = custName.replaceAll("\\s", "");
                vo.setWhereClause("customername='" + custName + "'");
                vo.executeQuery();
            }
            RowSetIterator iter = vo.createRowSetIterator("");
            System.out.println(vo.getEstimatedRowCount());
            Row row = null;
            while (iter.hasNext()) {
                row = iter.next();
            }
            if (row != null)
                partyId = (BigDecimal)row.getAttribute("Partyid");
        }
        return partyId;
    }

    public BigDecimal getOrgId(String ou) {
        ou = ou.replaceAll("\\s+", "");
        BigDecimal orgid = null;
        ViewObjectImpl vo = this.getOUVO();
        if (ou != null) {
            if (vo != null) {
                vo.setWhereClause("OPERATING_UNIT ='" + ou + "'");
                vo.executeQuery();
                RowSetIterator iter = vo.createRowSetIterator("");
                System.out.println(vo.getEstimatedRowCount());
                Row ouRow = null;
                while (iter.hasNext()) {
                    ouRow = iter.next();
                }
                if (ouRow != null) {
                    orgid = (BigDecimal)ouRow.getAttribute("OrgId");
                }
            }
        }
        return orgid;
    }

    public boolean checkCustDetails(String orgid, String custNum,
                                    String custName) {

        if (orgid != null) {
            ViewObjectImpl vo = this.getCustomerNumberVO();
            if (vo != null) {
                vo.setWhereClause("");
            }

        }

        return false;
    }


    public void getCurrency(String currency) {
        if (currency != null) {
            ViewObjectImpl vo = this.getCurrencyVO();
            if (vo != null) {
                vo.setWhereClause("currency_code ='" + currency + "'");
                vo.executeQuery();
            }
        }
    }

    public Row getDefaulSalesRepVal(BigDecimal orgId) {
        Row row = null;
        ViewObjectImpl vo = this.getPrimarySalesRepVO();
        if (vo != null) {
            vo.setNamedWhereClauseParam("P_ORG_ID", orgId);
            vo.executeQuery();
            RowSetIterator iter = vo.createRowSetIterator("");
            while (iter.hasNext()) {
                row = iter.next();
            }
            //            if (row != null)
            //                row.getAttribute("Name");
        }

        return row;
    }

    public void defaultSalesRepOnCreateQuote() {
        ViewObjectImpl vo = this.getQuotesVO();
        Row salesRepRow = null;
        Row row = null;
        if (vo != null) {
            row = vo.getCurrentRow();
            if (row != null) {
                System.out.println("OrgId is:" + row.getAttribute("OrgId"));
                salesRepRow =
                        getDefaulSalesRepVal((BigDecimal)row.getAttribute("OrgId"));
                if (salesRepRow != null) {
                    row.setAttribute("SalesRepresentative",
                                     salesRepRow.getAttribute("ResourceName"));
                }
            }
        }
    }

    public void clearQuoteFields() {
        ViewObjectImpl quoteVO = this.getQuotesVO();
        if (quoteVO != null)
            quoteVO.executeEmptyRowSet();
        //        RowSetIterator iter = quoteVO.createRowSetIterator("clear");
        //        if (iter != null) {
        //            if (iter.hasNext())
        //                iter.next().remove();
        //            iter.closeRowSetIterator();
        //        }
        quoteVO.clearCache();
        Row row = quoteVO.createRow();
        if (row != null) {
            quoteVO.insertRow(row);
            quoteVO.setCurrentRow(row);
        }
    }

    public void initRuleSet() {
        System.out.println("Init Rule Set");
        ViewObjectImpl ruleSetVO = this.getRuleSetVO1();
        if (ruleSetVO != null) {
            //            AttributeDef[] attDef = ruleSetVO.getAttributeDefs();
            //            for (AttributeDef af : attDef) {
            //                System.out.println(af.getName());
            //            }
            //get value of rulset top level and second level choices
            Row cRow = ruleSetVO.createRow();
            ruleSetVO.insertRow(cRow);
            Map ruleSetMap =
                (Map)ADFContext.getCurrent().getSessionScope().get("ruleSetMap");
            //            Map ruleSetMapConfig =
            //            (Map)ADFContext.getCurrent().getSessionScope().get("inputParamsMapFromConfig");
            //            if(ruleSetMapConfig!=null && ruleSetMapConfig.size()>0){
            //                    ruleSetVO.setCurrentRow(cRow);
            //                    String topLevelCode = (String)ruleSetMapConfig.get("ruleSetTop");
            //                    String secondLevelCode =
            //                        (String)ruleSetMapConfig.get("ruleSetSecond");
            //                    String error = (String)ruleSetMapConfig.get("error");
            ////                    if (error != null && error.equalsIgnoreCase("N")) {
            //                        if (secondLevelCode != null) {
            //                            secondLevelCode = secondLevelCode.toUpperCase();
            //                        }
            //                        cRow.setAttribute("TopLevelCode", topLevelCode);
            //                        cRow.setAttribute("SecondLevelCode", secondLevelCode);
            //                        RuleSetVORowImpl rwImpl =
            //                            (RuleSetVORowImpl)ruleSetVO.getCurrentRow();
            //                        String secondLevelMeaning =
            //                            rwImpl.retrieveSecLevelMeaning(secondLevelCode);
            //                        System.out.println("From AM Impl second level meaning " +
            //                                           secondLevelMeaning);
            //                        cRow.setAttribute("SecondLevelMeaning",
            //                                          secondLevelMeaning);
            ////                    }
            //                }
            //           else
            if (ruleSetMap != null) {
                String topLevelCode = (String)ruleSetMap.get("topLevelCode");
                String secondLevelCode =
                    (String)ruleSetMap.get("secondLevelCode");
                String error = (String)ruleSetMap.get("error");
                if (error != null && error.equalsIgnoreCase("N")) {
                    if (secondLevelCode != null) {
                        secondLevelCode = secondLevelCode.toUpperCase();
                    }
                    cRow.setAttribute("TopLevelCode", topLevelCode);
                    cRow.setAttribute("SecondLevelCode", secondLevelCode);
                    RuleSetVORowImpl rwImpl =
                        (RuleSetVORowImpl)ruleSetVO.getCurrentRow();
                    String secondLevelMeaning =
                        rwImpl.retrieveSecLevelMeaning(secondLevelCode);
                    System.out.println("From AM Impl second level meaning " +
                                       secondLevelMeaning);
                    cRow.setAttribute("SecondLevelMeaning",
                                      secondLevelMeaning);
                }

                ruleSetVO.setCurrentRow(cRow);

            } else {
                ruleSetVO.setCurrentRow(cRow);
            }
        }
    }


    public void initRuleSetForRef() {
        System.out.println("Init Rule Set config");
        ViewObjectImpl ruleSetVO = this.getRuleSetVO1();
        if (ruleSetVO != null) {
            //get value of rulset top level and second level choices
            Row cRow = ruleSetVO.createRow();
            ruleSetVO.insertRow(cRow);
            Map ruleSetMap =
                (Map)ADFContext.getCurrent().getSessionScope().get("ruleSetMap");
            // Map ruleSetMapConfig =
            // (Map)ADFContext.getCurrent().getSessionScope().get("inputParamsMapFromConfig");

            if (ruleSetMap != null && ruleSetMap.size() > 0) {
                ruleSetVO.setCurrentRow(cRow);
                String topLevelCode = (String)ruleSetMap.get("topLevelCode");
                String secondLevelCode =
                    (String)ruleSetMap.get("secondLevelCode");
                String error = (String)ruleSetMap.get("error");
                //                    if (error != null && error.equalsIgnoreCase("N")) {
                if (secondLevelCode != null) {
                    secondLevelCode = secondLevelCode.toUpperCase();
                }
                cRow.setAttribute("TopLevelCode", topLevelCode);
                cRow.setAttribute("SecondLevelCode", secondLevelCode);
                RuleSetVORowImpl rwImpl =
                    (RuleSetVORowImpl)ruleSetVO.getCurrentRow();
                String secondLevelMeaning =
                    rwImpl.retrieveSecLevelMeaning(secondLevelCode);
                System.out.println("From AM Impl second level meaning " +
                                   secondLevelMeaning);
                cRow.setAttribute("SecondLevelMeaning", secondLevelMeaning);
                //                    }
            }

            else if (ruleSetMap != null) {
                String topLevelCode = (String)ruleSetMap.get("topLevelCode");
                String secondLevelCode =
                    (String)ruleSetMap.get("secondLevelCode");
                String error = (String)ruleSetMap.get("error");
                if (error != null && error.equalsIgnoreCase("N")) {
                    if (secondLevelCode != null) {
                        secondLevelCode = secondLevelCode.toUpperCase();
                    }
                    cRow.setAttribute("TopLevelCode", topLevelCode);
                    cRow.setAttribute("SecondLevelCode", secondLevelCode);
                    RuleSetVORowImpl rwImpl =
                        (RuleSetVORowImpl)ruleSetVO.getCurrentRow();
                    String secondLevelMeaning =
                        rwImpl.retrieveSecLevelMeaning(secondLevelCode);
                    System.out.println("From AM Impl second level meaning " +
                                       secondLevelMeaning);
                    cRow.setAttribute("SecondLevelMeaning",
                                      secondLevelMeaning);
                }

                ruleSetVO.setCurrentRow(cRow);
            }
        }
    }


    public String callDuplicateQuoteAPI(String quoteFromSesion, int respId,
                                        int usrId) {
        //               String quoteFromSesion =
        //                   (String)ADFContext.getCurrent().getSessionScope().get("quoteNumber");
        String returnval = null;
        if (quoteFromSesion != null) {
            quoteFromSesion = quoteFromSesion.trim();
            int quoteNum = Integer.parseInt(quoteFromSesion);
            //            HttpSession sessionADF = request.getSession();
            CallableStatement cs = null;
            StringBuilder errorMsg = new StringBuilder("<html><body>");
            String returnMessage = "";
            String returnStatus = "";

            String stmt = "apps.XXAT_ASO_QUOTE_PKG.copy_quote(:1,:2,:3,:4,:5)";
            try {
                cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);

                if (quoteFromSesion != null) {
                    cs.setInt(1, quoteNum);
                } else {
                    errorMsg.append("<p><b> Quote Number is required.</b></p>");
                }
                cs.setInt(2, respId);
                cs.setInt(3, usrId);
                cs.registerOutParameter(4, Types.VARCHAR);
                cs.registerOutParameter(5, Types.VARCHAR);
                errorMsg.append("</body></html>");
                //                                   String err = "<html><body></body></html>";
                if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
                    cs.executeUpdate();
                    returnStatus = cs.getString(4);
                    returnMessage = cs.getString(5);
                    if (returnMessage != null)
                        System.out.println("return Message is:" +
                                           returnMessage + " ::msg::");
                }
            } catch (SQLException e) {
                errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
                //                e.printStackTrace();
            } finally {
                try {
                    if (cs != null)
                        cs.close();
                } catch (SQLException s) {
                    errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                    //                    s.printStackTrace();
                }
            }

            if (errorMsg.toString() != null &&
                !"<html><body></body></html>".equals(errorMsg.toString()))
                returnval = errorMsg.toString();
            else {
                if (returnStatus != null && returnMessage != null) {
                    returnStatus =
                            returnStatus.concat("-").concat(returnMessage);
                    returnval = returnStatus;
                } else
                    returnval = "Getting Error From API";
            }

        }
        return returnval;
    }


    public String callConfigLineToUpdateQuoteAPI(String quoteNum,
                                                 String quoteLineNum,
                                                 int itemQty,
                                                 String ConfighdrId,
                                                 String configRevNum,
                                                 int respId, int usrId) {
        Integer lineNum = null;
        if (quoteLineNum != null) {
            lineNum = Integer.parseInt(quoteLineNum);
        }

        CallableStatement cs = null;
        String returnval = null;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String returnMessage = "";
        String returnStatus = "";
        String stmt =
            "XXAT_ASO_QUOTE_PKG.Update_Configue_Line_To_Quote(:1,:2,:3,:4,:5,:6,:7,:8,:9)";
        try {
            cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);
            if (quoteNum != null)
                cs.setString(1, quoteNum);
            else
                errorMsg.append("<p><b> Quote Number is Missing.</b></p>");
            if (lineNum != null)
                cs.setInt(2, lineNum);
            else
                errorMsg.append("<p><b> Quote Line Number from configure line is Missing.</b></p>");
            if (itemQty > 0)
                cs.setInt(3, itemQty);
            else
                cs.setNull(3, java.sql.Types.NULL);
            if (ConfighdrId != null)
                cs.setString(4, ConfighdrId);
            else
                errorMsg.append("<p><b> Configurator header id from Configurator line is Missing.</b></p>");
            //                cs.setString(4, null);
            if (configRevNum != null)
                cs.setString(5, configRevNum);
            else
                errorMsg.append("<p><b> Configurator reverse number from Configurator line is Missing.</b></p>");
            //                cs.setString(5, null);
            cs.setInt(6, respId);
            cs.setInt(7, usrId);
            cs.registerOutParameter(8, Types.VARCHAR);
            cs.registerOutParameter(9, Types.VARCHAR);
            errorMsg.append("</body></html>");
            if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
                cs.executeUpdate();
                returnStatus = cs.getString(8);
                returnMessage = cs.getString(9);
                if (returnMessage != null) {
                    //                    System.out.println("return Message from update:" +
                    //                                       returnMessage);
                }
            }

        } catch (Exception e) {
            errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
            //            e.printStackTrace();
        } finally {
            try {
                if (cs != null)
                    cs.close();
            } catch (SQLException s) {
                errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                //                s.printStackTrace();
            }
        }
        if (errorMsg.toString() != null &&
            !"<html><body></body></html>".equals(errorMsg.toString()))
            returnval = errorMsg.toString();
        else {
            if (returnStatus != null && returnMessage != null) {
                returnStatus = returnStatus.concat("-").concat(returnMessage);
                returnval = returnStatus;
            } else
                returnval = "API Error";
        }
        return returnval;
    }


    public String callUpdateDiscountAPI(String quoteNum, String discount,
                                        int respId, int usrId) {

        CallableStatement cs = null;
        String returnval = null;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String returnMessage = "";
        String returnStatus = "";
        String stmt =
            "   XXAT_ASO_QUOTE_PKG.Update_Discount(:1,:2,:3,:4,:5,:6)";
        try {
            cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);
            if (quoteNum != null) {
                quoteNum = quoteNum.trim();
                cs.setString(1, quoteNum);
            } else
                errorMsg.append("<p><b> Quote Number is Missing.</b></p>");
            if (discount != null)
                cs.setString(2, discount);
            else
                errorMsg.append("<p><b> Discount Amount is Missing.</b></p>");

            cs.setInt(3, respId);
            cs.setInt(4, usrId);
            cs.registerOutParameter(5, Types.VARCHAR);
            cs.registerOutParameter(6, Types.VARCHAR);
            errorMsg.append("</body></html>");
            if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
                cs.executeUpdate();
                returnStatus = cs.getString(5);
                returnMessage = cs.getString(6);
            }
        } catch (Exception e) {
            errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
            //                e.printStackTrace();
        } finally {
            try {
                if (cs != null)
                    cs.close();
            } catch (SQLException s) {
                errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                //                    s.printStackTrace();
            }
        }
        if (errorMsg.toString() != null &&
            !"<html><body></body></html>".equals(errorMsg.toString()))
            returnval = errorMsg.toString();
        else {
            if (returnStatus != null && returnMessage != null) {
                returnStatus = returnStatus.concat("-").concat(returnMessage);
                returnval = returnStatus;
            } else
                returnval = "API Error";
        }
        return returnval;
    }


    public String callConfigLineToAddQuoteAPI(String quoteNum,
                                              String itemNumber, int itemQty,
                                              String orgNum,
                                              String ConfighdrId,
                                              String configRevNum, int respId,
                                              int usrId) {
        orgNum = "GDO";
        CallableStatement cs = null;
        String returnval = null;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String returnMessage = "";
        String returnStatus = "";
        String stmt =
            "XXAT_ASO_QUOTE_PKG.Add_Configue_Line_To_Quote(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10)";
        try {
            cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);
            if (quoteNum != null) {
                quoteNum = quoteNum.trim();
                cs.setString(1, quoteNum);
            } else
                errorMsg.append("<p><b> Quote Number is Missing.</b></p>");
            if (itemNumber != null)
                cs.setString(2, itemNumber);
            else
                errorMsg.append("<p><b> Item Number from Configurator line is Missing.</b></p>");
            //                cs.setString(2, null);
            if (itemQty > 0)
                cs.setInt(3, itemQty);
            else
                cs.setNull(3, java.sql.Types.NULL);
            if (orgNum != null)
                cs.setString(4, orgNum);
            else
                cs.setString(4, null);
            if (ConfighdrId != null)
                cs.setString(5, ConfighdrId);
            else
                errorMsg.append("<p><b> Configurator header id from Configurator line is Missing.</b></p>");
            //                cs.setString(5, null);
            if (configRevNum != null)
                cs.setString(6, configRevNum);
            else
                errorMsg.append("<p><b> Configurator reverse Number from Configurator line is Missing.</b></p>");
            //                cs.setString(6, null);
            cs.setInt(7, respId);
            cs.setInt(8, usrId);
            cs.registerOutParameter(9, Types.VARCHAR);
            cs.registerOutParameter(10, Types.VARCHAR);
            errorMsg.append("</body></html>");
            if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
                cs.executeUpdate();
                returnStatus = cs.getString(9);
                returnMessage = cs.getString(10);
            }
        } catch (Exception e) {
            errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
            //            e.printStackTrace();
        } finally {
            try {
                if (cs != null)
                    cs.close();
            } catch (SQLException s) {
                errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                //                s.printStackTrace();
            }
        }
        if (errorMsg.toString() != null &&
            !"<html><body></body></html>".equals(errorMsg.toString()))
            returnval = errorMsg.toString();
        else {
            if (returnStatus != null && returnMessage != null) {
                returnStatus = returnStatus.concat("-").concat(returnMessage);
                returnval = returnStatus;
            } else
                returnval = "API Error";
        }
        return returnval;
    }


    public String callWarrentyAPI(String quoteNum, String prodName, int respId,
                                  int usrId) {
        String returnval = null;
        if (quoteNum != null) {
            CallableStatement cs = null;
            StringBuilder errorMsg = new StringBuilder("<html><body>");
            String returnMessage = "";
            String returnStatus = "";
            quoteNum = quoteNum.trim();
            System.out.println("quoteNum:" + quoteNum + "prodName::" +
                               prodName + "respId:" + respId + "usrId:" +
                               usrId);

            String stmt =
                "apps.XXAT_ASO_QUOTE_PKG.Add_warranty(:1,:2,:3,:4,:5,:6)";
            try {
                cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);

                if (quoteNum != null) {
                    cs.setString(1, quoteNum);
                } else {
                    errorMsg.append("<p><b> Quote Number is required.</b></p>");
                }
                if (prodName != null) {
                    cs.setString(2, prodName);
                } else {
                    errorMsg.append("<p><b> Product Name is required.</b></p>");
                }
                cs.setInt(3, respId);
                cs.setInt(4, usrId);
                cs.registerOutParameter(5, Types.VARCHAR);
                cs.registerOutParameter(6, Types.VARCHAR);
                errorMsg.append("</body></html>");
                if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
                    cs.executeUpdate();
                    returnStatus = cs.getString(5);
                    returnMessage = cs.getString(6);
                    if (returnMessage != null)
                        System.out.println("return Message is:" +
                                           returnMessage + " ::msg::");
                }
            } catch (SQLException e) {
                errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
                //                returnMessage = e.getMessage();
            } finally {
                try {
                    if (cs != null)
                        cs.close();
                } catch (SQLException s) {
                    errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                    //                    s.printStackTrace();
                }
            }

            if (errorMsg.toString() != null &&
                !"<html><body></body></html>".equals(errorMsg.toString()))
                returnval = errorMsg.toString();
            else if (returnStatus != null) {
                if (returnStatus != null && returnMessage != null) {
                    returnStatus =
                            returnStatus.concat("-").concat(returnMessage);
                    returnval = returnStatus;
                } else
                    returnval = "API Error";
            }

        }
        return returnval;
    }

    public String getFNDMsges(String msgName) {
        String msgText = null;
        if (msgName != null && !"".equalsIgnoreCase(msgName)) {
            Object[] obj = { msgName };
            Key key = new Key(obj);
            Row[] rows = this.getFndNewMessagesVO().findByKey(key, 1);
            if (rows != null && rows.length > 0)
                msgText = (String)rows[0].getAttribute("MessageText");
        }
        return msgText;
    }


    /**
     * Container's getter for FileUpdDwnEOView1.
     * @return FileUpdDwnEOView1
     */
    public ViewObjectImpl getFileUpdDwnEOView1() {
        return (ViewObjectImpl)findViewObject("FileUpdDwnEOView1");
    }

    /**
     * Container's getter for NodeCategoryVO1.
     * @return NodeCategoryVO1
     */
    public ViewObjectImpl getNodeCategoryVO1() {
        return (ViewObjectImpl)findViewObject("NodeCategoryVO1");
    }

    @Override
    public void prepareSession(SessionData sessionData) {
        super.prepareSession(sessionData);
    }

    /**
     * Container's getter for QuotesVO1.
     * @return QuotesVO1
     */
    public ViewObjectImpl getQuotesVO() {
        return (ViewObjectImpl)findViewObject("QuotesVO");
    }

    /**
     * Container's getter for CustomerFaxNumForQuoteVO.
     * @return CustomerFaxNumForQuoteVO
     */
    public ViewObjectImpl getCustomerFaxNumForQuoteVO() {
        return (ViewObjectImpl)findViewObject("CustomerFaxNumForQuoteVO");
    }

    /**
     * Container's getter for QuoteSearchVO1.
     * @return QuoteSearchVO1
     */
    public ViewObjectImpl getQuoteSearchVO() {
        return (ViewObjectImpl)findViewObject("QuoteSearchVO");
    }

    /**
     * Container's getter for QuoteSearchTabVO1.
     * @return QuoteSearchTabVO1
     */
    public ViewObjectImpl getQuoteSearchTabVO() {
        return (ViewObjectImpl)findViewObject("QuoteSearchTabVO");
    }

    /**
     * Container's getter for ImportSourceVO1.
     * @return ImportSourceVO1
     */
    public ViewObjectImpl getImportSourceVO1() {
        return (ViewObjectImpl)findViewObject("ImportSourceVO1");
    }

    /**
     * Container's getter for QuoteUpdateVO1.
     * @return QuoteUpdateVO1
     */
    public ViewObjectImpl getQuoteUpdateVO1() {
        return (ViewObjectImpl)findViewObject("QuoteUpdateVO1");
    }

    /**
     * Container's getter for SalesRepresentativeVO.
     * @return SalesRepresentativeVO
     */
    public ViewObjectImpl getSalesRepresentativeVO() {
        return (ViewObjectImpl)findViewObject("SalesRepresentativeVO");
    }

    /**
     * Container's getter for CustomerSupportRepresentVO.
     * @return CustomerSupportRepresentVO
     */
    public ViewObjectImpl getCustomerSupportRepresentVO() {
        return (ViewObjectImpl)findViewObject("CustomerSupportRepresentVO");
    }

    /**
     * Container's getter for PaymentTermsVO.
     * @return PaymentTermsVO
     */
    public ViewObjectImpl getPaymentTermsVO() {
        return (ViewObjectImpl)findViewObject("PaymentTermsVO");
    }

    /**
     * Container's getter for RuleSetBaseVO1.
     * @return RuleSetBaseVO1
     */
    public ViewObjectImpl getRuleSetBaseVO1() {
        return (ViewObjectImpl)findViewObject("RuleSetBaseVO1");
    }

    /**
     * Container's getter for RuleSetVO1.
     * @return RuleSetVO1
     */
    public ViewObjectImpl getRuleSetVO1() {
        return (ViewObjectImpl)findViewObject("RuleSetVO1");
    }

    /**
     * Container's getter for OUVO1.
     * @return OUVO1
     */
    public ViewObjectImpl getOUVO() {
        return (ViewObjectImpl)findViewObject("OUVO");
    }


    /**
     * Container's getter for CustomerNumberVO1.
     * @return CustomerNumberVO1
     */
    public ViewObjectImpl getCustomerNumberVO() {
        return (ViewObjectImpl)findViewObject("CustomerNumberVO");
    }

    public void getQuoteCustmerAddress() {

    }

    /**
     * Container's getter for CustomerNameVO1.
     * @return CustomerNameVO1
     */
    public ViewObjectImpl getCustomerNameVO() {
        return (ViewObjectImpl)findViewObject("CustomerNameVO");
    }

    /**
     * Container's getter for IncoTermVO.
     * @return IncoTermVO
     */
    public ViewObjectImpl getIncoTermVO() {
        return (ViewObjectImpl)findViewObject("IncoTermVO");
    }

    /**
     * Container's getter for PrimarySalesRepVO.
     * @return PrimarySalesRepVO
     */
    public ViewObjectImpl getPrimarySalesRepVO() {
        return (ViewObjectImpl)findViewObject("PrimarySalesRepVO");
    }


    /**
     * Container's getter for QuoteExportVO1.
     * @return QuoteExportVO1
     */
    public ViewObjectImpl getQuoteExportVO1() {
        return (ViewObjectImpl)findViewObject("QuoteExportVO1");
    }

    /**
     * Container's getter for CurrencyVO1.
     * @return CurrencyVO1
     */
    public ViewObjectImpl getCurrencyVO() {
        return (ViewObjectImpl)findViewObject("CurrencyVO");
    }

    /**
     * Container's getter for SalesChannelVO.
     * @return SalesChannelVO
     */
    public ViewObjectImpl getSalesChannelVO() {
        return (ViewObjectImpl)findViewObject("SalesChannelVO");
    }

    /**
     * Container's getter for businessAgreementVo.
     * @return businessAgreementVo
     */
    public ViewObjectImpl getbusinessAgreementVo() {
        return (ViewObjectImpl)findViewObject("businessAgreementVo");
    }

    /**
     * Container's getter for PriceListVO.
     * @return PriceListVO
     */
    public ViewObjectImpl getPriceListVO() {
        return (ViewObjectImpl)findViewObject("PriceListVO");
    }

    /**
     * Container's getter for OrderTypeVO.
     * @return OrderTypeVO
     */
    public ViewObjectImpl getOrderTypeVO() {
        return (ViewObjectImpl)findViewObject("OrderTypeVO");
    }


    /**
     * Container's getter for FndNewMessagesVO.
     * @return FndNewMessagesVO
     */
    public ViewObjectImpl getFndNewMessagesVO() {
        return (ViewObjectImpl)findViewObject("FndNewMessagesVO");
    }

    /**
     * Container's getter for RuleSetVO.
     * @return RuleSetVO
     */
    public ViewObjectImpl getRuleSetVO() {
        return (ViewObjectImpl)findViewObject("RuleSetVO");
    }

    public void initConfiguratorRuleSet() {
    }

    public Hashtable getUiGrpMap() {
        Hashtable<String, String> uiGrpMap = new Hashtable<String, String>();
        ViewObjectImpl uiGrpVO = this.getUIGroupsVO();
        if (uiGrpVO != null) {
            uiGrpVO.executeQuery();
            RowSetIterator rsi = uiGrpVO.createRowSetIterator(null);
            if (rsi != null) {
                while (rsi.hasNext()) {
                    Row r = rsi.next();
                    if (r != null) {
                        uiGrpMap.put((String)r.getAttribute("UiIndex"),
                                     (String)r.getAttribute("AdfUiCategory"));
                    }
                }
            }
        }
        ADFContext.getCurrent().getSessionScope().put("uiGrpMap", uiGrpMap);
        return uiGrpMap;
    }

    public Map<String, String> getQuoteHdrOrgID(String pquoteNo) {
        DBTransaction trans = this.getDBTransaction();

        String QuoteHid = null;
        String OrgId = null;
        HashMap<String, String> QuoteHdrOrgMap = new HashMap<String, String>();
        try {


            String sql =
                "Select QUOTE_HEADER_ID,ORG_ID from ASO_QUOTE_HEADERS_ALL where QUOTE_NUMBER=" +
                pquoteNo;

            PreparedStatement ps = trans.createPreparedStatement(sql, 0);
            ResultSet rs = ps.executeQuery();
            rs.next();


            QuoteHid = rs.getString(1);
            OrgId = rs.getString(2);
            _logger.info("print OrgId in AM" + OrgId);
            QuoteHdrOrgMap.put("vQuoteHid", QuoteHid);
            QuoteHdrOrgMap.put("vOrgId", OrgId);


        } catch (Exception e) {
            e.printStackTrace();
        }


        return QuoteHdrOrgMap;
    }


    /**
     * Container's getter for UIGroupsVO1.
     * @return UIGroupsVO1
     */
    public ViewObjectImpl getUIGroupsVO() {
        return (ViewObjectImpl)findViewObject("UIGroupsVO");
    }


    /**
     * Container's getter for CFDReportVO1.
     * @return CFDReportVO1
     */
    public CFDReportVOImpl getCFDReportVO1() {
        return (CFDReportVOImpl)findViewObject("CFDReportVO1");
    }

    /**
     * Container's getter for XXATGlobalDirRVO1.
     * @return XXATGlobalDirRVO1
     */
    public XXATGlobalDirRVOImpl getXXATGlobalDirRVO1() {
        return (XXATGlobalDirRVOImpl)findViewObject("XXATGlobalDirRVO1");
    }
}
