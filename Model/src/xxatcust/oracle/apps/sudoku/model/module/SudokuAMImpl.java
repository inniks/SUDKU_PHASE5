package xxatcust.oracle.apps.sudoku.model.module;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.apps.fnd.ext.common.AppsRequestWrapper;
import oracle.apps.fnd.ext.common.CookieStatus;
import oracle.apps.fnd.ext.common.EBiz;
import oracle.apps.fnd.ext.common.Session;

import oracle.jbo.AttributeDef;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.SessionData;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;

import xxatcust.oracle.apps.sudoku.model.module.common.SudokuAM;
import xxatcust.oracle.apps.sudoku.model.readonlyvo.CFDReportVOImpl;
import xxatcust.oracle.apps.sudoku.model.readonlyvo.QuotesVORowImpl;
import xxatcust.oracle.apps.sudoku.model.readonlyvo.RuleSetVORowImpl;
import xxatcust.oracle.apps.sudoku.model.readonlyvo.XXATGlobalDirRVOImpl;
import xxatcust.oracle.apps.sudoku.model.util.SudokuUtils;
import xxatcust.oracle.apps.sudoku.model.views.QuoteUpdateVORowImpl;


//import xxatcust.oracle.apps.sudoku.model.readonlyvo.QuotesVOImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 24 16:53:17 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SudokuAMImpl extends ApplicationModuleImpl implements SudokuAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SudokuAMImpl() {
    }
    static String url = null;
    private static ADFLogger _logger =
        ADFLogger.createADFLogger(SudokuAMImpl.class);
    AppsRequestWrapper wrappedRequest = null;
    HttpServletRequest request;
    Session appsSession = null;


    public Session getAppsSession() {
        return appsSession;
    }

    public String getCurrentUrl() {

        String currentUrlName = "";
        DBTransaction trans = getDBTransaction();
        Statement statement = null;
        ResultSet rows = null;
        String plsql =
            "select replace(HOME_URL,'AppsLogin') home_url from icx_parameters";

        statement = trans.createStatement(2);
        try {
            rows = statement.executeQuery(plsql);
            while (rows.next()) {
                currentUrlName = rows.getString("home_url");
            }
        } catch (Exception obj) {
            obj.printStackTrace();
        } finally {
            try {
                if (rows != null) {
                    rows.close();
                }
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
        return currentUrlName;

    }

    public String getWrappedRequestAgent() {
        String agent = wrappedRequest.getEbizInstance().getAppsServletAgent();
        return agent;
    }

    private Connection getCurrentConnection() {
        Statement st = null;
        try {
            st = this.getDBTransaction().createStatement(0);
            return st.getConnection();
        } catch (SQLException s) {
            s.printStackTrace();
            return null;
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException s2) {
                    _logger.info("HSOEOrderStatusAMImpl : getCurrentConnection-3 : 11111");
                    ;
                }
            }
        }
    }

    private String getApplServerId() {
        ServletContext servContext =
            (ServletContext)ADFContext.getCurrent().getEnvironment().getContext();
        String applServerId = servContext.getInitParameter("APPL_SERVER_ID");

        return applServerId;
    }


    public boolean checkEBSSession(HttpServletRequest request,
                                   HttpServletResponse response) {
        try {

            CookieStatus icxCookieStatus = null;
            Connection EBSconn = this.getCurrentConnection();
            EBiz instance = new EBiz(EBSconn, this.getApplServerId());
            _logger.info("Bundle AMimp: print ApplServerId " +
                         this.getApplServerId());
            _logger.info("Bundle AMimp: print instance " + instance);
            wrappedRequest =
                    new AppsRequestWrapper(request, response, EBSconn, instance);
            appsSession = wrappedRequest.getAppsSession();
            _logger.info("Bundle AMimp: print appsSession " + appsSession);

            icxCookieStatus =
                    appsSession.getCurrentState().getIcxCookieStatus();
            _logger.info("Bundle AMimp: print icxCookieStatus " +
                         icxCookieStatus);
            response.addHeader("X-UA-Compatible", "IE=EmulateIE9");

            if (!icxCookieStatus.equals(CookieStatus.VALID)) {
                return false;
            }
        } catch (Exception ob) {
            ob.printStackTrace();
            return false;
        }

        return true;
    }

    public Hashtable<String, String> getNodeCategoryMap() {
        ViewObjectImpl nodeCategoryVO = this.getNodeCategoryVO1();
        nodeCategoryVO.executeQuery();
        RowSetIterator rsi = nodeCategoryVO.createRowSetIterator(null);
        Hashtable<String, String> nodeCategoryMap =
            new Hashtable<String, String>();
        while (rsi.hasNext()) {
            Row currRow = rsi.getCurrentRow();
            if (currRow != null && currRow.getAttribute("Segment1") != null &&
                currRow.getAttribute("Attribute7") != null) {
                nodeCategoryMap.put((String)currRow.getAttribute("Segment1"),
                                    (String)currRow.getAttribute("Attribute7"));
            }
        }
        rsi.closeRowSetIterator();
        return nodeCategoryMap;
    }

    //    public void callGlobalpackage(){
    //        CallableStatement  cs = getDBTransaction().createCallableStatement("fnd_global.set_nls_context('AMERICAN')", 0);
    //
    //        if(cs !=null){
    //            try {
    //                cs.execute();
    //            } catch (SQLException e) {
    //                e.printStackTrace();
    //            }
    //            finally{
    //                if(cs!=null){
    //                    try{
    //                    cs.close();
    //                    }
    //                    catch(Exception e){
    //                        e.printStackTrace();
    //                        }
    //                    }
    //                }
    //        }
    //
    //
    //        }

    String query = "SELECT hca.cust_account_id,\n" +
        "  hca.account_number,\n" +
        "  hz.party_id,\n" +
        "  hz.party_name,\n" +
        "  hz_format_pub.format_address(hl.location_id, NULL, NULL, ', ', NULL, NULL,NULL, NULL) AS cur_address\n" +
        "FROM hz_parties hz,\n" +
        "  hz_party_sites ps,\n" +
        "  hz_party_site_uses psu,\n" +
        "  hz_cust_accounts_all hca,\n" +
        "  hz_locations hl,\n" +
        "  ar_lookups al\n" +
        "WHERE hca.account_number = ? --IN('100595', '97369', '154409' ,'10136')\n" +
        "AND hca.party_id          = hz.party_id\n" +
        "AND hz.party_id           = ps.party_id\n" +
        "AND psu.party_site_id     = ps.party_site_id\n" +
        "AND psu.status            = 'A'\n" +
        "AND al.lookup_type        = 'PARTY_SITE_USE_CODE'\n" +
        "AND al.lookup_code        = psu.SITE_USE_TYPE\n" +
        "AND psu.site_use_type     = ? --use 'BILL_TO' to get bill to address\n" +
        "AND psu.primary_per_type  = 'Y'\n" +
        "AND ps.location_id        = hl.location_id";


    //    String query = "SELECT \n" +
    //        "  hzsu.site_use_id   SITE_USE_ID,\n" +
    //        "  hzl.address1||DECODE(hzl.address2,\n" +
    //        "  NULL,\n" +
    //        "  NULL,\n" +
    //        "  ',\n" +
    //        "  '||hzl.address2)||',\n" +
    //        "  '||hzl.city||',\n" +
    //        "  '||hzl.STATE||',\n" +
    //        "  '||hzl.postal_code LOCATION,\n" +
    //        "  hzp.party_id,\n" +
    //        "  hzp.PARTY_NAME\n" +
    //        "FROM \n" +
    //        "  hz_parties hzp,\n" +
    //        "  hz_cust_accounts hza,\n" +
    //        "  hz_cust_acct_sites_all hzas,\n" +
    //        "  hz_cust_site_uses_all hzsu,\n" +
    //        "  hz_party_sites hzps,\n" +
    //        "  hz_locations hzl\n" +
    //        "WHERE \n" +
    //        "hzp.party_id = ?    and\n" +
    //        "  hza.party_id = hzp.party_id      AND\n" +
    //        "  hzas.cust_account_id = hza.cust_account_id      --AND\n" +
    //        "  and hzps.party_site_id = hzas.party_site_id      AND\n" +
    //        "  hzl.location_id = hzps.location_id      AND\n" +
    //        "  hzsu.site_use_code = ?      AND\n" +
    //        "  hzsu.PRIMARY_FLAG='Y' AND\n" +
    //        "  hzsu.ORG_ID=? AND\n" +
    //        "  hzsu.cust_acct_site_id = hzas.cust_acct_site_id AND\n" +
    //        "  hzsu.org_id = hzas.org_id\n ";


    public void getQuoteCustmerAddress(Row curRow) {
        String shipTo = "";
        String quoteTo = "";
        String custNumber = null;
        //        BigDecimal orgid = null;
        ViewObjectImpl quoteVO = null;
        Row row = null;
        PreparedStatement cs = null, cs1 = null;
        if (curRow != null) {
            if ((String)curRow.getAttribute("CustNum") != null) {
                custNumber = (String)curRow.getAttribute("CustNum");
                //                orgid = (BigDecimal)curRow.getAttribute("OrgId");
            }
        } else {
            quoteVO = this.getQuotesVO();
            if (quoteVO != null) {
                row = quoteVO.getCurrentRow();
                if (row != null) {
                    custNumber = (String)row.getAttribute("CustNum");
                    //                    orgid = (BigDecimal)row.getAttribute("OrgId");
                }
            }
        }
        try {
            cs = this.getDBTransaction().createPreparedStatement(query, 0);
            cs.setString(1, custNumber);
            cs.setString(2, "BILL_TO");

            //            cs.setBigDecimal(3, orgid);

            ResultSet rs = cs.executeQuery();
            while (rs.next()) {

                quoteTo = rs.getString(5);
            }
            cs1 = this.getDBTransaction().createPreparedStatement(query, 0);
            cs1.setString(1, custNumber);
            cs1.setString(2, "SHIP_TO");
            //            cs1.setBigDecimal(3, orgid);
            ResultSet rs1 = cs1.executeQuery();
            while (rs1.next()) {
                shipTo = rs1.getString(5);
            }
            if (curRow != null) {
                curRow.setAttribute("QuoteTo", quoteTo);
                curRow.setAttribute("ShipTo", shipTo);
            }
            if (row != null) {
                row.setAttribute("QuoteTo", quoteTo);
                row.setAttribute("ShipTo", shipTo);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                    if (cs1 != null) {
                        cs1.close();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }
    }

    public void getQuoteCustmerAddressOnCustNumChange(String custNum) {
        String shipTo = "";
        String quoteTo = "";
        ViewObjectImpl quoteVO = null;
        Row row = null;
        PreparedStatement cs = null, cs1 = null;

        quoteVO = this.getQuotesVO();
        if (quoteVO != null) {
            row = quoteVO.getCurrentRow();
        }
        try {
            cs = this.getDBTransaction().createPreparedStatement(query, 0);
            cs.setString(1, custNum);
            cs.setString(2, "BILL_TO");

            ResultSet rs = cs.executeQuery();
            while (rs.next()) {

                quoteTo = rs.getString(5);
            }
            cs1 = this.getDBTransaction().createPreparedStatement(query, 0);
            cs1.setString(1, custNum);
            cs1.setString(2, "SHIP_TO");
            ResultSet rs1 = cs1.executeQuery();
            while (rs1.next()) {
                shipTo = rs1.getString(5);
            }
            if (row != null) {
                row.setAttribute("QuoteTo", quoteTo);
                row.setAttribute("ShipTo", shipTo);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                    if (cs1 != null) {
                        cs1.close();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }
    }

    public void getQuoteCustmerAddressOnCustNumForUpdateQuoteChange(String custNum) {
        String shipTo = "";
        String quoteTo = "";
        ViewObjectImpl quoteVO = null;
        Row row = null;
        PreparedStatement cs = null, cs1 = null;

        quoteVO = this.getQuoteUpdateVO1();
        if (quoteVO != null) {
            row = quoteVO.getCurrentRow();
        }
        try {
            cs = this.getDBTransaction().createPreparedStatement(query, 0);
            cs.setString(1, custNum);
            cs.setString(2, "BILL_TO");

            ResultSet rs = cs.executeQuery();
            while (rs.next()) {

                quoteTo = rs.getString(5);
            }
            cs1 = this.getDBTransaction().createPreparedStatement(query, 0);
            cs1.setString(1, custNum);
            cs1.setString(2, "SHIP_TO");
            //            cs1.setBigDecimal(3, orgid);
            ResultSet rs1 = cs1.executeQuery();
            while (rs1.next()) {
                shipTo = rs1.getString(5);
            }
            if (row != null) {
                row.setAttribute("QuoteTo", quoteTo);
                row.setAttribute("ShipTo", shipTo);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                    if (cs1 != null) {
                        cs1.close();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }
    }


    public void getQuoteCustmerAddressOnCustNameForUpdateQuoteChange(String custName) {
        String shipTo = "";
        String quoteTo = "";
        String custNumber = null;
        BigDecimal orgId = null;
        ViewObjectImpl quoteVO = null;
        ViewObjectImpl custVO = this.getCustomerNameVO(); //p_orgId

        Row row = null;
        PreparedStatement cs = null, cs1 = null;
        quoteVO = this.getQuoteUpdateVO1();
        if (quoteVO != null) {
            row = quoteVO.getCurrentRow();
            if (row != null) {
                orgId = (BigDecimal)row.getAttribute("OrgId");
                custVO.clearCache();
                custVO.setWhereClause(null);
                custVO.setNamedWhereClauseParam("p_orgId", null);
                custVO.setNamedWhereClauseParam("p_orgId", orgId);
                custVO.setWhereClause("customername = '" + custName + "'");
                System.out.println(custVO.getQuery());
                custVO.executeQuery();
                RowSetIterator iter = custVO.createRowSetIterator(null);
                while (iter.hasNext()) {
                    Row row1 = iter.next();
                    custNumber = (String)row1.getAttribute("Accountnumber");
                }
            }
        }
        try {
            cs = this.getDBTransaction().createPreparedStatement(query, 0);
            cs.setString(1, custNumber);
            cs.setString(2, "BILL_TO");
            ResultSet rs = cs.executeQuery();
            while (rs.next()) {

                quoteTo = rs.getString(5);
            }
            cs1 = this.getDBTransaction().createPreparedStatement(query, 0);
            cs1.setString(1, custNumber);
            cs1.setString(2, "SHIP_TO");
            ResultSet rs1 = cs1.executeQuery();
            while (rs1.next()) {
                shipTo = rs1.getString(5);
            }
            if (row != null) {
                row.setAttribute("QuoteTo", quoteTo);
                row.setAttribute("ShipTo", shipTo);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                    if (cs1 != null) {
                        cs1.close();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }
    }


    public void getQuoteCustmerAddressOnCustNameChange(String custName) {
        String shipTo = "";
        String quoteTo = "";
        String custNumber = null;
        BigDecimal orgId = null;
        ViewObjectImpl quoteVO = null;
        ViewObjectImpl custVO = this.getCustomerNameVO(); //p_orgId

        Row row = null;
        PreparedStatement cs = null, cs1 = null;
        quoteVO = this.getQuotesVO();
        if (quoteVO != null) {
            row = quoteVO.getCurrentRow();
            if (row != null) {
                orgId = (BigDecimal)row.getAttribute("OrgId");
                custVO.clearCache();
                custVO.setWhereClause(null);
                custVO.setNamedWhereClauseParam("p_orgId", null);
                custVO.setNamedWhereClauseParam("p_orgId", orgId);
                custVO.setWhereClause("customername = '" + custName + "'");
                System.out.println(custVO.getQuery());
                custVO.executeQuery();
                RowSetIterator iter = custVO.createRowSetIterator(null);
                while (iter.hasNext()) {
                    Row row1 = iter.next();
                    custNumber = (String)row1.getAttribute("Accountnumber");
                }
            }
        }
        try {
            cs = this.getDBTransaction().createPreparedStatement(query, 0);
            cs.setString(1, custNumber);
            cs.setString(2, "BILL_TO");

            //            cs.setBigDecimal(3, orgid);

            ResultSet rs = cs.executeQuery();
            while (rs.next()) {

                quoteTo = rs.getString(5);
            }
            cs1 = this.getDBTransaction().createPreparedStatement(query, 0);
            cs1.setString(1, custNumber);
            cs1.setString(2, "SHIP_TO");
            //            cs1.setBigDecimal(3, orgid);
            ResultSet rs1 = cs1.executeQuery();
            while (rs1.next()) {
                shipTo = rs1.getString(5);
            }
            if (row != null) {
                row.setAttribute("QuoteTo", quoteTo);
                row.setAttribute("ShipTo", shipTo);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                    if (cs1 != null) {
                        cs1.close();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }
    }


    public void getQuoteCustmerAddressForUpdateQuote(Row curRow) {
        String shipTo = null;
        String quoteTo = null;
        String custNumber = null;
        PreparedStatement cs = null, cs1 = null;
        if (curRow != null) {
            if ((String)curRow.getAttribute("Customernumber") != null)
                custNumber = (String)curRow.getAttribute("Customernumber");
        }
        if (custNumber != null) {
            try {
                cs = this.getDBTransaction().createPreparedStatement(query, 0);
                cs.setString(1, custNumber);
                cs.setString(2, "BILL_TO");
                ResultSet rs = cs.executeQuery();
                while (rs.next()) {
                    quoteTo = rs.getString(5);
                }
                cs1 =
this.getDBTransaction().createPreparedStatement(query, 0);
                cs1.setString(1, custNumber);
                cs1.setString(2, "SHIP_TO");
                ResultSet rs1 = cs1.executeQuery();
                while (rs1.next()) {
                    shipTo = rs1.getString(5);
                }
                if (curRow != null) {
                    curRow.setAttribute("QuoteTo", quoteTo);
                    curRow.setAttribute("ShipTo", shipTo);
                }

            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (cs != null) {
                    try {
                        cs.close();
                        if (cs1 != null) {
                            cs1.close();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

            }
        } else {
            curRow.setAttribute("QuoteTo", null);
            curRow.setAttribute("ShipTo", null);
        }
    }


    public String callQuoteAPI(int respid, int usrId) {
        ViewObjectImpl quoteVO = this.getQuotesVO();
        String returnval = null;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String returnMessage = "";
        String returnConfrmMsg = "";
        //        callGlobalpackage();
        //        DBTransaction dbTrans = (DBTransaction)this.getTransaction();
        if (quoteVO != null) {
            Row quoteVORow = quoteVO.getCurrentRow();
            if (quoteVORow != null) {
                CallableStatement cs = null;
                String stmt =
                    "apps.XXAT_ASO_QUOTE_PKG.create_quote_hdr(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18,:19,:20,:21,:22)";
    
                try {
                    //            cs = dbTrans.createCallableStatement(("BEGIN xxat_quote_create_pkg.create_quote_hdr(?,?,?,?,?,?,?,?,?,?,?,?"+
                    //                                                                             ");" + "END;"), 12);
    
    
                    cs =
    this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);
    
                    if (quoteVORow.getAttribute("OrganizationUnit") != null) {
                        cs.setString(1,
                                     quoteVORow.getAttribute("OrganizationUnit").toString());
                    } else {
                        errorMsg.append("<p><b>Organization Unit is required.</b></p>");
                    }
                    
                    String custName = null;
                    custName =(String)quoteVORow.getAttribute("CustomerName");
                    if(custName !=null){
                            cs.setString(2, "Quote For " + custName);
                            quoteVORow.setAttribute("QuoteDescription",
                                                    "Quote For " + custName);
                        }
                    else{
                            cs.setString(2,
                                         quoteVORow.getAttribute("QuoteDescription").toString());
                        }
//                    if (quoteVORow.getAttribute("QuoteDescription") != null) {
//                        cs.setString(2,
//                                     quoteVORow.getAttribute("QuoteDescription").toString());
//                    } else {
//                        String custName =
//                            (String)quoteVORow.getAttribute("CustomerName");
//                        if (custName != null) {
//                            cs.setString(2, "Quote For " + custName);
//                            quoteVORow.setAttribute("QuoteDescription",
//                                                    "Quote For " + custName);
//                        }
//                    }
                    if (quoteVORow.getAttribute("CustNum") != null) {
                        cs.setString(3,
                                     quoteVORow.getAttribute("CustNum").toString());
                    } else {
                        errorMsg.append("<p><b>Customer Number is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("OrderType") != null) {
                        cs.setString(4,
                                     quoteVORow.getAttribute("OrderType").toString());
                    } else {
                        errorMsg.append("<p><b>Order Type is required.</b></p>");
                    }
                    //                if(quoteVORow.getAttribute("OrganizationUnit")!=null)
                    if (quoteVORow.getAttribute("PriceList") != null) {
                        cs.setString(5, "Systems Corporate Price List");
                    } else {
                        errorMsg.append("<p><b> Price List is required.</b></p>");
                    }
    
                    if (quoteVORow.getAttribute("SalesChannel") != null) {
                        cs.setString(6,
                                     quoteVORow.getAttribute("SalesChannel").toString());
                        //                        System.out.println("SalesChannel:" +
                        //                                           quoteVORow.getAttribute("SalesChannel").toString());
                    } else {
                        cs.setString(6, null);
                        //                        errorMsg.append("<p><bSales Channel is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("SalesRepresentative") !=
                        null) {
                        cs.setString(7,
                                     quoteVORow.getAttribute("SalesRepresentative").toString());
                        //                        System.out.println("Sales Representative:" +
                        //                                           quoteVORow.getAttribute("SalesRepresentative").toString());
                    } else {
                        errorMsg.append("<p><b>Sales Representative is required.</b></p>");
                    }
                    //                    System.out.println("Payment Terms " +
                    //                                       quoteVORow.getAttribute("PaymentTerms"));
                    if (quoteVORow.getAttribute("PaymentTerms") != null) {
                        cs.setString(8,
                                     quoteVORow.getAttribute("PaymentTerms").toString());
                        //                        System.out.println("PaymentTerms:" +
                        //                                           quoteVORow.getAttribute("PaymentTermsMean").toString());
                    } else {
                        errorMsg.append("<p><b>Payment Terms is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("Currency") != null) {
                        cs.setString(9,
                                     quoteVORow.getAttribute("Currency").toString());
                        //                        System.out.println("Currency:" +
                        //                                           quoteVORow.getAttribute("CurrencyCode").toString());
                    } else {
                        errorMsg.append("<p><b>Currency is required.</b></p>");
                    }
    
                    if (quoteVORow.getAttribute("IncoTerms") != null) {
                        cs.setString(10,
                                     quoteVORow.getAttribute("IncoTerms").toString());
                        //                        System.out.println("IncoTerms:" +
                        //                                           quoteVORow.getAttribute("IncoTermsMeaning").toString());
                    } else {
                        errorMsg.append("<p><b>Inco Terms is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("CustomerSupportRepresent") !=
                        null) {
                        cs.setString(11,
                                     quoteVORow.getAttribute("CustomerSupportRepresent").toString());
                        //                        System.out.println("CustomerSupportRepresent:" +
                        //                                           quoteVORow.getAttribute("CustomerSupportRepresent").toString());
                    } else {
                        cs.setString(11, null);
                        //                        errorMsg.append("<p><b>Organization Unit is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("DealId") != null) {
                        cs.setString(12,
                                     quoteVORow.getAttribute("DealId").toString());
                    } else {
                        cs.setString(12, null);
                        //                        errorMsg.append("<p><b>Deal Id is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("AttentionToOrDept") != null) {
                        cs.setString(13,
                                     quoteVORow.getAttribute("AttentionToOrDept").toString());
                    } else {
                        cs.setString(13, null);
                        //                        errorMsg.append("<p><b>AttentionTo/Dept is required.</b></p>");
                    }
                    if (quoteVORow.getAttribute("QuoteEmail") != null) {
                        cs.setString(14,
                                     quoteVORow.getAttribute("QuoteEmail").toString());
                    } else {
                        cs.setString(14, null);
                        //                        errorMsg.append("<p><b>Email is required.</b></p>");
                    }
                    cs.setInt(15, respid);
                    cs.setInt(16, usrId);
                    if (quoteVORow.getAttribute("BusinessAgreementId") !=
                        null) {
                        cs.setString(17,
                                     quoteVORow.getAttribute("BusinessAgreement").toString());
                        System.out.println("Business Agreeement Val:" +
                                           quoteVORow.getAttribute("BusinessAgreement").toString());
                        //                        System.out.println("CustAccId : " +
                        //                                           quoteVORow.getAttribute("CustAccid"));
                        //                        System.out.println("BusinessAgreement : " +
                        //                                           quoteVORow.getAttribute("BusinessAgreementId"));
                    } else {
                        cs.setString(17, null);
                    }
                    if (quoteVORow.getAttribute("Systemid") != null) {
                        cs.setString(18,
                                     quoteVORow.getAttribute("Systemid").toString());
                    } else {
                        cs.setString(18, null); //Systemid
                    }
    
                    //                    if (quoteVORow.getAttribute("Discount") != null) {
                    //                        cs.setString(19,
                    //                                     quoteVORow.getAttribute("Discount").toString());
                    //                    } else {
                    //                        cs.setString(19, null); //Systemid
                    //                    }
    
                    if (quoteVORow.getAttribute("Page") != null) {
                        cs.setString(19,
                                     quoteVORow.getAttribute("Page").toString());
                    } else {
                        cs.setString(19, null); //Systemid
                    }
                    if (quoteVORow.getAttribute("CustPhoneFax") != null) {
                        cs.setString(20,
                                     quoteVORow.getAttribute("CustPhoneFax").toString());
                    } else
                        cs.setString(20, null); // this is for p_faxphonenum
                    cs.registerOutParameter(21, Types.VARCHAR);
                    cs.registerOutParameter(22, Types.VARCHAR);
                    errorMsg.append("</body></html>");
                    String err = "<html><body></body></html>";
                    if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
                        cs.executeUpdate();
                        returnMessage = cs.getString(22);
                        returnConfrmMsg = cs.getString(21);
                    }
                    if (returnMessage != null &&
                        returnConfrmMsg.contains("S")) {
                        System.out.println("return Message is:" +
                                           returnMessage + " ::msg::");
                        String[] arrOfStr = returnMessage.split(":", 2);
                        quoteVORow.setAttribute("AdvantestQuotationNumber",
                                                arrOfStr[1]);
                    }
                } catch (Exception e) {
                    errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
                    //                    e.printStackTrace();
                } finally {
                    try {
                        if (cs != null)
                            cs.close();
                    } catch (SQLException s) {
                        errorMsg.append("<p><b>" + s.getMessage() +
                                        "</b></p>");
                        //                        s.printStackTrace();
                    }
                }
            }
    
        }
        if (errorMsg.toString() != null &&
            !"<html><body></body></html>".equals(errorMsg.toString())) {
            returnval = errorMsg.toString();
        } else {
            //            String s = "";
            if (returnConfrmMsg != null && returnMessage != null) {
                returnConfrmMsg =
                        returnConfrmMsg.concat("-").concat(returnMessage);
                returnval = returnConfrmMsg;
            } else
                returnval = "Getting Error From API";
        }
        return returnval;
    }


    public String callQuoteAPIOnCreateMode() {
        String returnMessage = "";
        CallableStatement cs = null;
        DBTransaction dbTrans = (DBTransaction)this.getTransaction();
        String stmt =
            "apps.XXAT_ASO_QUOTE_PKG.create_quote_hdr(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18,:19)";
        try {
            cs =
 dbTrans.createCallableStatement(("BEGIN xxat_quote_create_pkg.create_quote_hdr(?,?,?,?,?,?,?,?,?,?,?,?" +
                                  ");" + "END;"), 12);
            cs.setString(1, "USS-OU-8203");
            cs.setString(2, "Test Quote--Nik");
            cs.setString(3, "103413");
            cs.setString(4, "USS-8203 Sales: Trade");
            cs.setString(5, "Systems Corporate Price List");
            cs.setString(6, "AKM");
            cs.setString(7, "No Sales Credit");
            cs.setString(8, "20-280-E-JPY");
            cs.setString(9, "USD");
            cs.setString(10, "DAP");
            cs.setString(11, "Abdul Jamil, Yasmin (Yasmin)");
            cs.setString(12, "1234567");
            cs.setString(13, "Attemtiona to Dept");
            cs.setString(14, "bcdefg@xyz.com");
            cs.setInt(15, 51157);
            cs.setInt(16, 11639);
            cs.setString(17, null);
            cs.setString(18, null);
            cs.registerOutParameter(19, Types.VARCHAR);
            cs.executeUpdate();
            returnMessage = cs.getString(19);
        } catch (Exception e) {
            //returnMessage = e
            e.printStackTrace();
        } finally {
            try {
                if (cs != null)
                    cs.close();
            } catch (SQLException s) {
                s.printStackTrace();
            }
        }
        return returnMessage;
    }


    public void getUpdateQuote() {
        //        System.out.println("getUpdateQuote : start");
        Boolean quoteSessionState = false;
        ViewObjectImpl quoteVO = this.getQuoteUpdateVO1();
        Row row = null;
        if (quoteVO != null) {
            quoteVO.applyViewCriteria(null);
            quoteVO.reset();
            quoteVO.setNamedWhereClauseParam("bindQuoteNum", null);
            String quoteFromSesion = null;
            // (String)ADFContext.getCurrent().getSessionScope().get("quoteNumber");
            if (quoteFromSesion == null) {
                quoteFromSesion =
                        (String)ADFContext.getCurrent().getSessionScope().get("targetQuoteNumber");

            }
            _logger.info("Target Quote in getUpdateQuote " + quoteFromSesion);
            if (ADFContext.getCurrent().getSessionScope().get("isDuplicateQuote") !=
                null)
                quoteSessionState =
                        (Boolean)ADFContext.getCurrent().getSessionScope().get("isDuplicateQuote");
            String duplicateQuoteNum =
                (String)ADFContext.getCurrent().getSessionScope().get("targetQuoteNumber");
            System.out.println("from AMPIML:" + quoteFromSesion);
            if (quoteFromSesion != null) {
                //                Integer quoteNum = Integer.parseInt(quoteFromSesion);
                quoteFromSesion = quoteFromSesion.trim();
//                if (quoteFromSesion.equalsIgnoreCase("")) {
//                    quoteFromSesion = "-1";
//                }
                BigDecimal quoteVal = new BigDecimal(quoteFromSesion);
                //                if (quoteSessionState && duplicateQuoteNum != null) {
                //                    quoteVO.setWhereClause("QUOTE_NUMBER=" +
                //                                           duplicateQuoteNum);
                //                } else
                //                    quoteVO.setWhereClause("QUOTE_NUMBER=" + quoteVal);
                if (quoteFromSesion != null) {
                    quoteVO.setWhereClause("QUOTE_NUMBER=" + quoteVal);
                    _logger.info("In Update Quote Executing with quote Num " +
                                 quoteVal);
                }
                System.out.println("get Query:" + quoteVO.getQuery());

                quoteVO.executeQuery();
                _logger.info("In update quote,query executed and returns " +
                             quoteVO.getEstimatedRowCount() + " Rows");
                System.out.println("after Execution");
                RowSetIterator iter = quoteVO.createRowSetIterator("");

                while (iter.hasNext()) {
                    row = iter.next();
                    quoteVO.setCurrentRow(row);
                }
                String salesChannel = null;
                if(row!=null){
                    salesChannel = (String)row.getAttribute("Saleschannel");
                    }
                QuoteUpdateVORowImpl rowImpl =
                    (QuoteUpdateVORowImpl)quoteVO.getCurrentRow();
                if (rowImpl != null) {
                    rowImpl.getUserBasedCSR();
                    rowImpl.getUserBasedOrderType();
                    if(salesChannel!=null){
                        rowImpl.getSalesChannelBasedBA(salesChannel);
                        rowImpl.getSalesChannelBasedCurrency(salesChannel);
                        rowImpl.getSalesChannelBasedCustomerDetails(salesChannel);
                        rowImpl.getSalesChannelBasedIncoTerm(salesChannel);
                        rowImpl.getSalesChannelBasedPaymentTerm(salesChannel);
                        }
                    else{
                            rowImpl.getUserBasedCurrency();
                            rowImpl.getUserBasedIncoTerm();
                        }
                   
                    rowImpl.getUserBasedSalesChannel();
                    rowImpl.getUserBasedSalesRep();
                }
                getSalesRepDetails(row);
                getCustSupportRepDetails(row);
                getUpdateQuoteCustmerAddress(row);
                iter.closeRowSetIterator();


            } else {
                //exec empty row set . ideally shud have been create mode
            }
        }
    }

    public String getQuoteNum(String headerid) {
        System.out.println("headerId" + headerid);
        headerid = headerid.replaceAll("\\s", "");
        String quoteNum = "";

        if (headerid != null) {
            ViewObjectImpl quoteVO = this.getQuoteUpdateVO1();
            Row row = null;
            if (quoteVO != null) {
                quoteVO.reset();
                //                        int hderid = Integer.parseInt(headerid);
                BigDecimal headerNum = new BigDecimal(headerid);
                quoteVO.setWhereClause("Quote_Header_Id=" + headerNum);
                quoteVO.executeQuery();
                System.out.println("QUery is:" + quoteVO.getQuery());
                System.out.println("row Count:" +
                                   quoteVO.getEstimatedRowCount());
                RowSetIterator iter = quoteVO.createRowSetIterator("");
                if (iter.hasNext()) {
                    row = iter.next();
                    quoteVO.setCurrentRow(row);
                }
                quoteNum = row.getAttribute("QuoteNumber").toString();
                iter.closeRowSetIterator();
                //                        System.out.println("QUote Number from Duplicate:::::::"+row.getAttribute("QuoteNumber"));

            }
        }
        return quoteNum;
    }

    public void getSalesRepDetails(Row row) {
        ViewObjectImpl vo = this.getSalesRepresentativeVO();
        if (vo != null) {
            if (row != null) {
                System.out.println(" resource Name" +
                                   row.getAttribute("Salesrepresentative"));
                vo.setNamedWhereClauseParam("p_orgId",
                                            row.getAttribute("OrgId"));
                vo.setWhereClause("resource_name ='" +
                                  row.getAttribute("Salesrepresentative") +
                                  "'"); //Businesscentercsr
                System.out.println("Sales Rep Query:" + vo.getQuery());
                vo.executeQuery();
                RowSetIterator iter = vo.createRowSetIterator("");
                Row salesRow = null;
                while (iter.hasNext()) {
                    salesRow = iter.next();
                }
                if (salesRow != null) {
                    vo.setCurrentRow(salesRow);
                    row.setAttribute("SalesFaxNum",
                                     salesRow.getAttribute("Fax"));
                    row.setAttribute("SalesContactName",
                                     salesRow.getAttribute("ResourceName"));
                    row.setAttribute("SalesPhoneNum",
                                     salesRow.getAttribute("SourcePhone"));
                    row.setAttribute("SalesEmail",
                                     salesRow.getAttribute("SourceEmail"));
                }
            }
        }
    }


    public void getSalesRepDetailsForQuoteCreate(Row row) {
        ViewObjectImpl vo = this.getSalesRepresentativeVO();
        if (vo != null) {
            if (row != null) {
                System.out.println(" resource Name" +
                                   row.getAttribute("SalesRepresentative"));
                vo.setNamedWhereClauseParam("p_orgId",
                                            row.getAttribute("OrgId"));
                vo.setWhereClause("resource_name ='" +
                                  row.getAttribute("SalesRepresentative") +
                                  "'"); //Businesscentercsr
                System.out.println("Sales Rep Query:" + vo.getQuery());
                vo.executeQuery();
                RowSetIterator iter = vo.createRowSetIterator("");
                Row salesRow = null;
                while (iter.hasNext()) {
                    salesRow = iter.next();
                }
                if (salesRow != null) {
                    vo.setCurrentRow(salesRow);
                    row.setAttribute("SalesFaxNum",
                                     salesRow.getAttribute("Fax"));
                    row.setAttribute("SalesContactName",
                                     salesRow.getAttribute("ResourceName"));
                    row.setAttribute("SalesPhoneNum",
                                     salesRow.getAttribute("SourcePhone"));
                    row.setAttribute("SalesEmail",
                                     salesRow.getAttribute("SourceEmail"));
                }
            }
        }
    }

    public void getPaymentTermsForUpdate(Row row) {
        ViewObjectImpl vo = this.getPaymentTermsVO();

        if (vo != null) {
            System.out.println("1 " + vo);
            if (row != null) {
                System.out.println("2 " + row);
                System.out.println("PaymentTerms from getPaymentTermsForUpdate method :" +
                                   row.getAttribute("Paymentterms"));
                vo.setWhereClause("description = '" +
                                  row.getAttribute("Paymentterms") + "'");
                vo.executeQuery();
                RowSetIterator iter = vo.createRowSetIterator("");
                Row PaymentRow = null;
                while (iter.hasNext()) {
                    PaymentRow = iter.next();
                }
                if (PaymentRow != null) {
                    vo.setCurrentRow(PaymentRow);

                    row.setAttribute("Paymentterms",
                                     PaymentRow.getAttribute("Name"));
                    System.out.println("Tst " +
                                       row.getAttribute("PaymentTermsName"));
                }
            }
        }

    }

    public void getCustSupportRepDetails(Row row) {
        ViewObjectImpl vo = this.getCustomerSupportRepresentVO();
        if (vo != null) {
            if (row != null) {
                System.out.println(" Business center csr" +
                                   row.getAttribute("Businesscentercsr"));
                vo.setWhereClause("Customer_name = '" +
                                  row.getAttribute("Businesscentercsr") +
                                  "'"); //Businesscentercsr
                vo.executeQuery();
                RowSetIterator iter = vo.createRowSetIterator("");
                Row salesRow = null;
                while (iter.hasNext()) {
                    salesRow = iter.next();
                }
                if (salesRow != null) {
                    vo.setCurrentRow(salesRow);
                    row.setAttribute("CustomerFaxNum",
                                     salesRow.getAttribute("Fax"));
                    row.setAttribute("CustomerContactName",
                                     salesRow.getAttribute("CustomerName"));
                    row.setAttribute("CustomerPhoneNum",
                                     salesRow.getAttribute("PhoneNumber"));
                    row.setAttribute("CustomerEmail",
                                     salesRow.getAttribute("EmailAddress"));
                }
            }
        }
    }


    public void getCustSupportRepDetailsForQuoteCreate(Row row) {
        ViewObjectImpl vo = this.getCustomerSupportRepresentVO();
        if (vo != null) {
            if (row != null) {
                System.out.println(" Business center csr" +
                                   row.getAttribute("CustomerSupportRepresent"));
                vo.setWhereClause("Customer_name = '" +
                                  row.getAttribute("CustomerSupportRepresent") +
                                  "'"); //Businesscentercsr
                vo.executeQuery();
                RowSetIterator iter = vo.createRowSetIterator("");
                Row salesRow = null;
                while (iter.hasNext()) {
                    salesRow = iter.next();
                }
                if (salesRow != null) {
                    vo.setCurrentRow(salesRow);
                    row.setAttribute("CustomerFaxNum",
                                     salesRow.getAttribute("Fax"));
                    row.setAttribute("CustomerContactName",
                                     salesRow.getAttribute("CustomerName"));
                    row.setAttribute("CustomerPhoneNum",
                                     salesRow.getAttribute("PhoneNumber"));
                    row.setAttribute("CustomerEmail",
                                     salesRow.getAttribute("EmailAddress"));
                }
            }
        }
    }


    public void getUpdateQuoteCustmerAddress(Row row) {
        String shipTo = "";
        String quoteTo = "";
        PreparedStatement cs = null, cs1 = null;
        if (row != null) {
            String accountNum = (String)row.getAttribute("Customernumber");
            //                BigDecimal orgid = (BigDecimal)row.getAttribute("OrgId");

            try {
                cs = this.getDBTransaction().createPreparedStatement(query, 0);
                cs.setString(1, accountNum);
                cs.setString(2, "BILL_TO");
                //                    cs.setBigDecimal(3, orgid);

                ResultSet rs = cs.executeQuery();
                while (rs.next()) {
                    quoteTo = rs.getString(5);
                    System.out.println("quoteTo is:" + quoteTo);
                }
                cs1 =
this.getDBTransaction().createPreparedStatement(query, 0);
                cs1.setString(1, accountNum);
                cs1.setString(2, "SHIP_TO");
                //                    cs1.setBigDecimal(3, orgid);
                ResultSet rs1 = cs1.executeQuery();
                while (rs1.next()) {
                    shipTo = rs1.getString(5);
                    System.out.println("ShipTo is:" + shipTo);
                }
                row.setAttribute("QuoteTo", quoteTo);
                row.setAttribute("ShipTo", shipTo);
                System.out.println("QuoteTo:" + quoteTo + ":shipto:" + shipTo);

            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (cs != null) {
                    try {
                        cs.close();
                        if (cs1 != null) {
                            cs1.close();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

            }
        }
    }

    public String callUpdateQuoteAPI(int respid, int usrId,
        boolean isCustEditable) {
        ViewObjectImpl quoteVO = this.getQuoteUpdateVO1();
        String returnval = null;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String returnMessage = null;
        String returnMsgStatus = null;
        if (quoteVO != null) {
            Row quoteVORow = quoteVO.getCurrentRow();
            if (quoteVORow != null) {
                CallableStatement cs = null;
                String stmt =
                    "apps.XXAT_ASO_QUOTE_PKG.update_quote_hdr(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18,:19,:20,:21,:22)";
                try {
                    cs = this.
                            getDBTransaction().createCallableStatement("begin " +
                                                                       stmt +
                                                                       "; end;",
                                                                       0);
    
                    if (quoteVORow.getAttribute("QuoteNumber") != null) {
                        cs.setString(1, quoteVORow.
                               getAttribute("QuoteNumber").toString());
                        System.out.println("QuoteNumber:" + quoteVORow.
                                getAttribute("QuoteNumber").toString());
                    }
                    if (quoteVORow.getAttribute("QuoteName") != null) {
                        cs.setString(2, quoteVORow.
                               getAttribute("QuoteName").toString());
                        System.out.println("QuoteName:" + quoteVORow.
                                getAttribute("QuoteName").toString());
                    } else if (isCustEditable) { //CustName
                        String custName =
                            (String)quoteVORow.getAttribute("CustName");
                        if (custName != null) {
                            cs.setString(2, "Quote For " + custName);
                            System.out.println("QuoteDescription:" +
                                               "Quote For " +
                                    custName);
                            quoteVORow.setAttribute("QuoteName", "Quote For " +
                                    custName);
                        }
                    } else {
                        String custName =
                            (String)quoteVORow.getAttribute("Customername");
                        if (custName != null) {
                            cs.setString(2, "Quote For " + custName);
                            System.out.println("QuoteDescription:" +
                                               "Quote For " +
                                    custName);
                            quoteVORow.setAttribute("QuoteName", "Quote For " +
                                   custName);
                        }
                        else
                        cs.setString(2, null); 
                    }
    
                    if (quoteVORow.getAttribute("Ordertypename") != null) {
    
                        cs.setString(3, quoteVORow.
    
                                getAttribute("Ordertypename").toString());
    
                        System.out.println("Ordertypename:" + quoteVORow.
    
                                getAttribute("Ordertypename").toString());
    
                    } else {
    
                        errorMsg.append("<p><b>OrderType is required.</b></p>");
    
                    }
    
                    if (quoteVORow.getAttribute("Pricelistname") != null) {
    
                        cs.setString(4, quoteVORow.
    
                                getAttribute("Pricelistname").toString());
    
                        System.out.println("Pricelistname:" + quoteVORow.
    
                                getAttribute("Pricelistname").toString());
    
                    } else {
    
                        errorMsg.append("<p><b>Price List is required.</b></p>");
    
                    }
    
                    //-------------------
    
    
                    if (quoteVORow.getAttribute("Saleschannel") != null) {
    
                        cs.setString(5, quoteVORow.
    
                                getAttribute("Saleschannel").toString());
    
                        System.out.println("Saleschannel:" + quoteVORow.
    
                                getAttribute("Saleschannel").toString());
    
                    } else {
    
                        cs.setString(5, null);
    
                    }
                    if (quoteVORow.getAttribute("Customernumber") !=
                        null) {
    
                        cs.setString(6, quoteVORow.
    
                                getAttribute("Customernumber").toString());
    
                        System.out.println("Customer Number" + quoteVORow.
    
                                getAttribute("Customernumber"));
    
                    } else {
    
                        errorMsg.append("<p><b> Customer Details required.</b></p>");
    
                    }
    
                    if (quoteVORow.getAttribute("Salesrepresentative") !=
                        null) {
    
                        cs.setString(7, quoteVORow.
    
                                getAttribute("Salesrepresentative").toString());
    
                        System.out.println("Sales representative" + quoteVORow.
    
                                getAttribute("Salesrepresentative"));
    
                    } else {
    
                        errorMsg.append("<p><b> Sales Representative is required.</b></p>");
    
                    }
    
    
                    if (quoteVORow.getAttribute("Paymentterms") != null) {
    
                        cs.setString(8, quoteVORow.
    
                                getAttribute("Paymentterms").toString());
    
                        System.out.println("PaymentTermsName:" + quoteVORow.
    
                                getAttribute("Paymentterms").toString());
    
                    } else {
    
                        //                                                                 cs.setString(6,null);
    
                        errorMsg.append("<p><b> Payment Terms is required.</b></p>");
    
                    }
    
                    if (quoteVORow.getAttribute("CurrencyCode") != null) {
    
                        cs.setString(9, quoteVORow.
    
                                getAttribute("CurrencyCode").toString());
    
                        System.out.println("Currency:" + quoteVORow.
    
                                getAttribute("CurrencyCode").toString());
    
                    } else {
    
                        errorMsg.append("<p><b>Currency Code is required.</b></p>");
    
                    }
    
    
                    if (quoteVORow.getAttribute("Incoterms") != null) {
    
                        cs.setString(10, quoteVORow.
    
                                getAttribute("Incoterms").toString());
    
                        System.out.println("Incoterms:" + quoteVORow.
    
                                getAttribute("Incoterms").toString());
    
                    } else {
    
                        errorMsg.append("<p><b>Incoterms is required.</b></p>");
    
                    }
    
    
                    if (quoteVORow.getAttribute("Businesscentercsr") != null) {
    
                        cs.setString(11, quoteVORow.
    
                                getAttribute("Businesscentercsr").toString());
    
                        System.out.println("Businesscentercsr:" + quoteVORow.
    
                                getAttribute("Businesscentercsr").toString());
    
                    } else {
    
                        cs.setString(11, null);
    
                        //                                                             errorMsg.append("<p><b>Businesscentercsr is required.</b></p>");
    
                    }
    
                    if (quoteVORow.getAttribute("Attribute8") != null) {
    
                        cs.setString(12, quoteVORow.
    
                                getAttribute("Attribute8").toString());
    
                        System.out.println("Attribute8:" + quoteVORow.
    
                                getAttribute("Attribute8").toString());
    
                    } else {
    
                        cs.setString(12, null);
    
                        //                                                             errorMsg.append("<p><b>Deal id is required.</b></p>");
    
                    }
    
    
                    if (quoteVORow.getAttribute("Attribute12") != null) {
    
                        cs.setString(13, quoteVORow.
    
                                getAttribute("Attribute12").toString());
    
                        System.out.println("Attribute12:" + quoteVORow.
    
                                getAttribute("Attribute12").toString());
    
                    } else {
    
                        cs.setString(13, null);
    
                        //errorMsg.append("<p><b>Attentiom/Department To is required.</b></p>");
    
                    }
    
                    if (quoteVORow.getAttribute("Attribute13") != null) {
    
                        cs.setString(14, quoteVORow.
    
                                getAttribute("Attribute13").toString());
    
                        System.out.println("Attribute13:" + quoteVORow.
    
                                getAttribute("Attribute13").toString());
    
                    } else {
    
                        cs.setString(14, null);
    
                        //                        errorMsg.append("<p><b>Organization Unit is required.</b></p>");
    
                    }
    
                    cs.setInt(15, respid);
    
                    cs.setInt(16, usrId);
    
                    //                                                         if(quoteVORow.getAttribute("DealId")!=null){
    
                    //                                                                 cs.setString(12,quoteVORow.getAttribute("DealId").toString());
    
                    //                                                                 }
    
                    //                                                         else{
    
                    //                                                                 cs.setString(12,null);
    
                    //                                     //                        errorMsg.append("<p><b>Deal Id is required.</b></p>");
    
                    //                                                             }
    
                    if (quoteVORow.getAttribute("Agrimentname") != null) {
    
                        cs.setString(17, quoteVORow.
    
                                getAttribute("Agrimentname").toString());
    
                    } else {
    
                        cs.setString(17, null);
    
                        //                        errorMsg.append("<p><b>AttentionTo/Dept is required.</b></p>");
    
                    }
    
                    if (quoteVORow.getAttribute("Attribute2") != null) {
    
                        cs.setString(18, quoteVORow.
    
                                getAttribute("Attribute2").toString());
    
                    } else {
    
                        cs.setString(18, null);
    
                    }
    
    
                    //                    cs.setString(17, null); //Discount ,change later
                    cs.setString(19, null); //Page, Change later
                    cs.setString(20, null); // p_phonefax add later
                    cs.registerOutParameter(21, Types.VARCHAR);
                    cs.registerOutParameter(22, Types.VARCHAR);
                    errorMsg.append("</body></html>");
                    String err = "<html><body></body></html>";
                    if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
                        cs.executeUpdate();
                        returnMsgStatus = cs.getString(21);
                        returnMessage = cs.getString(22);
                        if (returnMessage != null)
                            System.out.println("return Message is:" +
                                               returnMessage +
                                    " ::msg::");
                    }
                } catch (Exception e) {
                    errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
                    //                    e.printStackTrace();
                } finally {
                    try {
                        if (cs != null)
                            cs.close();
                    } catch (SQLException s) {
                        errorMsg.append("<p><b>" + s.getMessage() +
                                        "</b></p>");
                        //                        s.printStackTrace();
                    }
                }
            }
        }
        if (errorMsg.toString() != null && !
            "<html><body></body></html>".equals(errorMsg.toString()))
            returnval = errorMsg.toString();
        else {
            if (returnMsgStatus != null && returnMessage != null) {
                returnMsgStatus = returnMsgStatus.
                        concat("-").concat(returnMessage);
                returnval = returnMsgStatus;
            } else
                returnval = "Getting Error From API";
        }
        return returnval;
    }


    public void searchQuote() {
        ViewObjectImpl quoteSearchVO = this.getQuoteSearchVO();
        Row quoteSearchVORow = quoteSearchVO.getCurrentRow();
        ViewObjectImpl quoteResultTabVO = this.getQuoteSearchTabVO();
        if (quoteResultTabVO != null) {
            quoteResultTabVO.setWhereClause(null);
            quoteResultTabVO.applyViewCriteria(null);
            quoteResultTabVO.reset();
            ViewCriteria quoteSearchTabVC =
                quoteResultTabVO.getViewCriteria("QuoteSearchTabVC");
            quoteSearchTabVC.resetCriteria();
            quoteResultTabVO.setNamedWhereClauseParam("p_quoteNum", null);
            quoteResultTabVO.setNamedWhereClauseParam("p_custName", null);
            quoteResultTabVO.setNamedWhereClauseParam("p_orgId", null);
            quoteResultTabVO.setNamedWhereClauseParam("p_quoteNum",
                                                      quoteSearchVORow.getAttribute("QuoteNumber"));
            quoteResultTabVO.setNamedWhereClauseParam("p_custName",
                                                      quoteSearchVORow.getAttribute("Customer"));
            quoteResultTabVO.setNamedWhereClauseParam("p_orgId",
                                                      quoteSearchVORow.getAttribute("OUId"));
            //            System.out.println("Quote Number" +
            //                               quoteSearchVORow.getAttribute("QuoteNumber"));
            //            System.out.println("Org id" +
            //                               quoteSearchVORow.getAttribute("OUId"));
            quoteResultTabVO.applyViewCriteria(null);
            quoteResultTabVO.applyViewCriteria(quoteSearchTabVC);
            //            String query = quoteResultTabVO.getQuery().toString();
            //            System.out.println("query is:" + query);
            quoteResultTabVO.executeQuery();

        }


    }

    /*    public void getFaxNum() {
        ViewObjectImpl queryVO = this.getQuotesVO();
        Row row = queryVO.getCurrentRow();

        BigDecimal parentId;
        System.out.println("Description:"+row.getAttribute("QuoteDescription"));
        System.out.println("Customer name is:"+row.getAttribute("CustomerName"));
        System.out.println("CSR" +
                           row.getAttribute("CustomerSupportRepresent"));
        System.out.println("CCN" + row.getAttribute("CustomerContactName"));

        System.out.println(row.getAttribute("Customerparentid"));
        parentId = (BigDecimal)row.getAttribute("Customerparentid");
        String faxNum = null;
        PreparedStatement pstmt = null;
        String faxNumber =
            "select PHONE_NUMBER Fax from per_phones where PHONE_TYPE='WF' AND parent_id=?";
        if (parentId != null)
            pstmt = getDBTransaction().createPreparedStatement(faxNumber, 0);
        try {
            pstmt.setBigDecimal(1, parentId);
            pstmt.execute();
            ResultSet rs = pstmt.getResultSet();
            while (rs.next()) {
                faxNum = rs.getString(1);
                System.out.println("fax Number is:" + faxNum);
            }

            row.setAttribute("CustomerFaxNum", faxNum);
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException closeerr) {
                closeerr.printStackTrace();
            }
        }
    }    */

    //    public void getFaxNum(){
    //
    //        ViewObjectImpl vo =
    //
    //        }

    public void initQuoteSearch() {
        ViewObjectImpl searchVO = this.getQuoteSearchVO();
        ViewObjectImpl searchTabVO = this.getQuoteSearchTabVO();
        if (searchVO != null && searchTabVO != null) {
            searchVO.executeEmptyRowSet();
            searchTabVO.executeEmptyRowSet();
            RowSetIterator iter = searchVO.createRowSetIterator("clear");
            if (iter != null) {
                if (iter.hasNext())
                    iter.next().remove();
                iter.closeRowSetIterator();
            }
            searchTabVO.setWhereClause("1=2");
            searchTabVO.executeQuery();
            searchVO.clearCache();
            Row row = searchVO.createRow();
            if (row != null) {
                searchVO.insertRow(row);
                searchVO.setCurrentRow(row);
            }

        }
    }


    public void copyQuoteDetailsFromQheaderObjToCreate(String ou,
                                                       String incoTerm,
                                                       String currency,
                                                       String payterm,
                                                       String custNumber,
                                                       String custName) {
        ViewObjectImpl quoteVO = this.getQuotesVO();
        if (quoteVO != null)
            quoteVO.executeEmptyRowSet();
        quoteVO.clearCache();
        Row row = quoteVO.createRow();
        row.setAttribute("OrganizationUnit", ou);
        row.setAttribute("IncoTerms", incoTerm);
        row.setAttribute("Currency", currency);
        row.setAttribute("PaymentTerms", payterm);
        row.setAttribute("CustNum", custNumber);
        row.setAttribute("CustomerName", custName);
        if (row != null) {
            quoteVO.insertRow(row);
            quoteVO.setCurrentRow(row);
        }
    }

    public void initImportSource() {
        ViewObjectImpl impSrcVO = this.getImportSourceVO1();
        if (impSrcVO != null) {
            Row cRw = impSrcVO.createRow();
            impSrcVO.insertRow(cRw);
            cRw.setAttribute("ReuseQuote", "Y");
            impSrcVO.setCurrentRow(cRw);

        }
    }


    public Row getQuoteExportValues(String quoteNumber) {
        Row row = null;
        if (quoteNumber != null) {
            ViewObjectImpl exportVO = this.getQuoteExportVO1();
            if (exportVO != null) {
                exportVO.setNamedWhereClauseParam("pquoteno", quoteNumber);
                exportVO.executeQuery();
                row = exportVO.getRowAtRangeIndex(0);
            }
        }
        return row;
    }

    public boolean isSalesChValidate(String salesCh) {
        boolean isSalesChVal = false;

        ViewObjectImpl vo = this.getSalesChannelVO();
        if (vo != null) {

            vo.setWhereClause("meaning='" + salesCh + "'");
            vo.executeQuery();
            if (vo.getEstimatedRowCount() > 0)
                isSalesChVal = true;
            else
                isSalesChVal = false;
        }
        return isSalesChVal;
    }

    public String isSalesChValidate(String salesCh, String override) {
        String salesChannelCode = null;

        ViewObjectImpl vo = this.getSalesChannelVO();
        if (vo != null) {
            vo.setWhereClause("meaning='" + salesCh + "'");
            vo.executeQuery();
            if (vo.getEstimatedRowCount() > 0) {
                Row r = vo.getRowAtRangeIndex(0);
                if (r != null) {
                    salesChannelCode = (String)r.getAttribute("LookupCode");
                }
            }
        }
        return salesChannelCode;
    }

    public String clearQuoteFieldwithParams(String ou, String orderType,
                                            String priceList,
                                            String businessCSR,
                                            String incoTerm, String quoteDesc,
                                            String salesCh, String payTerm,
                                            String currency, String custNumber,
                                            String custName,
                                            String businessAggrement,
                                            String custEmail, String custPhone,
                                            String ccontact) {
        //        String custNumber = "104413";
        //custName = "  NXP Semiconductors Taiwan Ltd.   ";
        HashMap<String, Boolean> qheaderValidMap =
            new HashMap<String, Boolean>();
        String invalidQuteParams = SudokuUtils.invalidQteParams;
        String msgName = getFNDMsges(invalidQuteParams);
        Map sessionMap = ADFContext.getCurrent().getSessionScope();
        boolean showWarning = false;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        if (msgName != null)
            errorMsg.append(msgName);
        else
            errorMsg.append(invalidQuteParams);
        //        errorMsg.append("The following quote parameters could not be verified in the Imported Reference Configuration.");
        BigDecimal orgid = null;
        BigDecimal partyId = null;
        System.out.println("OU:" + ou + "--IncoTerm:" + incoTerm +
                           "--currency:" + currency + "--payTerm:" + payTerm +
                           "--custNumber:" + custNumber + "custName:" +
                           custName + "Price List Id " + priceList);
        ViewObjectImpl quoteVO = this.getQuotesVO();
        if (quoteVO != null) {
            quoteVO.executeEmptyRowSet();
            quoteVO.clearCache();
            Row row = quoteVO.createRow();
            if (row != null) {
                //Setting value of email , phone and contact without any validations
                if (custEmail != null && !custEmail.equalsIgnoreCase("")) {
                    row.setAttribute("QuoteEmail", custEmail);
                }

                if (custPhone != null && !custPhone.equalsIgnoreCase("")) {
                    row.setAttribute("CustPhoneFax", custPhone);
                }
                if (ccontact != null && !ccontact.equalsIgnoreCase("")) {
                    row.setAttribute("AttentionToOrDept", ccontact);
                }
                if (ou != null) {
                    ou = ou.trim();
                    if (!ou.equals("")) {
                        if (isOUValidate(ou)) {
                            qheaderValidMap.put("OU", Boolean.TRUE);
                            row.setAttribute("OrganizationUnit", ou);
                            orgid = getOrgId(ou);
                            if (orgid != null) {
                                initOrgBasedXMLQuote(orgid, row, orderType,
                                                     custNumber, custName,
                                                     salesCh, businessCSR,
                                                     businessAggrement,
                                                     currency, incoTerm);
                                Row salesRepRow = getDefaulSalesRepVal(orgid);
                                if (salesRepRow != null) {
                                    row.setAttribute("SalesRepresentative",
                                                     salesRepRow.getAttribute("ResourceName"));
                                    row.setAttribute("SalesContactName",
                                                     salesRepRow.getAttribute("ResourceName"));
                                    row.setAttribute("SalesPhoneNum",
                                                     salesRepRow.getAttribute("SourcePhone"));
                                    row.setAttribute("SalesFaxNum",
                                                     salesRepRow.getAttribute("Fax"));
                                    row.setAttribute("SalesEmail",
                                                     salesRepRow.getAttribute("SourceEmail"));
                                    //The sales rep attr like phone email are to be populated from PrimarySalesRepVo, Query needs to be updated
                                    //                                    row.setAttribute("SalesContactName",
                                    //                                                     salesRepRow.getAttribute("ResourceName"));
                                    //                                    row.setAttribute("SalesRepresentative",
                                    //                                                     salesRepRow.getAttribute("Name"));
                                    //                                    row.setAttribute("SalesRepresentative",
                                    //                                                     salesRepRow.getAttribute("Name"));
                                    //                                    row.setAttribute("SalesRepresentative",
                                    //                                                     salesRepRow.getAttribute("Name"));
                                }
                                row.setAttribute("OrgId", orgid);


                                if (orderType != null) {
                                    orderType = orderType.trim();
                                    if (!orderType.equals("")) {
                                        if (isOrderType(orderType, orgid)) {
                                            qheaderValidMap.put("OrderType",
                                                                Boolean.TRUE);
                                            row.setAttribute("OrderType",
                                                             orderType);

                                        } else {
                                            showWarning = true;
                                            errorMsg.append("<p><b>Order Type:</b></p>");
                                        }
                                    }
                                }
                                if (custName != null || custNumber != null) {
                                    boolean numCheck = false;
                                    boolean nameCheck = false;
                                    if (custNumber != null) {
                                        custNumber = custNumber.trim();
                                        if (!custNumber.equals("")) {
                                            if (isCustNumValidate(custNumber,
                                                                  orgid)) {
                                                qheaderValidMap.put("custNum",
                                                                    Boolean.TRUE);
                                                row.setAttribute("CustNum",
                                                                 custNumber);
                                                numCheck = true;
                                            } else if (custName != null) {
                                                custName = custName.trim();
                                                if (isCustNameValidate(custName,
                                                                       orgid)) {
                                                    qheaderValidMap.put("custName",
                                                                        Boolean.TRUE);
                                                    row.setAttribute("CustomerName",
                                                                     custName);
                                                    nameCheck = true;
                                                } else
                                                    errorMsg.append("<p>Customer Details:</p>");
                                            } else {
                                                showWarning = true;
                                                errorMsg.append("<p>Customer Details:</p>");
                                            }
                                        }

                                    } else if (custName != null) {
                                        custName = custName.trim();
                                        if (!custName.equals("")) {
                                            if (isCustNameValidate(custName,
                                                                   orgid)) {
                                                qheaderValidMap.put("custName",
                                                                    Boolean.TRUE);
                                                row.setAttribute("CustomerName",
                                                                 custName);
                                                nameCheck = true;

                                            } else
                                                errorMsg.append("<p>Customer Details:</p>");
                                        } else {
                                            //showWarning = true;
                                            System.out.println("customer details are null");
                                        }
                                    }

                                    if (numCheck || nameCheck) {
                                        partyId =
                                                getPartyId(custNumber, custName,
                                                           numCheck,
                                                           nameCheck);
                                        System.out.println("partyId::" +
                                                           partyId);
                                        row.setAttribute("PartyId", partyId);

                                        if (businessAggrement != null) {
                                            businessAggrement =
                                                    businessAggrement.trim();
                                            if (!businessAggrement.equals("")) {
                                                String custAccid = (String)row.getAttribute("CustAccid");
                                                if (isBusAgreement(businessAggrement,
                                                                   custAccid)) {
                                                    qheaderValidMap.put("businessAgreement",
                                                                        Boolean.TRUE);
                                                    row.setAttribute("BusinessAgreement",
                                                                     businessAggrement);
                                                } else {
                                                    showWarning = true;
                                                    errorMsg.append("<p>Business Agreement</p>");
                                                    System.out.println("Business Agreement");
                                                }
                                            }
                                        }

                                        if (partyId != null && orgid != null)
                                            getQuoteCustmerAddress(row);
                                    }
                                }
                            }
                        } else {
                            showWarning = true;
                            errorMsg.append("<p>Operating Unit</p>");
                            System.out.println("OU");
                        }
                    }
                }


                if (businessCSR != null) {
                    businessCSR = businessCSR.trim();
                    if (!businessCSR.equals("")) {
                        HashMap<String, String> busCSRMap =
                            isBusinessCSR(businessCSR);
                        if (busCSRMap != null) {
                            String validCSR = busCSRMap.get("validCSR");
                            if (validCSR != null &&
                                validCSR.equalsIgnoreCase("Y")) {
                                qheaderValidMap.put("custSupportRep",
                                                    Boolean.TRUE);
                                row.setAttribute("CustomerSupportRepresent",
                                                 businessCSR);
                                row.setAttribute("CustomerContactName",
                                                 busCSRMap.get("CustomerName"));
                                row.setAttribute("CustomerEmail",
                                                 busCSRMap.get("Email"));
                                row.setAttribute("CustomerPhoneNum",
                                                 busCSRMap.get("PhoneNumber"));
                                row.setAttribute("CustomerFaxNum",
                                                 busCSRMap.get("Fax"));
                            } else if (validCSR != null &&
                                       validCSR.equalsIgnoreCase("N")) {
                                showWarning = true;
                                errorMsg.append("<p>Business Center CSR</p>");
                                System.out.println("Business Center CSR");
                            }
                        }
                    }
                }

                if (priceList != null) {
                    priceList = priceList.trim();
                    if (!priceList.equals("")) {
                        if (isPriceList(priceList) != null) {
                            qheaderValidMap.put("priceList", Boolean.TRUE);
                            String priceName = isPriceList(priceList);
                            if (priceName != null) {
                                row.setAttribute("PriceList", priceName);
                            }
                        } else {
                            showWarning = true;
                            errorMsg.append("<p>Price List</p>");
                            System.out.println("Price List");
                        }
                    }
                }
                if (currency != null) {
                    currency = currency.trim();
                    if (!currency.equals("")) {
                        if (isCurrencyValidate(currency)) {
                            qheaderValidMap.put("currency", Boolean.TRUE);
                            row.setAttribute("Currency", currency);
                        } else {
                            showWarning = true;
                            errorMsg.append("<p>Currency</p>");
                            System.out.println("Currency");
                        }
                    }
                }

                if (incoTerm != null) {
                    incoTerm = incoTerm.trim();
                    if (!incoTerm.equals("")) {
                        if (isIncoTermValidate(incoTerm)) {
                            qheaderValidMap.put("incoTerm", Boolean.TRUE);
                            row.setAttribute("IncoTerms", incoTerm);
                        } else {
                            showWarning = true;
                            errorMsg.append("<p>IncoTerm</p>");
                            System.out.println("IncoTerm");
                        }
                    }
                }

                if (salesCh != null) {
                    salesCh = salesCh.trim();
                    if (!salesCh.equals("")) {
                        String salesChannelCode =
                            isSalesChValidate(salesCh, null);
                        if (salesChannelCode != null) {
                            // if (isSalesChValidate(salesCh)) {
                            qheaderValidMap.put("salesChannel", Boolean.TRUE);
                            row.setAttribute("SalesChCode", salesChannelCode);
                        } else {
                            showWarning = true;
                            errorMsg.append("<p>Sales Channel</p>");
                            System.out.println("Sales Channel");
                        }
                    }
                }
                if (quoteDesc != null) {
                    quoteDesc = quoteDesc.trim();
                    System.out.println("Quote Desc:" + quoteDesc);
                    row.setAttribute("QuoteDescription", quoteDesc);
                }


                if (payTerm != null) {
                    payTerm = payTerm.trim();
                    if (!payTerm.equals("")) {
                        if (isPayTermValidate(payTerm)) {
                            qheaderValidMap.put("paymentTerm", Boolean.TRUE);
                            row.setAttribute("PaymentTerms", payTerm);
                        } else {
                            showWarning = true;
                            errorMsg.append("<p>Payment Terms</p>");
                            System.out.println("PaymentTerm");
                        }
                    }
                }

                sessionMap.put("qheaderValidMap", qheaderValidMap);
                quoteVO.insertRow(row);
                quoteVO.setCurrentRow(row);
            }
            errorMsg.append("</body></html>");

        }
        if (showWarning)
            return errorMsg.toString();
        else
            return null;
    }


    public boolean isCurrencyValidate(String currency) {
        boolean isCurrency = false;
        ViewObjectImpl vo = this.getCurrencyVO();
        if (vo != null) {
            vo.setWhereClause("currency_code='" + currency + "'");
            vo.executeQuery();
            System.out.println("Currency Query:" + vo.getQuery() + "count:" +
                               vo.getEstimatedRowCount());
            if (vo.getEstimatedRowCount() > 0)
                isCurrency = true;
            else
                isCurrency = false;
        }
        return isCurrency;
    }


    public boolean isIncoTermValidate(String incoTerm) {
        boolean isIncoTermVal = false;

        ViewObjectImpl vo = this.getIncoTermVO();
        if (vo != null) {
            vo.setWhereClause("meaning='" + incoTerm + "'");
            vo.executeQuery();
            if (vo.getEstimatedRowCount() > 0)
                isIncoTermVal = true;
            else
                isIncoTermVal = false;
        }
        return isIncoTermVal;
    }

    public boolean isPayTermValidate(String paymentTerm) {
        boolean isPaymentTerm = false;

        ViewObjectImpl vo = this.getPaymentTermsVO();
        if (vo != null) {
            vo.setWhereClause("name='" + paymentTerm + "'");
            vo.executeQuery();
            if (vo.getEstimatedRowCount() > 0)
                isPaymentTerm = true;
            else
                isPaymentTerm = false;
        }
        return isPaymentTerm;
    }


    public HashMap<String, String> isBusinessCSR(String csr) {
        boolean isCSR = false;
        HashMap<String, String> businessCSRMap = new HashMap<String, String>();
        ViewObjectImpl vo = this.getCustomerSupportRepresentVO();
        if (vo != null) {
            vo.setWhereClause("Customer_name='" + csr + "'");
            vo.executeQuery();
            if (vo.getEstimatedRowCount() > 0) {
                Row r = vo.getRowAtRangeIndex(0);
                businessCSRMap.put("validCSR", "Y");
                businessCSRMap.put("PhoneNumber",
                                   (String)r.getAttribute("PhoneNumber"));
                businessCSRMap.put("CustomerName",
                                   (String)r.getAttribute("CustomerName"));
                businessCSRMap.put("Email",
                                   (String)r.getAttribute("EmailAddress"));
                businessCSRMap.put("Fax", (String)r.getAttribute("Fax"));
                isCSR = true;
            } else {
                businessCSRMap.put("validCSR", "N");
                isCSR = false;
            }
        }
        return businessCSRMap;
    }


    public String isPriceList(String priceList) {
        boolean isPriceList = false;
        Row row = null;
        String name = null;
        ViewObjectImpl vo = this.getPriceListVO();
        if (vo != null) {
            vo.setWhereClause("price_list_id='" + priceList + "'");
            vo.executeQuery();
            if (vo.getEstimatedRowCount() > 0) {
                isPriceList = true;
                RowSetIterator iter = vo.createRowSetIterator("");
                while (iter.hasNext()) {
                    row = iter.next();
                    if (row != null) {
                        name = (String)row.getAttribute("Name");
                    }
                }
            } else
                isPriceList = false;
        }
        return name;
    }

    public boolean isBusAgreement(String busAgr, String custAccId) {
        boolean isBusAgr = false;
        if (busAgr != null && custAccId != null) {
            busAgr = busAgr.trim();
            ViewObjectImpl vo = this.getbusinessAgreementVo();
            if (vo != null) {
                vo.setNamedWhereClauseParam("p_custAccId", custAccId);
                vo.setWhereClause("Name='" + busAgr + "'");
                vo.executeQuery();
                if (vo.getEstimatedRowCount() > 0)
                    isBusAgr = true;
                else
                    isBusAgr = false;
            }
        }
        return isBusAgr;
    }


    //    public boolean isCustValidate(String custNum, String custName,
    //                                  BigDecimal orgid) {
    //        ViewObjectImpl vo = this.getCustomerNameVO();
    //        //        ViewObject vo1 = findViewObject("CustomerNameVO");
    //        boolean isCustValidate = false;
    //            if (vo != null) {
    //        if (custNum != null)
    //            custNum = custNum.trim();
    //        else
    //            custName = custName.trim();
    //
    //            vo.setNamedWhereClauseParam("p_orgId", orgid);
    //            //                vo.setWhereClauseParam(0, orgid);
    //            if (custName != null)
    //                vo.setWhereClause("customername='" + custName + "'");
    //            else
    //                vo.setWhereClause("accountnumber='" + custNum + "'");
    //            System.out.println("QUery is:" + vo.getQuery());
    //            vo.executeQuery();
    //            System.out.println("QUery is:" + vo.getQuery());
    //            if (vo.getEstimatedRowCount() > 0)
    //                isCustValidate = true;
    //            else
    //                isCustValidate = false;
    //        }
    //        return isCustValidate;
    //    }


    public boolean isOrderType(String orderType, BigDecimal orgid) {
        ViewObjectImpl vo = this.getOrderTypeVO();
        boolean isOrderType = false;
        if (vo != null) {
            if (orderType != null) {
                orderType = orderType.trim();
                vo.setNamedWhereClauseParam("p_orgId", orgid);
                vo.setWhereClause("NAME='" + orderType + "'");
                vo.executeQuery();
                if (vo.getEstimatedRowCount() > 0)
                    isOrderType = true;
                else
                    isOrderType = false;
            }
        }
        return isOrderType;
    }


    public boolean isCustNumValidate(String custNum, BigDecimal orgid) {
        ViewObjectImpl vo = this.getCustomerNameVO();
        boolean isCustValidate = false;
        if (vo != null) {
            if (custNum != null) {
                custNum = custNum.trim();
                vo.clearCache();
                vo.setNamedWhereClauseParam("p_orgId", null);
                vo.setWhereClause(null);
                vo.setNamedWhereClauseParam("p_orgId", orgid);
                vo.setWhereClause("accountnumber='" + custNum + "'");
                vo.executeQuery();
                if (vo.getEstimatedRowCount() > 0)
                    isCustValidate = true;
                else
                    isCustValidate = false;
            }
        }
        return isCustValidate;
    }

    public boolean isCustNameValidate(String custName, BigDecimal orgid) {
        ViewObjectImpl vo = this.getCustomerNameVO();
        boolean isCustValidate = false;
        if (vo != null) {
            if (custName != null) {
                custName = custName.trim();
                vo.setNamedWhereClauseParam("p_orgId", orgid);
                vo.setWhereClause("customername='" + custName + "'");
                vo.executeQuery();
                if (vo.getEstimatedRowCount() > 0)
                    isCustValidate = true;
                else
                    isCustValidate = false;
            }
        }
        return isCustValidate;
    }


    public boolean isOUValidate(String ou) {
        boolean checkOU = false;
        if (ou != null) {
            ViewObjectImpl vo = this.getOUVO();
            if (vo != null) {
                vo.setWhereClause("operating_unit='" + ou + "'");
                vo.executeQuery();
                if (vo.getEstimatedRowCount() > 0)
                    checkOU = true;
            } else
                checkOU = false;
        }
        return checkOU;
    }

    public BigDecimal getPartyId(String customerNum, String custName,
                                 boolean numCheck, boolean nameCheck) {

        BigDecimal partyId = null;
        ViewObjectImpl vo = this.getCustomerNumberVO();
        if (vo != null) {
            if (customerNum != null && numCheck) {
                //                customerNum ="104413";
                //                customerNum = customerNum.replaceAll("\\s","");
                vo.setWhereClause("accountnumber='" + customerNum + "'");
                vo.executeQuery();
                //                System.out.println("Query::" + vo.getQuery());
            }
            if (custName != null && nameCheck) {
                custName = custName.trim();
                //                custName = custName.replaceAll("\\s", "");
                vo.setWhereClause("customername='" + custName + "'");
                vo.executeQuery();
            }
            RowSetIterator iter = vo.createRowSetIterator("");
            System.out.println(vo.getEstimatedRowCount());
            Row row = null;
            while (iter.hasNext()) {
                row = iter.next();
            }
            if (row != null)
                partyId = (BigDecimal)row.getAttribute("Partyid");
        }
        return partyId;
    }

    public BigDecimal getOrgId(String ou) {
        ou = ou.replaceAll("\\s+", "");
        BigDecimal orgid = null;
        ViewObjectImpl vo = this.getOUVO();
        if (ou != null) {
            if (vo != null) {
                vo.setWhereClause("OPERATING_UNIT ='" + ou + "'");
                vo.executeQuery();
                RowSetIterator iter = vo.createRowSetIterator("");
                System.out.println(vo.getEstimatedRowCount());
                Row ouRow = null;
                while (iter.hasNext()) {
                    ouRow = iter.next();
                }
                if (ouRow != null) {
                    orgid = (BigDecimal)ouRow.getAttribute("OrgId");
                }
            }
        }
        return orgid;
    }

    public void getCurrency(String currency) {
        if (currency != null) {
            ViewObjectImpl vo = this.getCurrencyVO();
            if (vo != null) {
                vo.setWhereClause("currency_code ='" + currency + "'");
                vo.executeQuery();
            }
        }
    }

    public Row getDefaulSalesRepVal(BigDecimal orgId) {
        Row row = null;
        ViewObjectImpl vo = this.getSalesRepresentativeVO();
        if (vo != null) {
            vo.clearCache();
            vo.setWhereClause(null);
            vo.setNamedWhereClauseParam("p_orgId", null);
            vo.setNamedWhereClauseParam("p_orgId", orgId);
            vo.executeQuery();
            RowSetIterator iter = vo.createRowSetIterator("");
            while (iter.hasNext()) {
                row = iter.next();
            }
        }

        return row;
    }

    public void defaultSalesRepOnCreateQuote(Row row) {
        Row salesRepRow = null;
            if (row != null) {
                System.out.println("OrgId is:" + row.getAttribute("OrgId"));
                salesRepRow =
                        getDefaulSalesRepVal((BigDecimal)row.getAttribute("OrgId"));
                if (salesRepRow != null) {
                    row.setAttribute("SalesRepresentative",
                                     salesRepRow.getAttribute("ResourceName"));
                }
            }
    }


    public void getDefaultValues() {
        ViewObjectImpl vo = this.getQuotesVO();
        if (vo != null) {
            RowQualifier otrq = new RowQualifier("");

        }

    }

    //    public void initQuoteBasedOnUserPref(boolean isUserDefault) {
    //        ViewObjectImpl vo = this.getQuotesVO();
    //        QuotesVORowImpl rowImpl = (QuotesVORowImpl)vo.getCurrentRow();
    //        String custNum = null, custName = null;
    //                rowImpl.getuserBasedOU();
    //
    ////        rowImpl.getUserBasedSalesChannel();
    ////        String csr = rowImpl.getUserBasedCSR();
    ////        String currency = rowImpl.getUserBasedCurrency();
    ////        String incoTerm = rowImpl.getUserBasedIncoTerm();
    //        String paymentTerm = rowImpl.getUserBasedPaymentTerm();
    //        if (isUserDefault) {
    //            if (vo != null) {
    //                Row row = vo.getCurrentRow();
    //            System.out.println("org value"+row.getAttribute("OrgId"));
    //                Map custDetails = rowImpl.getUserBasedCustomerDetails();
    //                if (custDetails != null) {
    //                    custNum = (String)custDetails.get("custNum");
    //                    custName = (String)custDetails.get("custName");
    //                }
    ////                String salesRep = rowImpl.getUserBasedSalesRep();
    ////                String orderType = rowImpl.getUserBasedOrderType();
    ////                row.setAttribute("OrderType", orderType);
    //                System.out.println("custName:"+custName+" custNumber:"+custNum);
    ////                row.setAttribute("CustNum", custNum);
    ////                row.setAttribute("CustName", custName);
    //                row.setAttribute("CustomerNumber", custNum);
    //                System.out.println(row.getAttribute("CustomerNumber"));
    //                row.setAttribute("CustomerName", custName);
    ////                row.setAttribute("Currency", currency);
    ////                row.setAttribute("IncoTerms", incoTerm);
    //                System.out.println(paymentTerm);
    //                row.setAttribute("PaymentTerms",paymentTerm);
    ////                row.setAttribute("CustomerSupportRepresent", csr);
    ////                row.setAttribute("SalesRepresentative", salesRep);
    //                vo.insertRow(row);
    //                vo.setCurrentRow(row);
    //            }
    //        }
    //    }


    //initOrgBasedXMLQuote(orgid, row,orderType,custNumber,custName,salesCh,businessCSR,businessAggrement,currency,incoTerm,payTerm);

    public void initOrgBasedXMLQuote(BigDecimal orgId, Row row,
                                     String orderType, String custNum,
                                     String custName, String salesChannel,
                                     String csr, String ba, String currency,
                                     String incoTerm) {
        BigDecimal otid = null;
        BigDecimal csrID = null;
        if (orderType != null) {
            ViewObjectImpl otVO = this.getOrderTypeVO();
            otVO.setNamedWhereClauseParam("p_orgId", orgId);
            RowQualifier rq = new RowQualifier(" Name='" + orderType + "'");
            Row r[] = otVO.getFilteredRows(rq);
            if (r != null && r.length > 0) {
                otid = (BigDecimal)r[0].getAttribute("TransactionTypeId");
            }
        }
        //                if(csr!=null){
        //                ViewObjectImpl csrVO = this.getCustomerSupportRepresentVO();
        //        Row r[] = csrVO.getFilteredRows(" CustomerName", csr);
        //        if(r!=null && r.length>0){
        //          csrID = (BigDecimal)r[0].getAttribute("PersonId");
        //            }
        //        }
        ViewObjectImpl vo = this.getQuotesVO();
        vo.setCurrentRow(row);
        QuotesVORowImpl rowImpl = (QuotesVORowImpl)row;
        //          boolean isOrgIdExists = rowImpl.getuserBasedOU(orgId);
        //          if(isOrgIdExists){
        rowImpl.getUserBasedOrderType(orgId, otid);
        rowImpl.getUserBasedCustomerDetails(orgId, custNum, custName);
        //                  rowImpl.getUserBasedSalesRep(orgId);
        //              }
        rowImpl.getUserBasedSalesChannel(salesChannel);
        //       rowImpl.getUserBasedCSR(csrID);
        rowImpl.getUserBasedCurrency(currency);
        rowImpl.getUserBasedIncoTerm(incoTerm);
    }


    public void initQuoteBasedOnUserPref(boolean isUserDefault) {
        ViewObjectImpl vo = this.getQuotesVO();
        QuotesVORowImpl rowImpl = (QuotesVORowImpl)vo.getCurrentRow();
        String custNum = null, custName = null;
        String currency = null, incoTerm = null, salesRep = null, orderType =
            null;
        String paymentTerm = null, csr = null;
        Map custDetails = new HashMap();
        currency = rowImpl.getUserBasedCurrency(null);
        incoTerm = rowImpl.getUserBasedIncoTerm(null);
        custDetails = rowImpl.getUserBasedCustomerDetails(null, null, null);
        salesRep = rowImpl.getUserBasedSalesRep(null);
        orderType = rowImpl.getUserBasedOrderType(null, null);
        rowImpl.getUserBasedSalesChannel(null);
        paymentTerm = rowImpl.getUserBasedPaymentTerm();
        csr = rowImpl.getUserBasedCSR(null);
        if (vo != null) {
            Row row = vo.getCurrentRow();
            System.out.println("org value" + row.getAttribute("OrgId"));
            custNum = (String)custDetails.get("custNum");
            custName = (String)custDetails.get("custName");
            row.setAttribute("OrderType", orderType);
            System.out.println("OrderType Value:" + orderType);
            System.out.println("custName:" + custName + " custNumber:" +
                               custNum);
            row.setAttribute("CustNum", custNum);
            System.out.println(row.getAttribute("CustNum"));
            row.setAttribute("CustomerName", custName);
            row.setAttribute("CustName", custName);
            row.setAttribute("Currency", currency);
            row.setAttribute("IncoTerms", incoTerm);
            row.setAttribute("CustomerSupportRepresent", csr);
            System.out.println(paymentTerm);
            row.setAttribute("PaymentTerms", paymentTerm);
            if(salesRep!=null)
            row.setAttribute("SalesRepresentative", salesRep);
            else
                defaultSalesRepOnCreateQuote(row);
            vo.insertRow(row);
            vo.setCurrentRow(row);
            getQuoteCustmerAddress(row);
            getCustSupportRepDetailsForQuoteCreate(row);
            getSalesRepDetailsForQuoteCreate(row);
        }
    }

    public void clearQuoteFields() {
        ViewObjectImpl quoteVO = this.getQuotesVO();
        if (quoteVO != null)
            quoteVO.executeEmptyRowSet();
        quoteVO.clearCache();
        Row row = quoteVO.createRow();
        if (row != null) {
            quoteVO.insertRow(row);
            quoteVO.setCurrentRow(row);
            //            QuotesVORowImpl rowImpl = (QuotesVORowImpl)quoteVO.getCurrentRow();
            //            rowImpl.getuserBasedOU(null);
        }

    }

    public void initRuleSet() {
            System.out.println("Init Rule Set");
            ViewObjectImpl ruleSetVO = this.getRuleSetVO1();
            if (ruleSetVO != null) {
                //            AttributeDef[] attDef = ruleSetVO.getAttributeDefs();
                //            for (AttributeDef af : attDef) {
                //                System.out.println(af.getName());
                //            }
                //get value of rulset top level and second level choices
                Row cRow = ruleSetVO.createRow();
                ruleSetVO.insertRow(cRow);
                Map ruleSetMap =
                    (Map)ADFContext.getCurrent().getSessionScope().get("ruleSetMap");
                if (ruleSetMap != null) {
                    String topLevelCode = (String)ruleSetMap.get("topLevelCode");
                    String secondLevelCode =
                        (String)ruleSetMap.get("secondLevelCode");
                    _logger.info("AMIMPL FirstLvCode " + topLevelCode);
                    _logger.info("AMIMPL SecLvlCode " + secondLevelCode);
                    String error = (String)ruleSetMap.get("error");
                    if (error != null && error.equalsIgnoreCase("N")) {
                        if (secondLevelCode != null) {
                            secondLevelCode = secondLevelCode.toUpperCase();
                        }
                        cRow.setAttribute("TopLevelCode", topLevelCode);
                        cRow.setAttribute("SecondLevelCode", secondLevelCode);
                        RuleSetVORowImpl rwImpl =
                            (RuleSetVORowImpl)ruleSetVO.getCurrentRow();
                        String secondLevelMeaning =
                            rwImpl.retrieveSecLevelMeaning(secondLevelCode);
                        System.out.println("From AM Impl second level meaning " +
                                           secondLevelMeaning);
                        cRow.setAttribute("SecondLevelMeaning",
                                          secondLevelMeaning);
                    }
                    if (error == null) {
                        if (secondLevelCode != null) {
                            secondLevelCode = secondLevelCode.toUpperCase();
                        }
                        cRow.setAttribute("TopLevelCode", topLevelCode);
                        cRow.setAttribute("SecondLevelCode", secondLevelCode);
                        RuleSetVORowImpl rwImpl =
                            (RuleSetVORowImpl)ruleSetVO.getCurrentRow();
                        String secondLevelMeaning =
                            rwImpl.retrieveSecLevelMeaning(secondLevelCode);
                        System.out.println("From AM Impl second level meaning " +
                                           secondLevelMeaning);
                        cRow.setAttribute("SecondLevelMeaning",
                                          secondLevelMeaning);
                    }

                    ruleSetVO.setCurrentRow(cRow);

                } else {
                    ruleSetVO.setCurrentRow(cRow);
                }
            }
        }


        public void initRuleSetForRef() {
            ViewObjectImpl ruleSetVO = this.getRuleSetVO1();
            if (ruleSetVO != null) {
                //get value of rulset top level and second level choices
                Row cRow = ruleSetVO.createRow();
                ruleSetVO.insertRow(cRow);
                Map ruleSetMap =
                    (Map)ADFContext.getCurrent().getSessionScope().get("ruleSetMap");
                Map configRuleSetMap =
                    (Map)ADFContext.getCurrent().getSessionScope().get("ruleSetMapConfig");
                if (ruleSetMap != null && ruleSetMap.size() > 0) {
                    ruleSetVO.setCurrentRow(cRow);
                    String topLevelCode = (String)ruleSetMap.get("topLevelCode");
                    String secondLevelCode =
                        (String)ruleSetMap.get("secondLevelCode");
                    String error = (String)ruleSetMap.get("error");
                    //                    if (error != null && error.equalsIgnoreCase("N")) {
                    if (secondLevelCode != null) {
                        secondLevelCode = secondLevelCode.toUpperCase();
                    }
                    if (error == null ||
                        (error != null && error.equalsIgnoreCase("N"))) {
                        cRow.setAttribute("TopLevelCode", topLevelCode);
                        cRow.setAttribute("SecondLevelCode", secondLevelCode);
                        RuleSetVORowImpl rwImpl =
                            (RuleSetVORowImpl)ruleSetVO.getCurrentRow();
                        String secondLevelMeaning =
                            rwImpl.retrieveSecLevelMeaning(secondLevelCode);
                        System.out.println("From AM Impl second level meaning " +
                                           secondLevelMeaning);
                        cRow.setAttribute("SecondLevelMeaning",
                                          secondLevelMeaning);
                    }
                    ruleSetVO.setCurrentRow(cRow);
                    //                    }
                }

                else if (configRuleSetMap != null && !configRuleSetMap.isEmpty()) {
                    String topLevelCode =
                        (String)configRuleSetMap.get("topLevelCode");
                    String secondLevelCode =
                        (String)configRuleSetMap.get("secondLevelCode");
                    String error = (String)configRuleSetMap.get("error");
                    if (error == null ||
                        (error != null && error.equalsIgnoreCase("N"))) {
                        if (secondLevelCode != null) {
                            secondLevelCode = secondLevelCode.toUpperCase();
                        }
                        cRow.setAttribute("TopLevelCode", topLevelCode);
                        cRow.setAttribute("SecondLevelCode", secondLevelCode);
                        RuleSetVORowImpl rwImpl =
                            (RuleSetVORowImpl)ruleSetVO.getCurrentRow();
                        String secondLevelMeaning =
                            rwImpl.retrieveSecLevelMeaning(secondLevelCode);
                        System.out.println("From AM Impl second level meaning " +
                                           secondLevelMeaning);
                        cRow.setAttribute("SecondLevelMeaning",
                                          secondLevelMeaning);
                    }

                    ruleSetVO.setCurrentRow(cRow);
                }
            }
        }


    public String callDuplicateQuoteAPI(String quoteFromSesion, int respId,
                                        int usrId) {
        //               String quoteFromSesion =
        //                   (String)ADFContext.getCurrent().getSessionScope().get("quoteNumber");
        String returnval = null;
        if (quoteFromSesion != null) {
            quoteFromSesion = quoteFromSesion.trim();
            int quoteNum = Integer.parseInt(quoteFromSesion);
            //            HttpSession sessionADF = request.getSession();
            CallableStatement cs = null;
            StringBuilder errorMsg = new StringBuilder("<html><body>");
            String returnMessage = "";
            String returnStatus = "";

            String stmt = "apps.XXAT_ASO_QUOTE_PKG.copy_quote(:1,:2,:3,:4,:5)";
            try {
                cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);

                if (quoteFromSesion != null) {
                    cs.setInt(1, quoteNum);
                } else {
                    errorMsg.append("<p><b> Quote Number is required.</b></p>");
                }
                cs.setInt(2, respId);
                cs.setInt(3, usrId);
                cs.registerOutParameter(4, Types.VARCHAR);
                cs.registerOutParameter(5, Types.VARCHAR);
                errorMsg.append("</body></html>");
                //                                   String err = "<html><body></body></html>";
                if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
                    cs.executeUpdate();
                    returnStatus = cs.getString(4);
                    returnMessage = cs.getString(5);
                    if (returnMessage != null)
                        System.out.println("return Message is:" +
                                           returnMessage + " ::msg::");
                }
            } catch (SQLException e) {
                errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
                //                e.printStackTrace();
            } finally {
                try {
                    if (cs != null)
                        cs.close();
                } catch (SQLException s) {
                    errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                    //                    s.printStackTrace();
                }
            }

            if (errorMsg.toString() != null &&
                !"<html><body></body></html>".equals(errorMsg.toString()))
                returnval = errorMsg.toString();
            else {
                if (returnStatus != null && returnMessage != null) {
                    returnStatus =
                            returnStatus.concat("-").concat(returnMessage);
                    returnval = returnStatus;
                } else
                    returnval = "Getting Error From API";
            }

        }
        return returnval;
    }


    public String callConfigLineToUpdateQuoteAPI(String quoteNum,
                                                 String quoteLineNum,
                                                 int itemQty,
                                                 String ConfighdrId,
                                                 String configRevNum,
                                                 int respId, int usrId) {
        Integer lineNum = null;
        if (quoteLineNum != null) {
            lineNum = Integer.parseInt(quoteLineNum);
        }

        CallableStatement cs = null;
        String returnval = null;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String returnMessage = "";
        String returnStatus = "";
        String stmt =
            "XXAT_ASO_QUOTE_PKG.Update_Configue_Line_To_Quote(:1,:2,:3,:4,:5,:6,:7,:8,:9)";
        try {
            cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);
            if (quoteNum != null)
                cs.setString(1, quoteNum);
            else
                errorMsg.append("<p><b> Quote Number is Missing.</b></p>");
            if (lineNum != null)
                cs.setInt(2, lineNum);
            else
                errorMsg.append("<p><b> Quote Line Number from configure line is Missing.</b></p>");
            if (itemQty > 0)
                cs.setInt(3, itemQty);
            else
                cs.setNull(3, java.sql.Types.NULL);
            if (ConfighdrId != null)
                cs.setString(4, ConfighdrId);
            else
                errorMsg.append("<p><b> Configurator header id from Configurator line is Missing.</b></p>");
            //                cs.setString(4, null);
            if (configRevNum != null)
                cs.setString(5, configRevNum);
            else
                errorMsg.append("<p><b> Configurator reverse number from Configurator line is Missing.</b></p>");
            //                cs.setString(5, null);
            cs.setInt(6, respId);
            cs.setInt(7, usrId);
            cs.registerOutParameter(8, Types.VARCHAR);
            cs.registerOutParameter(9, Types.VARCHAR);
            errorMsg.append("</body></html>");
            if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
                cs.executeUpdate();
                returnStatus = cs.getString(8);
                returnMessage = cs.getString(9);
                if (returnMessage != null) {
                    //                    System.out.println("return Message from update:" +
                    //                                       returnMessage);
                }
            }

        } catch (Exception e) {
            errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
            //            e.printStackTrace();
        } finally {
            try {
                if (cs != null)
                    cs.close();
            } catch (SQLException s) {
                errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                //                s.printStackTrace();
            }
        }
        if (errorMsg.toString() != null &&
            !"<html><body></body></html>".equals(errorMsg.toString()))
            returnval = errorMsg.toString();
        else {
            if (returnStatus != null && returnMessage != null) {
                returnStatus = returnStatus.concat("-").concat(returnMessage);
                returnval = returnStatus;
            } else
                returnval = "API Error";
        }
        return returnval;
    }


    public String callUpdateDiscountAPI(String quoteNum, String discount,
                                        int respId, int usrId) {

        CallableStatement cs = null;
        String returnval = null;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String returnMessage = "";
        String returnStatus = "";
        String stmt =
            "   XXAT_ASO_QUOTE_PKG.Update_Discount(:1,:2,:3,:4,:5,:6)";
        try {
            cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);
            if (quoteNum != null) {
                quoteNum = quoteNum.trim();
                cs.setString(1, quoteNum);
            } else
                errorMsg.append("<p><b> Quote Number is Missing.</b></p>");
            if (discount != null)
                cs.setString(2, discount);
            else
                errorMsg.append("<p><b> Discount Amount is Missing.</b></p>");

            cs.setInt(3, respId);
            cs.setInt(4, usrId);
            cs.registerOutParameter(5, Types.VARCHAR);
            cs.registerOutParameter(6, Types.VARCHAR);
            errorMsg.append("</body></html>");
            if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
                cs.executeUpdate();
                returnStatus = cs.getString(5);
                returnMessage = cs.getString(6);
            }
        } catch (Exception e) {
            errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
            //                e.printStackTrace();
        } finally {
            try {
                if (cs != null)
                    cs.close();
            } catch (SQLException s) {
                errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                //                    s.printStackTrace();
            }
        }
        if (errorMsg.toString() != null &&
            !"<html><body></body></html>".equals(errorMsg.toString()))
            returnval = errorMsg.toString();
        else {
            if (returnStatus != null && returnMessage != null) {
                returnStatus = returnStatus.concat("-").concat(returnMessage);
                returnval = returnStatus;
            } else
                returnval = "API Error";
        }
        return returnval;
    }


    public String callConfigLineToAddQuoteAPI(String quoteNum,
                                              String itemNumber, int itemQty,
                                              String orgNum,
                                              String ConfighdrId,
                                              String configRevNum, int respId,
                                              int usrId) {
        orgNum = "GDO";
        CallableStatement cs = null;
        String returnval = null;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String returnMessage = "";
        String returnStatus = "";
        String stmt =
            "XXAT_ASO_QUOTE_PKG.Add_Configue_Line_To_Quote(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10)";
        try {
            cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);
            if (quoteNum != null) {
                quoteNum = quoteNum.trim();
                cs.setString(1, quoteNum);
            } else
                errorMsg.append("<p><b> Quote Number is Missing.</b></p>");
            if (itemNumber != null)
                cs.setString(2, itemNumber);
            else
                errorMsg.append("<p><b> Item Number from Configurator line is Missing.</b></p>");
            //                cs.setString(2, null);
            if (itemQty > 0)
                cs.setInt(3, itemQty);
            else
                cs.setNull(3, java.sql.Types.NULL);
            if (orgNum != null)
                cs.setString(4, orgNum);
            else
                cs.setString(4, null);
            if (ConfighdrId != null)
                cs.setString(5, ConfighdrId);
            else
                errorMsg.append("<p><b> Configurator header id from Configurator line is Missing.</b></p>");
            //                cs.setString(5, null);
            if (configRevNum != null)
                cs.setString(6, configRevNum);
            else
                errorMsg.append("<p><b> Configurator reverse Number from Configurator line is Missing.</b></p>");
            //                cs.setString(6, null);
            cs.setInt(7, respId);
            cs.setInt(8, usrId);
            cs.registerOutParameter(9, Types.VARCHAR);
            cs.registerOutParameter(10, Types.VARCHAR);
            errorMsg.append("</body></html>");
            if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
                cs.executeUpdate();
                returnStatus = cs.getString(9);
                returnMessage = cs.getString(10);
            }
        } catch (Exception e) {
            errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
            //            e.printStackTrace();
        } finally {
            try {
                if (cs != null)
                    cs.close();
            } catch (SQLException s) {
                errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                //                s.printStackTrace();
            }
        }
        if (errorMsg.toString() != null &&
            !"<html><body></body></html>".equals(errorMsg.toString()))
            returnval = errorMsg.toString();
        else {
            if (returnStatus != null && returnMessage != null) {
                returnStatus = returnStatus.concat("-").concat(returnMessage);
                returnval = returnStatus;
            } else
                returnval = "API Error";
        }
        return returnval;
    }


    public String callWarrentyAPI(String quoteNum, String prodName, int respId,
                                  int usrId) {
        String returnval = null;
        if (quoteNum != null) {
            CallableStatement cs = null;
            StringBuilder errorMsg = new StringBuilder("<html><body>");
            String returnMessage = "";
            String returnStatus = "";
            quoteNum = quoteNum.trim();
            System.out.println("quoteNum:" + quoteNum + "prodName::" +
                               prodName + "respId:" + respId + "usrId:" +
                               usrId);

            String stmt =
                "apps.XXAT_ASO_QUOTE_PKG.Add_warranty(:1,:2,:3,:4,:5,:6)";
            try {
                cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);

                if (quoteNum != null) {
                    cs.setString(1, quoteNum);
                } else {
                    errorMsg.append("<p><b> Quote Number is required.</b></p>");
                }
                if (prodName != null) {
                    cs.setString(2, prodName);
                } else {
                    errorMsg.append("<p><b> Product Name is required.</b></p>");
                }
                cs.setInt(3, respId);
                cs.setInt(4, usrId);
                cs.registerOutParameter(5, Types.VARCHAR);
                cs.registerOutParameter(6, Types.VARCHAR);
                errorMsg.append("</body></html>");
                if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
                    cs.executeUpdate();
                    returnStatus = cs.getString(5);
                    returnMessage = cs.getString(6);
                    if (returnMessage != null)
                        System.out.println("return Message is:" +
                                           returnMessage + " ::msg::");
                }
            } catch (SQLException e) {
                errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
                //                returnMessage = e.getMessage();
            } finally {
                try {
                    if (cs != null)
                        cs.close();
                } catch (SQLException s) {
                    errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                    //                    s.printStackTrace();
                }
            }

            if (errorMsg.toString() != null &&
                !"<html><body></body></html>".equals(errorMsg.toString()))
                returnval = errorMsg.toString();
            else if (returnStatus != null) {
                if (returnStatus != null && returnMessage != null) {
                    returnStatus =
                            returnStatus.concat("-").concat(returnMessage);
                    returnval = returnStatus;
                } else
                    returnval = "API Error";
            }

        }
        return returnval;
    }

    public void initUserPreference() {
        //        ViewObjectImpl vo = this.getuserPrefEntityVO();
        ViewObjectImpl quotesVO = this.getQuotesVO();
        //        ViewObjectImpl orderVO = this.getOrderTypeVO();
        //        BigDecimal org = new BigDecimal(143);
        //        if (vo != null)
        //            vo.executeEmptyRowSet();
        //        if (orderVO != null) {
        //            orderVO.setNamedWhereClauseParam("p_orgId", null);
        //            orderVO.setNamedWhereClauseParam("p_orgId", org);
        //            orderVO.executeQuery();
        //        }
        if (quotesVO != null) {
            Row row = quotesVO.createRow();
            row.setAttribute("OrgId", 143);
            row.setAttribute("OrganizationUnit", "CAS-OU-7303");
            quotesVO.insertRow(row);
            quotesVO.setCurrentRow(row);


        }
    }

    public void initUserPref() {
        ViewObjectImpl vo = this.getQuotesVO();
        //        ViewObjectImpl salesChannelDVO =
        //            this.getSalesChannelDefaultUsrPrefVO1();
        //        if (salesChannelDVO != null) {
        //            Row r = salesChannelDVO.createRow();
        //            salesChannelDVO.insertRow(r);
        //            salesChannelDVO.setCurrentRow(r);
        //        }
        if (vo != null) {
            Row r = vo.createRow();
            vo.insertRow(r);
            vo.setCurrentRow(r);
            ADFContext.getCurrent().getSessionScope().put("ouGetters1", "Y");
            ADFContext.getCurrent().getSessionScope().put("ouGetters2", "Y");
        }
    }

    public void clearUserPrefVO(int usrId) {
        String query =
            "delete from xxat_userpref_globalchoice where user_id=?";
        PreparedStatement cs = null;
        ResultSet rs;
        try {
            cs = this.getDBTransaction().createPreparedStatement(query, 0);
            cs.setInt(1, usrId);
            cs.execute();
            cs.getConnection().commit();
            //            this.getDBTransaction().commit();

        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println(e.getMessage());
        } finally {
            if (cs != null) {
                try {
                    cs.close();

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        if (vo != null) {
            vo.clearCache();
            vo.setWhereClause(null);
            vo.setWhereClause("USER_ID =" + usrId);
            vo.executeQuery();
            System.out.println(vo.getEstimatedRowCount());
        }

    }
    
    
    public void clearUserPrefSCVO(int usrId) {
        String query =
            "delete from XXAT_USERPREF_SALESCHANNEL where user_id=?";
        PreparedStatement cs = null;
        ResultSet rs;
        try {
            cs = this.getDBTransaction().createPreparedStatement(query, 0);
            cs.setInt(1, usrId);
            cs.execute();
            cs.getConnection().commit();
            //            this.getDBTransaction().commit();

        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println(e.getMessage());
        } finally {
            if (cs != null) {
                try {
                    cs.close();

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }
        ViewObjectImpl vo = this.getuserPrefSCVO1();
        if (vo != null) {
            vo.clearCache();
            vo.setWhereClause(null);
            vo.setWhereClause("USER_ID =" + usrId);
            vo.executeQuery();
            System.out.println(vo.getEstimatedRowCount());
        }

    }

    
    
    

    public void getSalesChannelBasedUserPref(String salesChannel) {
        ViewObjectImpl vo = this.getQuotesVO();
        String custNum = null, custName = null;
        String currency = null, incoTerm = null, paymentTerm = null, ba = null;
        if (vo != null) {
           
                Row r = vo.getCurrentRow();
                if (r!=null) {
                    if(r.getAttribute("OrgId")!=null){
                QuotesVORowImpl rowImpl = (QuotesVORowImpl)vo.getCurrentRow();
                Map map =
                    rowImpl.getSalesChannelBasedCustomerDetails(salesChannel.toString());
                if (map != null) {
                    custNum = (String)map.get("custNum");
                    custName = (String)map.get("custName");
                    System.out.println(custNum);
                    System.out.println(custName);
                }
                currency = rowImpl.getSalesChannelBasedCurrency(salesChannel);
                incoTerm = rowImpl.getSalesChannelBasedIncoTerm(salesChannel);
                paymentTerm =
                        rowImpl.getSalesChannelBasedPaymentTerm(salesChannel);
                ba = rowImpl.getSalesChannelBasedBA(salesChannel);
                System.out.println("CustNum:" + r.getAttribute("CustNum"));
                System.out.println("CustomerName:" +
                                   r.getAttribute("CustomerName"));
    //                r.setAttribute("CustNum", "ATJ");
    //                r.setAttribute("CustomerName", "Advantest Corporation");
                 r.setAttribute("CustNum", custNum);
    //                r.setAttribute("CustomerName", custName);
    //                r.setAttribute("CustName", custName);
                System.out.println("CustNum:" + r.getAttribute("CustNum"));
                System.out.println("CustomerName:" +
                                   r.getAttribute("CustName"));
                getQuoteCustmerAddress(r);
                r.setAttribute("IncoTerms", incoTerm);
                r.setAttribute("Currency", currency);
                r.setAttribute("PaymentTerms", paymentTerm);
                r.setAttribute("BusinessAgreement", ba);
            }
                }
        }
    
    }


    public boolean getSalesChannelBasedUserPrefForUpdateQuote(String salesChannel) {
        ViewObjectImpl vo = this.getQuoteUpdateVO1();
        String custNum = null, custName = null;
        String currency = null, ba = null, incoTerm = null, paymentTerm = null;
        boolean isCustEditable = false;
        if (vo != null) {
            Row r = vo.getCurrentRow();
            QuoteUpdateVORowImpl rowImpl =
                (QuoteUpdateVORowImpl)vo.getCurrentRow();
            Map map =
                rowImpl.getSalesChannelBasedCustomerDetails(salesChannel);
            if (map != null) {

                custNum = (String)map.get("custNum");
                custName = (String)map.get("custName");
            }
            currency = rowImpl.getSalesChannelBasedCurrency(salesChannel);
            incoTerm = rowImpl.getSalesChannelBasedIncoTerm(salesChannel);
            paymentTerm =
                    rowImpl.getSalesChannelBasedPaymentTerm(salesChannel);
            ba = rowImpl.getSalesChannelBasedBA(salesChannel);
            isCustEditable = true;
            r.setAttribute("CustNum", custNum);
            r.setAttribute("Customername", custName);
            getQuoteCustmerAddressForUpdateQuote(r);
            r.setAttribute("Incoterms", incoTerm);
            r.setAttribute("CurrencyCode", currency);
            r.setAttribute("Paymentterms", paymentTerm);
            r.setAttribute("Agrimentname", ba);
        }
        return isCustEditable;
    }


    public String getFNDMsges(String msgName) {
        String msgText = null;
        if (msgName != null && !"".equalsIgnoreCase(msgName)) {
            Object[] obj = { msgName };
            Key key = new Key(obj);
            Row[] rows = this.getFndNewMessagesVO().findByKey(key, 1);
            if (rows != null && rows.length > 0)
                msgText = (String)rows[0].getAttribute("MessageText");
        }
        return msgText;
    }


    //    public Map<String, List> getSelectedOUValues(int usrId, List ouList) {
    //        Map<String, List> ouMap = new HashMap<String, List>();
    //        StringBuilder ousb = new StringBuilder();
    //        Row row = null;
    //        String ou = null;
    //        List temp = null;
    //
    //        List<String> selectedValues = new ArrayList<String>();
    //        List selectedOrgValues = new ArrayList();
    //        ViewObjectImpl vo = this.getuserPrefEntityVO();
    //        ViewObjectImpl ouVO = this.getOUVO();
    //        RowQualifier rq = new RowQualifier(ouVO);
    //
    //        if (ouList != null & ouList.size() > 0) {
    //            ousb.append("('");
    //            ousb.append(ouList.get(0));
    //            for (int i = 1; i < ouList.size(); i++) {
    //                ousb.append("','").append(ouList.get(i));
    //                //                    orderV.append("'").append(",").append("'").append(temp.get(i));
    //            }
    //            ousb.append("')");
    //            rq.setWhereClause("OperatingUnit in" + ousb.toString());
    //            Row filteredRows[] = ouVO.getFilteredRows(rq);
    //            for (Row r : filteredRows) {
    //                selectedValues.add(r.getAttribute("OperatingUnit").toString());
    //                selectedOrgValues.add(r.getAttribute("OrgId").toString());
    //                System.out.println("Filtered Row- " +
    //                                   r.getAttribute("OperatingUnit") + "n");
    //                System.out.println("Filtered Row- " + r.getAttribute("OrgId") +
    //                                   "n");
    //            }
    //        } else {
    //            if (vo != null) {
    //                String col_type = "Operating_unit";
    //                Object obj[] = { usrId, col_type };
    //                Key key = new Key(obj);
    //                Row[] rows = vo.findByKey(key, 2);
    //                if (rows != null && rows.length > 0) {
    //                    row = rows[0];
    //                    ou = (String)row.getAttribute("ColumnVal");
    //                    System.out.println("ou is:" + ou);
    //                }
    //                if (ouVO != null && ou != null) {
    //                    temp = Arrays.asList(ou.split("\\s*,\\s*"));
    //
    //                    ousb.append("(").append(ou).append(")");
    //                    if (temp != null && temp.size() > 0) {
    //                        rq.setWhereClause("OrgId in" + ousb);
    //                        Row filteredRows[] = ouVO.getFilteredRows(rq);
    //                        for (Row r : filteredRows) {
    //                            selectedValues.add(r.getAttribute("OperatingUnit").toString());
    //                            selectedOrgValues.add(r.getAttribute("OrgId"));
    //                            System.out.println("Filtered Row OU- " +
    //                                               r.getAttribute("OperatingUnit"));
    //                            System.out.println("Filtered Row-OrgList " +
    //                                               r.getAttribute("OrgId"));
    //                        }
    //                    }
    //                }
    //            }
    //        }
    //        ouMap.put("ouValues", selectedValues);
    //        ouMap.put("orgList", selectedOrgValues);
    //        return ouMap;
    //    }

    public List getSelectedOrderTypeValues(int usrId, String orgId) {
        StringBuilder orderV = new StringBuilder("(");
        String orderType = null;
        List selectedNames = new ArrayList();
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        ViewObjectImpl otVO = this.getOrderTypeVO();
        if (orgId != null) {
            String col_type = "'Order_type'";
            vo.clearCache();
            vo.setWhereClause(null);
            RowQualifier rq =
                new RowQualifier("ColumnType =" + col_type + " and UserId=" +
                                 usrId + " and OperatingUnit ='" + orgId +
                                 "'");
            Row[] rows = vo.getFilteredRows(rq);
            //        Object obj[] = { usrId, col_type };
            //        Key key = new Key(obj);
            //        Row[] rows = vo.findByKey(key, 2);
            if (rows != null && rows.length > 0) {
                orderType = (String)rows[0].getAttribute("ColumnVal");
            }
            if (orderType != null) {
                orderV.append(orderType).append(")");
                otVO.clearCache();
                otVO.setWhereClause(null);
                otVO.setNamedWhereClauseParam("p_orgId", null);
                otVO.setNamedWhereClauseParam("p_orgId", orgId);
                otVO.setWhereClause("transaction_type_id in" +
                                    orderV.toString());
                otVO.executeQuery();
                RowSetIterator iter = otVO.createRowSetIterator(null);
                while (iter.hasNext()) {
                    Row r = iter.next();
                    selectedNames.add((String)r.getAttribute("Name"));
                }
            }
        }
        return selectedNames;
    }
    String s = " AND EXISTS (\n" +
        "          SELECT 1\n" +
        "            FROM hz_cust_site_uses_all hzsu,\n" +
        "                 hz_cust_acct_sites_all hzas,\n" +
        "                 hz_party_sites hzps\n" +
        "           WHERE hzsu.primary_flag = 'Y'\n" +
        "             AND hzsu.cust_acct_site_id = hzas.cust_acct_site_id\n" +
        "             AND hzsu.org_id = hzas.org_id\n" +
        "             AND hzas.cust_account_id = ca.cust_account_id\n" +
        "             AND hzps.party_site_id = hzas.party_site_id" +
        "             AND hzsu.org_id in(";

    public List getSelectedCustomerNameValues(int usrId, String salesChannel,
                                              String orgId) {
        _logger.info("SudkuAmimpl: getSelectedCustomerNameValues: Start: customerName::");
        StringBuilder custNumsb = new StringBuilder("('");
        String custNumbers = null;
        List<String> temp = null;
        List selectedValues = new ArrayList();
        ViewObjectImpl vo = this.getuserPrefSCVO1();
        ViewObjectImpl custVO = this.getCustomerNameVO();
        if (salesChannel != null) {
            vo.clearCache();
            vo.setWhereClause(null);
            String col_type = "Customer";
            Object obj[] = { usrId, col_type, salesChannel, orgId };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 4);
            //    RowQualifier rq =
            //                    new RowQualifier("ColumnType =" + col_type +
            //                                     " and UserId=" + usrId + " and OperatingUnit ='"+orgId+"'"+ " and SalesChannel ='"+salesChannel+"'");
            //                        Row[] rows = vo.getFilteredRows(rq);
            if (rows != null && rows.length > 0) {
                _logger.info("SudkuAmimpl: getSelectedCustomerNameValues: check from userPref Table::");
                custNumbers = (String)rows[0].getAttribute("ColumnVal");
            }
            _logger.info("SudkuAmimpl: getSelectedCustomerNameValues: Start: cust Numbers::" +
                         custNumbers);
            if (custVO != null && custNumbers != null) {
                vo.clearCache();
                vo.setWhereClause(null);
                temp = Arrays.asList(custNumbers.split("\\s*,\\s*"));
                if (temp != null && temp.size() > 0) {
                    custNumsb.append(temp.get(0));
                    for (int i = 1; i < temp.size(); i++) {
                        custNumsb.append("','").append(temp.get(i));
                    }
                    custNumsb.append("')");
                    _logger.info("SudkuAmimpl: getSelectedCustomerNameValues: Start: cust Numbers::" +
                                 custNumsb.toString());
                    custVO.setNamedWhereClauseParam("p_orgId", orgId);
                    custVO.setWhereClause("accountnumber in " +
                                          custNumsb.toString());
                    custVO.executeQuery();
                    RowSetIterator iter = custVO.createRowSetIterator(null);
                    while (iter.hasNext()) {
                        Row r = iter.next();
                        selectedValues.add(r.getAttribute("Customername"));
                    }
                    //                    RowQualifier rq1 =
                    //                        new RowQualifier("Accountnumber in" + custNumsb.toString());
                    //                    //                                            rq.setWhereClause("Accountnumber in" +custNumsb.toString());
                    //                    Row fRows[] = custVO.getFilteredRows(rq1);
                    //                    for (Row r : fRows) {
                    //                        selectedValues.add(r.getAttribute("Customername"));
                    //                    }
                }
            }
        }
        _logger.info("SudkuAmimpl: getSelectedCustomerNameValues: End::");
        return selectedValues;
    }


    public List getSelectedCustNumValues(int usrId, String orgId) {
        long startTime = System.currentTimeMillis();
        System.out.println("SudokuAmImpl:getSelectedCustNumValues: Start " +
                           (System.currentTimeMillis() - startTime));
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        //        ViewObjectImpl custVO = this.getCustomerNameVO();   //p_orgId
        String customer = null;
        List selectedCustvals = new ArrayList();
        List<String> temp = null;
        String col_type = "'Customer'";
        vo.clearCache();
        vo.setWhereClause(null);
        RowQualifier rq1 =
            new RowQualifier("ColumnType =" + col_type + " and UserId=" +
                             usrId + " and OperatingUnit ='" + orgId + "'");
        Row[] rows = vo.getFilteredRows(rq1);
        //        Object obj[] = { usrId, col_type,orgId};
        //        Key key = new Key(obj);
        //        Row[] rows = vo.findByKey(key, 3);
        if (rows != null && rows.length > 0) {
            customer = (String)rows[0].getAttribute("ColumnVal");
        }
        if (customer != null) {
            temp = Arrays.asList(customer.split("\\s*,\\s*"));
            System.out.println("SudokuAmImpl:getSelectedCustNumValues: 2 " +
                               (System.currentTimeMillis() - startTime));
            //            if(temp!=null && temp.size()>0)
            //                      selectedCustvals = temp;
            for (String s : temp) {
                selectedCustvals.add(s);
                System.out.println("value is:" + s);
            }
            System.out.println("SudokuAmImpl:getSelectedCustNumValues: 3 " +
                               (System.currentTimeMillis() - startTime));
        }

        return selectedCustvals;
    }


    public List getSelectedCurrencyValues(int usrId) {
        long startTime = System.currentTimeMillis();
        System.out.println("from Sudoku:getSelectedCurrencyValues: Start " +
                           (System.currentTimeMillis() - startTime));
        StringBuilder currencysb = new StringBuilder("('");
        Row row = null;
        String currency = null;
        List<String> temp = null;
        List<String> selectedValues = new ArrayList<String>();
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        ViewObjectImpl currencyVO = this.getCurrencyVO();
        String col_type = "Currency";
        String orgId =
            (String)ADFContext.getCurrent().getSessionScope().get("UserBasedOrgId");
        Object obj[] = { usrId, col_type };
        Key key = new Key(obj);
        Row[] rows = vo.findByKey(key, 2);
        if (rows != null && rows.length > 0) {
            row = rows[0];
            currency = (String)row.getAttribute("ColumnVal");
        }
        System.out.println("from Sudoku:getSelectedCurrencyValues: UserPref lists " +
                           (System.currentTimeMillis() - startTime));
        if (currencyVO != null && currency != null) {
            temp = Arrays.asList(currency.split("\\s*,\\s*"));
            currencysb.append(temp.get(0));
            for (int i = 1; i < temp.size(); i++) {
                currencysb.append("','").append(temp.get(i));
            }
            currencysb.append("')");
            System.out.println("cusrrency List:" + currencysb.toString());
            RowQualifier rq =
                new RowQualifier("CurrencyCode in" + currencysb.toString());
            Row filteredRows[] = currencyVO.getFilteredRows(rq);
            System.out.println("from Sudoku:getSelectedCurrencyValues: After Filtieing " +
                               (System.currentTimeMillis() - startTime));
            for (Row r : filteredRows) {
                System.out.println("Value issss:" +
                                   r.getAttribute("Name").toString());
                selectedValues.add(r.getAttribute("Name").toString());
            }
            System.out.println("from Sudoku:getSelectedCurrencyValues: closing: " +
                               (System.currentTimeMillis() - startTime));
        }
        return selectedValues;
    }


    public List getSelectedIncoTermValues(int usrId) {
        StringBuilder incoTermsb = new StringBuilder(" ('");
        Row row = null;
        String incoTerm = null;
        List<String> temp = null;
        List selectedValues = new ArrayList<String>();
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        ViewObjectImpl incoTermVO = this.getIncoTermVO();
        String col_type = "IncoTerm";
        String orgId =
            (String)ADFContext.getCurrent().getSessionScope().get("UserBasedOrgId");
        Object obj[] = { usrId, col_type };
        Key key = new Key(obj);
        Row[] rows = vo.findByKey(key, 2);
        if (rows != null && rows.length > 0) {
            row = rows[0];
            incoTerm = (String)row.getAttribute("ColumnVal");
        }
        if (incoTermVO != null && incoTerm != null) {
            temp = Arrays.asList(incoTerm.split("\\s*,\\s*"));
            incoTermsb.append(temp.get(0));
            for (int i = 1; i < temp.size(); i++) {
                incoTermsb.append("'").append(",").append("'").append(temp.get(i));
            }
            incoTermsb.append("')");
            RowQualifier rq = new RowQualifier(incoTermVO);
            rq.setWhereClause("Meaning in" + incoTermsb.toString());
            Row filteredRows[] = incoTermVO.getFilteredRows(rq);
            for (Row r : filteredRows) {
                System.out.println("IncoTerm Value is:" +
                                   r.getAttribute("Description").toString());
                selectedValues.add(r.getAttribute("Description"));
            }
        }
        return selectedValues;
    }

    //For selected CSR Values


    public List getSelectedCSRValues(int usrId) {
        long startTime = System.currentTimeMillis();
        System.out.println("from Sudoku:getSelectedCSRalues: Start " +
                           (System.currentTimeMillis() - startTime));
        StringBuilder csrsb = new StringBuilder("(");
        String csr = null;
        List<String> selectedValues = new ArrayList<String>();
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        ViewObjectImpl csrVO = this.getCSRForGlobalChoiceVO1();
        String col_type = "CSR";
        String orgId =
            (String)ADFContext.getCurrent().getSessionScope().get("UserBasedOrgId");
        Object obj[] = { usrId, col_type };
        Key key = new Key(obj);
        Row[] rows = vo.findByKey(key, 2);
        if (rows != null && rows.length > 0) {
            csr = (String)rows[0].getAttribute("ColumnVal");
        }
        System.out.println("from Sudoku:getSelectedCSRValues: UserPref lists " +
                           (System.currentTimeMillis() - startTime));
        if (csrVO != null && csr != null) {
            csrsb.append(csr);
            csrsb.append(")");
            RowQualifier rq =
                new RowQualifier("PersonId in" + csrsb.toString());
            Row filteredRows[] = csrVO.getFilteredRows(rq);
            System.out.println("from Sudoku:getSelectedCsrValues: After Filtieing " +
                               (System.currentTimeMillis() - startTime));
            for (Row r : filteredRows) {
                System.out.println("Value issss:" +
                                   r.getAttribute("CustomerName").toString());
                selectedValues.add(r.getAttribute("CustomerName").toString());
            }
            System.out.println("from Sudoku:getSelectedCsrValues: closing: " +
                               (System.currentTimeMillis() - startTime));
        }
        return selectedValues;
    }


    public List getSelectedSalesChannelValues(int usrId) {
        String salesChannel = null;
        List selectedValues = new ArrayList();
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        String col_type = "Sales_Channel";
        String orgId =
            (String)ADFContext.getCurrent().getSessionScope().get("UserBasedOrgId");
        Object obj[] = { usrId, col_type };
        Key key = new Key(obj);
        Row[] rows = vo.findByKey(key, 2);
        if (rows != null && rows.length > 0) {
            salesChannel = (String)rows[0].getAttribute("ColumnVal");
            if (salesChannel != null) {
                selectedValues =
                        Arrays.asList(salesChannel.split("\\s*,\\s*"));
            }
        }
        return selectedValues;
    }


    public List getSelectedCurrencyValuesForSC(int usrId,
                                               String salesChannel) {
        long startTime = System.currentTimeMillis();
        _logger.info("SudkuAmimpl: getSelectedCurrencyValuesForSC: Start:::");
        System.out.println("from Sudoku:getSelectedCurrencyValues: Start " +
                           (System.currentTimeMillis() - startTime));
        StringBuilder currencysb = new StringBuilder("('");
        String currency = null;
        List<String> temp = null;
        List<String> selectedValues = new ArrayList<String>();
        ViewObjectImpl vo = this.getuserPrefSCVO1();
        ViewObjectImpl currencyVO = this.getCurrencyVO();
        String col_type = "Currency";
        if (salesChannel != null) {
            vo.clearCache();
            vo.setWhereClause(null);
            //            RowQualifier rq1 =
            //                new RowQualifier("UserId =" + usrId + " And ColumnType =" +
            //                                 "'" + col_type + "' AND SalesChannel=" + "'" +
            //                                 salesChannel + "'");
            //            //            RowQualifier rq1 = new RowQualifier("UserId ="+usrId+" And ColumnType ="+col_type+" AND SalesChannel="+salesChannel);
            //            Row r1[] = vo.getFilteredRows(rq1);
            //            if (r1 != null && r1.length > 0) {
            //                currency = (String)r1[0].getAttribute("ColumnVal");
            //            }
            //            vo.setWhereClause("USER_ID ="+usrId+" And COLUMN_TYPE ="+"'"+col_type+"' AND SALES_CHANNEL="+"'"+salesChannel+"'");
            //            System.out.println("Query:"+vo.getQuery());
            //            vo.executeQuery();
            //            RowSetIterator iter = vo.getRowSetIterator();
            //            while(iter.hasNext()){
            //                Row r = iter.next();
            //                    currency = (String)r.getAttribute("ColumnVal");
            //                }
            String orgId =
                (String)ADFContext.getCurrent().getSessionScope().get("SCBasedOrgId");
            Object obj[] = { usrId, col_type, salesChannel, orgId };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 4);
            if (rows != null && rows.length > 0) {
                currency = (String)rows[0].getAttribute("ColumnVal");
            }
            System.out.println("from Sudoku:getSelectedCurrencyValues: UserPref lists " +
                               (System.currentTimeMillis() - startTime));
            if (currencyVO != null && currency != null) {
                currencyVO.clearCache();
                temp = Arrays.asList(currency.split("\\s*,\\s*"));
                currencysb.append(temp.get(0));
                for (int i = 1; i < temp.size(); i++) {
                    currencysb.append("','").append(temp.get(i));
                }
                currencysb.append("')");

                System.out.println("cusrrency List:" + currencysb.toString());
                RowQualifier rq =
                    new RowQualifier("CurrencyCode in" + currencysb.toString());
                Row filteredRows[] = currencyVO.getFilteredRows(rq);
                System.out.println("from Sudoku:getSelectedCurrencyValues: After Filtieing " +
                                   (System.currentTimeMillis() - startTime));
                for (Row r : filteredRows) {
                    System.out.println("Value issss:" +
                                       r.getAttribute("Name").toString());
                    selectedValues.add(r.getAttribute("Name").toString());
                }
            }
            System.out.println("from Sudoku:getSelectedCurrencyValues: closing: " +
                               (System.currentTimeMillis() - startTime));
        }
        return selectedValues;
    }


    public List getSelectedIncoTermValuesForSC(int usrId,
                                               String salesChannel) {
        StringBuilder incoTermsb = new StringBuilder(" ('");
        String incoTerm = null;
        List<String> temp = null;
        List selectedValues = new ArrayList();
        ViewObjectImpl vo = this.getuserPrefSCVO1();
        ViewObjectImpl incoTermVO = this.getIncoTermVO();
        if (salesChannel != null && incoTermVO != null) {
            incoTermVO.clearCache();
            vo.clearCache();
            vo.setWhereClause(null);
            String col_type = "IncoTerm";
            String orgId =
                (String)ADFContext.getCurrent().getSessionScope().get("SCBasedOrgId");
            //            RowQualifier rq1 =
            //                new RowQualifier("UserId =" + usrId + " And ColumnType =" +
            //                                 "'" + col_type + "' AND SalesChannel=" + "'" +
            //                                 salesChannel + "'");
            //            Row r1[] = vo.getFilteredRows(rq1);
            //            if (r1 != null && r1.length > 0) {
            //                incoTerm = (String)r1[0].getAttribute("ColumnVal");
            //            }
            Object obj[] = { usrId, col_type, salesChannel, orgId };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 4);
            if (rows != null && rows.length > 0) {
                incoTerm = (String)rows[0].getAttribute("ColumnVal");
            }
            if (incoTermVO != null && incoTerm != null) {
                incoTermVO.clearCache();
                temp = Arrays.asList(incoTerm.split("\\s*,\\s*"));
                incoTermsb.append(temp.get(0));
                for (int i = 1; i < temp.size(); i++) {
                    incoTermsb.append("'").append(",").append("'").append(temp.get(i));
                }
                incoTermsb.append("')");
                RowQualifier rq = new RowQualifier(incoTermVO);
                rq.setWhereClause("Meaning in" + incoTermsb.toString());
                Row filteredRows[] = incoTermVO.getFilteredRows(rq);
                for (Row r : filteredRows) {
                    System.out.println("IncoTerm Value is:" +
                                       r.getAttribute("Description").toString());
                    selectedValues.add(r.getAttribute("Description"));
                }
            }
        }
        return selectedValues;
    }


    public List getSelectedPaymentTermValuesForSC(int usrId,
                                                  String salesChannel) {
        StringBuilder paymentTermsb = new StringBuilder(" ('");
        String paymentTerm = null;
        List<String> temp = null;
        List selectedValues = new ArrayList();
        ViewObjectImpl vo = this.getuserPrefSCVO1();
        ViewObjectImpl paymentTermVO = this.getPaymentTermsVO();
        String orgId =
            (String)ADFContext.getCurrent().getSessionScope().get("SCBasedOrgId");
        String col_type = "PaymentTerms";
        if (salesChannel != null) {
            vo.clearCache();
            vo.setWhereClause(null);
            //            RowQualifier rq1 =
            //                new RowQualifier("UserId =" + usrId + " And ColumnType =" +
            //                                 "'" + col_type + "' AND SalesChannel=" + "'" +
            //                                 salesChannel + "'");
            //            Row r1[] = vo.getFilteredRows(rq1);
            //            if (r1 != null && r1.length > 0) {
            //                paymentTerm = (String)r1[0].getAttribute("ColumnVal");
            //            }
            Object obj[] = { usrId, col_type, salesChannel, orgId };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 4);
            if (rows != null && rows.length > 0) {
                paymentTerm = (String)rows[0].getAttribute("ColumnVal");
            }
            if (paymentTermVO != null && paymentTerm != null) {
                paymentTermVO.clearCache();
                temp = Arrays.asList(paymentTerm.split("\\s*,\\s*"));
                paymentTermsb.append(temp.get(0));
                for (int i = 1; i < temp.size(); i++) {
                    paymentTermsb.append("'").append(",").append("'").append(temp.get(i));
                }
                paymentTermsb.append("')");
                RowQualifier rq = new RowQualifier(paymentTermVO);
                rq.setWhereClause("Name in" + paymentTermsb.toString());
                Row filteredRows[] = paymentTermVO.getFilteredRows(rq);
                for (Row r : filteredRows) {
                    System.out.println("PaymentTerm Value is:" +
                                       r.getAttribute("Description").toString());
                    selectedValues.add(r.getAttribute("Description").toString());
                }
            }
        }
        return selectedValues;
    }


    public List getSelectedBusinessAgreementForSC(int usrId,
                                                  String salesChannel) {
        StringBuilder baSB = new StringBuilder(" ('");
        String bAgeement = null;
        List<String> temp = null;
        List selectedValues = new ArrayList();
        ViewObjectImpl vo = this.getuserPrefSCVO1();
        ViewObjectImpl baVO = this.getbusinessAgreementVo();
        String orgId =
            (String)ADFContext.getCurrent().getSessionScope().get("SCBasedOrgId");
        if (salesChannel != null) {
            vo.clearCache();
            vo.setWhereClause(null);
            String col_type = "Business_Agreement";
            //            RowQualifier rq1 =
            //                new RowQualifier("UserId =" + usrId + " And ColumnType =" +
            //                                 "'" + col_type + "' AND SalesChannel=" + "'" +
            //                                 salesChannel + "'");
            //            Row r1[] = vo.getFilteredRows(rq1);
            //            if (r1 != null && r1.length > 0) {
            //                bAgeement = (String)r1[0].getAttribute("ColumnVal");
            //            }
            Object obj[] = { usrId, col_type, salesChannel, orgId };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 4);
            if (rows != null && rows.length > 0) {
                bAgeement = (String)rows[0].getAttribute("ColumnVal");
            }
            if (baVO != null && bAgeement != null) {
                baVO.clearCache();
                temp = Arrays.asList(bAgeement.split("\\s*,\\s*"));
                baSB.append(temp.get(0));
                for (int i = 1; i < temp.size(); i++) {
                    baSB.append("','").append(temp.get(i));
                }
                baSB.append("')");
                RowQualifier rq = new RowQualifier(baVO);
                rq.setWhereClause("AgreementId in" + baSB.toString());
                Row filteredRows[] = baVO.getFilteredRows(rq);
                for (Row r : filteredRows) {
                    System.out.println("business Agreement Value is:" +
                                       r.getAttribute("Name").toString());
                    selectedValues.add(r.getAttribute("Name"));
                }
            }
        }
        return selectedValues;
    }


    public void validatePrefStaticValues(int usrId, String numberFormat) {
            ViewObjectImpl quotesVo = this.getQuotesVO();
            ViewObjectImpl userPrefVO = this.getuserPrefEntityVO();
            //        String orgId = (String)ADFContext.getCurrent().getSessionScope().get("UserBasedOrgId");
            Row row = null;
            if (quotesVo != null) {
                Row quotesRow = quotesVo.getCurrentRow();
                if (quotesRow != null) {
                    String prdNumRefConfig = "Prd_num_ref_config";
     
                    String prdNumTargetConfig = "Prd_num_target_config";
     
                    String refPriceRefConfig = "Ref_price_ref_config";
     
                    String refPriceTargetConfig = "Ref_price_target_config";
     
                    String numFormat = "Num_format";
     
                    Object PrdNumrefobj[] = { usrId, prdNumRefConfig };
     
                    if (PrdNumrefobj.length > 0) {
     
                        Key key = new Key(PrdNumrefobj);
     
                        Row[] prdNumRef = userPrefVO.findByKey(key, 2);
     
                        if (prdNumRef != null && prdNumRef.length > 0) {
     
                            row = prdNumRef[0];
     
                        } else {
     
                            row = userPrefVO.createRow();
     
                            row.setAttribute("UserId", usrId);
     
                            row.setAttribute("ColumnType", prdNumRefConfig);
     
                            //                        row.setAttribute("OperatingUnit", orgId);
     
                        }
     
                        if (row != null) {
     
                            System.out.println("user Name:" + row.
     
                                    getAttribute("UserId") + "::column_name::" +
     
                                    row.
     
                                    getAttribute("ColumnType"));
     
                            if (quotesRow.getAttribute("PrdNumRefConfig") !=
                                null) {
     
                                row.setAttribute("ColumnVal", null);
     
                                row.setAttribute("ColumnVal", quotesRow.
     
                                        getAttribute("PrdNumRefConfig"));
     
                            }
     
                            else {
     
                                row.setAttribute("ColumnVal", "N");
     
                            }
     
                        }
     
                    }
     
                    Object prdNumTCon[] = { usrId, prdNumTargetConfig };
     
                    if (prdNumTCon.length > 0) {
     
                        Key key = new Key(prdNumTCon);
     
                        Row[] prdNumT = userPrefVO.findByKey(key, 2);
     
                        if (prdNumT != null && prdNumT.length > 0) {
     
                            row = prdNumT[0];
     
                        } else {
     
                            row = userPrefVO.createRow();
     
                            row.setAttribute("UserId", usrId);
     
                            row.setAttribute("ColumnType", prdNumTargetConfig);
     
                            //                        row.setAttribute("OperatingUnit", orgId);
     
                        }
     
                        if (row != null) {
     
                            System.out.println("user Name:" + row.
     
                                    getAttribute("UserId") + "::column_name::" +
     
                                    row.
     
                                    getAttribute("ColumnType"));
     
                            if (quotesRow.getAttribute("PrdNumTargetConfig") !=
                                null) {
     
                                row.setAttribute("ColumnVal", null);
     
                                row.setAttribute("ColumnVal", quotesRow.
     
                                        getAttribute("PrdNumTargetConfig"));
     
                            }
     
                        }
     
                    }
     
     
                    Object refNumRefCon[] = { usrId, refPriceRefConfig };
     
                    if (refNumRefCon.length > 0) {
     
                        Key key = new Key(refNumRefCon);
     
                        Row[] refNumRCon = userPrefVO.findByKey(key, 2);
     
                        if (refNumRCon != null && refNumRCon.length > 0) {
     
                            row = refNumRCon[0];
     
                        } else {
     
                            row = userPrefVO.createRow();
     
                            row.setAttribute("UserId", usrId);
     
                            row.setAttribute("ColumnType", refPriceRefConfig);
     
                            //                        row.setAttribute("OperatingUnit", orgId);
     
                        }
     
                        if (row != null) {
     
                            System.out.println("user Name:" + row.
     
                                    getAttribute("UserId") + "::column_name::" +
     
                                    row.
     
                                    getAttribute("ColumnType"));
     
                            if (quotesRow.getAttribute("RefPriceRegConfig") !=
                                null) {
     
                                row.setAttribute("ColumnVal", null);
     
                                row.setAttribute("ColumnVal", quotesRow.
     
                                        getAttribute("RefPriceRegConfig"));
     
                            }
     
                        }
     
                    }
     
     
                    Object refPriceTConfig[] = { usrId, refPriceTargetConfig };
     
                    if (refPriceTConfig.length > 0) {
     
                        Key key = new Key(refPriceTConfig);
     
                        Row[] refPriceTCon = userPrefVO.findByKey(key, 2);
     
                        if (refPriceTCon != null && refPriceTCon.length > 0) {
     
                            row = refPriceTCon[0];
     
                        } else {
     
                            row = userPrefVO.createRow();
     
                            row.setAttribute("UserId", usrId);
     
                            row.setAttribute("ColumnType", refPriceTargetConfig);
     
                            //                        row.setAttribute("OperatingUnit", orgId);
     
                        }
     
                       if (row != null) {
     
                            System.out.println("user Name:" + row.
     
                                    getAttribute("UserId") + "::column_name::" +
     
                                    row.
     
                                    getAttribute("ColumnType"));
     
                            if (quotesRow.getAttribute("RefPriceTargetConfig") !=
                                null) {
     
                                row.setAttribute("ColumnVal", null);
     
                                row.setAttribute("ColumnVal", quotesRow.
     
                                        getAttribute("RefPriceTargetConfig"));
     
                            }
     
                        }
     
                    }
                    if (numberFormat != null) {     
                        String groupSeparator = null,decimalSeparator = null;
                        char gs = numberFormat.charAt(2);
                        char ds = numberFormat.charAt(6);
                        if(gs ==' ')
                            groupSeparator = "SPACE";
                        else if(gs ==',')
                        groupSeparator = "COMMA";
                        else if(gs =='\'')
                        groupSeparator = "APOSTROPHE";
                            else if(gs =='.')
                            groupSeparator = "DOT";
                        else
                        groupSeparator = null;
                        
                        if(ds ==' ')
                            decimalSeparator = "SPACE";
                        else if(ds ==',')
                        decimalSeparator = "COMMA";
                        else if(ds =='\'')
                        decimalSeparator = "APOSTROPHE";
                            else if(ds =='.')
                            decimalSeparator = "DOT";
                        else
                        decimalSeparator = null;
                        
                        Object numFormating[] = { usrId, numFormat };
                        //                if (numFormating.length > 0) {
                        Key key = new Key(numFormating);
                        Row[] numFRow = userPrefVO.findByKey(key, 2);
                        if (numFRow != null && numFRow.length > 0) {
                            row = numFRow[0];
                        } else {
                            row = userPrefVO.createRow();
                            row.setAttribute("UserId", usrId);
                            row.setAttribute("ColumnType", numFormat);
                            //                        row.setAttribute("OperatingUnit", orgId);
                        }
                        if (row != null) {
                            System.out.println("user Name:" + row.
                                    getAttribute("UserId") + "::column_name::" +
                                    row.getAttribute("ColumnType"));
                            row.setAttribute("ColumnVal", numberFormat);
                            row.setAttribute("DecimalSeperator", decimalSeparator);
                            row.setAttribute("GroupSeperator", groupSeparator);
                            
                        }
                        //                }
                    }
                }
            }
        }


    public void getViewAccessors(int usrId) {
        ViewObjectImpl prefVO = this.getuserPrefEntityVO();
        String colType = "Order_type";
        StringBuilder orderTypeValueList = new StringBuilder("(");
        ViewObjectImpl vo = this.getQuotesVO();
        RowSet lov = (RowSet)vo.getCurrentRow().getAttribute("OrderTypeVO");
        ViewObjectImpl va = (ViewObjectImpl)lov.getViewObject();
        if (va != null) {
            Object obj[] = { usrId, colType };
            Key key = new Key(obj);
            Row[] rows = prefVO.findByKey(key, 2);
            if (rows != null && rows.length > 0) {
                orderTypeValueList.append(rows[0].getAttribute("ColumnVal"));
                //                   System.out.println("list values are:"+orderTypeValueList);
            } else
                orderTypeValueList.append("''");

            orderTypeValueList.append(")");
            va.setWhereClause("transaction_type_id in" +
                              orderTypeValueList.toString());
            va.setNamedWhereClauseParam("p_orgId", 143);
            System.out.println("Query::" + va.getQuery());
            va.executeQuery();
            System.out.println(va);
            System.out.println(va.getEstimatedRowCount());


        }

    }


    //    public void filterOrderTypeRecords(int usrId){
    //        StringBuilder orderV = new StringBuilder(" ('");
    //        List<String> temp =null;
    //          ViewObjectImpl vo = this.getuserPrefEntityVO();
    //          ViewObjectImpl orderTypeVO = this.getOrderTypeVO();
    //          String orderTypeValueList = null;
    //          String colType = "Order_type";
    //          Object obj[] = {usrId,colType};
    //          Key key = new Key(obj);
    //          Row[] rows = vo.findByKey(key,2);
    //          if(rows!=null && rows.length>0){
    //              orderTypeValueList = (String)rows[0].getAttribute("ColumnVal");
    //              System.out.println("list values are:"+orderTypeValueList);
    //              temp =  Arrays.asList(orderTypeValueList.split("\\s*,\\s*"));
    //              orderV.append(temp.get(0));
    //              for(int i=1;i<temp.size();i++)
    //                 orderV.append("'").append(",").append("'").append(temp.get(i));
    //
    //              orderV.append("')");
    //              orderTypeVO.setWhereClause("transaction_type_id in"+orderV.toString());
    //              System.out.println("Query::"+orderTypeVO.getQuery());
    //              orderTypeVO.executeQuery();
    //              }
    //        }


    public void filterOrderTypeRecords(int usrId) {
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        ViewObjectImpl orderTypeVO = this.getOrderTypeVO();
        StringBuilder orderTypeValueList = new StringBuilder("(");
        String colType = "Order_type";
        String orgId =
            (String)ADFContext.getCurrent().getSessionScope().get("UserBasedOrgId");
        Object obj[] = { usrId, colType, orgId };
        Key key = new Key(obj);
        Row[] rows = vo.findByKey(key, 3);
        if (rows != null && rows.length > 0) {
            orderTypeValueList.append(rows[0].getAttribute("ColumnVal"));
            System.out.println("list values are:" + orderTypeValueList);
        }
        orderTypeValueList.append(")");
        orderTypeVO.setWhereClause("transaction_type_id in" +
                                   orderTypeValueList.toString());
        System.out.println("Query::" + orderTypeVO.getQuery());
        orderTypeVO.executeQuery();
    }


    // Validate OU Values for Preference page

    public String validateOUValues(int usrId, List ouValues) {
        StringBuilder errorMsg = new StringBuilder("");
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        if (ouValues != null && ouValues.size() > 0) {
            StringBuilder sb = new StringBuilder();
            int size = ouValues.size();
            sb.append(ouValues.get(0));
            for (int i = 1; i < ouValues.size(); i++) {
                System.out.println("selected valuseaa:" + ouValues.get(i));
                sb.append(",").append(ouValues.get(i));
            }
            String temp = sb.toString();
            if (temp != null && temp.endsWith(",")) {
                temp = temp.substring(0, temp.length() - 1);
            }
            System.out.println("after removing last comma:" + temp);
            Row row = null;
            String colType = "Operating_unit";
            if (vo != null) {
                if (size > 0) {
                    Object obj[] = { usrId, colType };
                    Key key = new Key(obj);
                    Row[] rows = vo.findByKey(key, 3);
                    if (rows != null && rows.length > 0) {
                        row = rows[0];
                    } else if (temp != null) {
                        row = vo.createRow();
                        row.setAttribute("UserId", usrId);
                        row.setAttribute("ColumnType", "Operating_unit");
                    } else
                        row = null;
                    if (row != null) {
                        System.out.println("user Name:" +
                                           row.getAttribute("UserId") +
                                           "::column_name::" +
                                           row.getAttribute("ColumnType"));
                        row.setAttribute("ColumnVal", null);
                        row.setAttribute("ColumnVal", temp);
                        //                        errorMsg = "Success";
                    }
                }
            }
        }
        return errorMsg.toString();
    }


    // Validate Customer Values for Preference page

    public String validateCustValues(int usrId, List custValues,
                                     String custDefaultVal, String orgId) {
        StringBuilder errorMsg = new StringBuilder("");
        StringBuilder sb = new StringBuilder();
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        if (custValues != null && custValues.size() > 0) {
            sb.append(custValues.get(0));
            for (int i = 1; i < custValues.size(); i++) {
                System.out.println("selected valuseaa:" + custValues.get(i));
                sb.append(",").append(custValues.get(i));
            }
        }
        Row row = null;
        String colType = "Customer";
        if (vo != null) {
            RowQualifier rq1 =
                new RowQualifier("ColumnType ='" + colType + "'" +
                                 " and UserId=" + usrId +
                                 " and OperatingUnit ='" + orgId + "'");
            Row[] rows = vo.getFilteredRows(rq1);
            //                Object obj[] = { usrId, colType,orgId };
            //                Key key = new Key(obj);
            //                Row[] rows = vo.findByKey(key, 3);
            if (rows != null && rows.length > 0) {
                row = rows[0];
            } else if (custDefaultVal != null ||
                       !sb.toString().equalsIgnoreCase("")) {
                row = vo.createRow();
                row.setAttribute("UserId", usrId);
                row.setAttribute("ColumnType", "Customer");
                row.setAttribute("OperatingUnit", orgId);
                row.setAttribute("DefaultVal", custDefaultVal);
            } else
                row = null;
            if (row != null) {
                System.out.println("user Name:" + row.getAttribute("UserId") +
                                   "::column_name::" +
                                   row.getAttribute("ColumnType"));
                row.setAttribute("ColumnVal", sb.toString());
                row.setAttribute("DefaultVal", custDefaultVal);
            }
        }
        return errorMsg.toString();
    }

    //    public String validateCustValuesForSC(int usrId, List custValues,
    //                                          String custDefaultVal,
    //                                          String salesChannel,String orgId) {
    //
    //        _logger.info("SudkuAmimpl: validateCustValuesForSC: Start: customerName::" +
    //                     custDefaultVal);
    //        StringBuilder errorMsg = new StringBuilder("");
    //        String defaultVal = null,temp =null;
    //        ViewObjectImpl vo = this.getuserPrefSCVO1();
    //        ViewObjectImpl custVO = this.getCustomerNameVO();
    //        StringBuilder custNumber = null;
    //        StringBuilder sb = new StringBuilder("('");
    //        if(custVO!=null){
    //            custVO.clearCache();
    //            custVO.setWhereClause(null);
    //            custVO.setNamedWhereClauseParam("p_orgId", null);
    //                custVO.setNamedWhereClauseParam("p_orgId", orgId);
    //                custVO.setWhereClause("customername ='"+custDefaultVal+"'");
    //            System.out.println("Query:"+custVO.getQuery());
    //                custVO.executeQuery();
    //                RowSetIterator iter = custVO.createRowSetIterator(null);
    //                while(iter.hasNext()){
    //                    Row r = iter.next();
    //                        defaultVal = (String)r.getAttribute("Accountnumber");
    //                    }
    //            }
    //        if (custValues != null && custValues.size() > 0) {
    //
    //            sb.append(custValues.get(0));
    //            for (int i = 1; i < custValues.size(); i++) {
    //                System.out.println("selected valuseaa:" + custValues.get(i));
    //                sb.append("','").append(custValues.get(i));
    //            }
    //        }
    //            sb.append("')");
    //            _logger.info("SudkuAmimpl: validateCustValuesForSC: : set of customoer names:" +
    //                         sb.toString());
    //            System.out.println(sb.toString());
    //            custVO.clearCache();
    //            custVO.setWhereClause(null);
    //            custVO.setNamedWhereClauseParam("p_orgId", null);
    //                custVO.setWhereClause("customername in"+sb.toString());
    //                custVO.setNamedWhereClauseParam("p_orgId", orgId);
    //
    //                custVO.executeQuery();
    //                RowSetIterator iter = custVO.createRowSetIterator(null);
    //                while(iter.hasNext()){
    //                    Row r = iter.next();
    //                    if(r!=null){
    //                    System.out.println(""+r.getAttribute("Accountnumber"));
    //                        custNumber.append(r.getAttribute("Accountnumber").toString());
    //                       custNumber.append(",");
    //                    }
    //                    }
    //                if(iter!=null)
    //                    iter.closeRowSetIterator();
    //                if(custNumber!=null && custNumber.toString().equalsIgnoreCase("(") )
    //                    temp = custNumber.toString();
    //        if (temp != null && temp.endsWith(",")) {
    //            temp = temp.substring(0, temp.length() - 1);
    //        }
    //
    //             System.out.println("Customer Numbers:"+temp);
    ////            RowQualifier rq =
    ////                new RowQualifier("Customername in" + sb.toString());
    ////            Row r[] = custVO.getFilteredRows(rq);
    ////            if (r!=null && r.length>0) {
    ////            custNumber.append(r[0].getAttribute("Accountnumber"));
    ////            for (Row r1 : r) {
    ////                custNumber.append(",").append(r1.getAttribute("Accountnumber"));
    ////            }
    ////        }
    ////            _logger.info("SudkuAmimpl: validateCustValuesForSC: : Customer numbers::" +
    ////                         custNumber.toString());
    //
    //        Row row = null;
    //        String colType = "Customer";
    //        if (vo != null) {
    ////            RowQualifier rq1 =
    ////                                new RowQualifier("ColumnType =" + colType +
    ////                                                 " and UserId=" + usrId + " and OperatingUnit ='"+orgId+"'"+ " and SalesChannel ='"+salesChannel+"'");
    ////                                    Row[] rows = vo.getFilteredRows(rq1);
    //            Object obj[] = { usrId, colType, salesChannel,orgId };
    //            Key key = new Key(obj);
    //            Row[] rows = vo.findByKey(key, 4);
    //            if (rows != null && rows.length > 0) {
    //                row = rows[0];
    //            } else if (defaultVal != null || custNumber!=null) {
    //                row = vo.createRow();
    //                row.setAttribute("UserId", usrId);
    //                row.setAttribute("ColumnType", "Customer");
    //                row.setAttribute("SalesChannel", salesChannel);
    //                row.setAttribute("OperatingUnit", orgId);
    ////                if (defaultVal != null)
    //                    row.setAttribute("DefaultVal", defaultVal);
    //            }
    //            if (row != null) {
    //                System.out.println("user Name:" + row.getAttribute("UserId") +
    //                                   "::column_name::" +
    //                                   row.getAttribute("ColumnType"));
    //
    ////                if (custNumber != null)
    //                    row.setAttribute("ColumnVal", temp);
    //
    ////                if (defaultVal != null)
    //                    row.setAttribute("DefaultVal", defaultVal);
    //
    //            }
    //        }
    //        return errorMsg.toString();
    //    }

    public String validateCustValuesForSC(int usrId, List custValues,
                                          String custDefaultVal,
                                          String salesChannel, String orgId) {

        _logger.info("SudkuAmimpl: validateCustValuesForSC: Start: customerName::" +
                     custDefaultVal);
        StringBuilder errorMsg = new StringBuilder("");
        String defaultVal = null;
        ViewObjectImpl vo = this.getuserPrefSCVO1();
        ViewObjectImpl custVO = this.getCustomerNameVO();
        StringBuilder custNumber = new StringBuilder("");
        StringBuilder sb = new StringBuilder("('");
        if (custVO != null && custDefaultVal != null) {
            custVO.clearCache();
            custVO.setWhereClause(null);
            custVO.setNamedWhereClauseParam("p_orgId", null);
            custVO.setNamedWhereClauseParam("p_orgId", orgId);
            custVO.setWhereClause("customername ='" + custDefaultVal + "'");
            System.out.println("Query:" + custVO.getQuery());
            custVO.executeQuery();
            RowSetIterator iter = custVO.createRowSetIterator(null);
            while (iter.hasNext()) {
                Row r = iter.next();
                defaultVal = (String)r.getAttribute("Accountnumber");
            }
        }
        if (custValues != null) {
            if (custValues.size() > 0) {
                sb.append(custValues.get(0));
                for (int i = 1; i < custValues.size(); i++) {
                    System.out.println("selected valuseaa:" +
                                       custValues.get(i));
                    sb.append("','").append(custValues.get(i));
                }
            }
        }
        sb.append("')");
        _logger.info("SudkuAmimpl: validateCustValuesForSC: : set of customoer names:" +
                     sb.toString());
        if (sb.toString() != null && !sb.toString().equalsIgnoreCase("('')")) {
            custVO.clearCache();
            custVO.setWhereClause(null);
            custVO.setNamedWhereClauseParam("p_orgId", null);
            //                custVO.setWhereClause("customername in"+sb.toString());
            custVO.setNamedWhereClauseParam("p_orgId", orgId);
            RowQualifier rq =
                new RowQualifier("Customername in" + sb.toString());
            Row r[] = custVO.getFilteredRows(rq);
            custNumber.append(r[0].getAttribute("Accountnumber"));
            for (int i = 1; i < r.length; i++) {
                System.out.println("selected valuseaa:" +
                                   r[i].getAttribute("Accountnumber"));
                custNumber.append(",").append(r[i].getAttribute("Accountnumber"));
            }
            
            
//            for (Row r1 : r) {
//                custNumber.append(",").append(r1.getAttribute("Accountnumber"));
//            }
        }
        _logger.info("SudkuAmimpl: validateCustValuesForSC: : Customer numbers::" +
                     custNumber.toString());

        Row row = null;
        String colType = "Customer";
        if (vo != null) {
            vo.clearCache();
            vo.setWhereClause(null);
            //            RowQualifier rq1 =
            //                                new RowQualifier("ColumnType =" + colType +
            //                                                 " and UserId=" + usrId + " and OperatingUnit ='"+orgId+"'"+ " and SalesChannel ='"+salesChannel+"'");
            //                                    Row[] rows = vo.getFilteredRows(rq1);
            Object obj[] = { usrId, colType, salesChannel, orgId };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 4);
            if (rows != null && rows.length > 0) {
                row = rows[0];
            } else if (defaultVal != null ||
                       !custNumber.toString().equalsIgnoreCase("")) {
                row = vo.createRow();
                row.setAttribute("UserId", usrId);
                row.setAttribute("ColumnType", "Customer");
                row.setAttribute("SalesChannel", salesChannel);
                row.setAttribute("OperatingUnit", orgId);
                //                if (defaultVal != null)
                row.setAttribute("DefaultVal", defaultVal);
            }
            if (row != null) {
                System.out.println("user Name:" + row.getAttribute("UserId") +
                                   "::column_name::" +
                                   row.getAttribute("ColumnType"));

                //                if (custNumber.toString() != null) {
                row.setAttribute("ColumnVal", custNumber.toString());
                //                }
                //                if (defaultVal != null)
                row.setAttribute("DefaultVal", defaultVal);

            }
        }
        return errorMsg.toString();
    }


    /* To Validate orderType values for Preference Page*/

    public String validateOrderTypeValues(int usrId, List orderTypeValues,
                                          String orderTypeDefaultval,
                                          String orgId) {
        StringBuilder errorMsg = new StringBuilder("");
        BigDecimal defaultId = null;
        String temp = null;
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        ViewObjectImpl otVO = this.getOrderTypeForUserPrefVO1();
        Row filteredRows[] = otVO.getFilteredRows("Name", orderTypeDefaultval);
        if (filteredRows != null && filteredRows.length > 0) {
            defaultId =
                    (BigDecimal)filteredRows[0].getAttribute("TransactionTypeId");
        }
        System.out.println("default OrderType Id is:" + defaultId);
        StringBuilder orderValues = new StringBuilder();
        if (orderTypeValues != null && orderTypeValues.size() > 0) {
            StringBuilder sb = new StringBuilder("('");
            sb.append(orderTypeValues.get(0));
            for (int i = 1; i < orderTypeValues.size(); i++) {
                System.out.println("selected valuseaa:" +
                                   orderTypeValues.get(i));
                sb.append("','").append(orderTypeValues.get(i));
            }
            sb.append("')");
            if (otVO != null) {
                otVO.clearCache();
                otVO.setWhereClause(null);
                RowQualifier rq = new RowQualifier("Name in" + sb.toString());
                Row filteredRow[] = otVO.getFilteredRows(rq);
                for (Row r : filteredRow) {
                    System.out.println("Value issss:" +
                                       r.getAttribute("TransactionTypeId").toString());
                    orderValues.append(r.getAttribute("TransactionTypeId")).append(",");
                }
                temp = orderValues.toString();
                if (temp != null && temp.endsWith(",")) {
                    temp = temp.substring(0, temp.length() - 1);
                } else
                    temp = null;
            }
        }
        Row row = null;
        String colType = "Order_type";
        if (vo != null) {
            RowQualifier rq1 =
                new RowQualifier("ColumnType ='" + colType + "'" +
                                 " and UserId=" + usrId +
                                 " and OperatingUnit ='" + orgId + "'");
            Row[] rows = vo.getFilteredRows(rq1);
            //            Object obj[] = { usrId, colType,orgId };
            //            Key key = new Key(obj);
            //            Row[] rows = vo.findByKey(key, 3);
            if (rows != null && rows.length > 0) {
                row = rows[0];
            } else if (defaultId != null || temp != null) {
                row = vo.createRow();
                row.setAttribute("UserId", usrId);
                row.setAttribute("ColumnType", "Order_type");
                row.setAttribute("OperatingUnit", orgId);
                //                if (defaultId != null)
                row.setAttribute("DefaultVal", defaultId);
            }
            if (row != null) {
                System.out.println("user Name:" + row.getAttribute("UserId") +
                                   "::column_name::" +
                                   row.getAttribute("ColumnType"));

                //                if (temp != null) {
                //                    row.setAttribute("ColumnVal", null);
                row.setAttribute("ColumnVal", temp);
                //                }
                //                if (defaultId != null)
                row.setAttribute("DefaultVal", defaultId);
            }
        }
        return errorMsg.toString();
    }


    //To validate Currency for Preference page

    public String validateCurrencyValues(int usrId, List currencyValues,
                                         String defaultName) {
        StringBuilder errorMsg = new StringBuilder("");
        String defaultval = null;
        ViewObjectImpl currencyVO = this.getCurrencyVO();
        Row fRows[] = currencyVO.getFilteredRows("Name", defaultName);
        if (fRows != null && fRows.length > 0) {
            defaultval = (String)fRows[0].getAttribute("CurrencyCode");
        }

        ViewObjectImpl vo = this.getuserPrefEntityVO();
        StringBuilder currencysb = new StringBuilder("");
        if (currencyValues != null && currencyValues.size() > 0) {
            StringBuilder sb = new StringBuilder("('");
            sb.append(currencyValues.get(0));
            for (int i = 1; i < currencyValues.size(); i++) {
                System.out.println("selected valuseaa:" +
                                   currencyValues.get(i));
                sb.append("','").append(currencyValues.get(i));
            }
            sb.append("')");
            System.out.println("currency list:" + sb.toString());
            RowQualifier rq = new RowQualifier(currencyVO);
            rq.setWhereClause("Name in" + sb.toString());
            Row filteredRows[] = currencyVO.getFilteredRows(rq);
            currencysb.append(filteredRows[0].getAttribute("CurrencyCode"));
            for (int i = 1; i < filteredRows.length; i++) {
                System.out.println("Value issss:" +
                                   filteredRows[i].getAttribute("CurrencyCode").toString());
                currencysb.append(",").append(filteredRows[i].getAttribute("CurrencyCode"));
            }
        }
        Row row = null;
        String colType = "Currency";
        //        String orgId = (String)ADFContext.getCurrent().getSessionScope().get("UserBasedOrgId");
        if (vo != null) {
            vo.clearCache();
            vo.setWhereClause(null);
            Object obj[] = { usrId, colType };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 2);
            if (rows != null && rows.length > 0) {
                row = rows[0];
            } else if (defaultval != null ||
                       !currencysb.toString().equalsIgnoreCase("")) {
                row = vo.createRow();
                row.setAttribute("UserId", usrId);
                row.setAttribute("ColumnType", "Currency");
                //                row.setAttribute("OperatingUnit", orgId);

                //                if (defaultval != null)
                row.setAttribute("DefaultVal", defaultval);
            } else
                row = null;
            if (row != null) {
                System.out.println("user Name:" + row.getAttribute("UserId") +
                                   "::column_name::" +
                                   row.getAttribute("ColumnType"));
                if (currencysb.toString().equalsIgnoreCase(""))
                    row.setAttribute("ColumnVal", null);
                else
                    row.setAttribute("ColumnVal", currencysb.toString());
                //                if (defaultval != null)
                row.setAttribute("DefaultVal", defaultval);
                //                        errorMsg = "Success";
            }
            //                else  errorMsg = "Success";
        }
        return errorMsg.toString();
    }

    //Validate Sales Rep values

    public String validateSalesRepValues(int usrId, List salesRepVals,
                                         String defaultVal, String orgId) {
        _logger.info("SudokuAmimpl: validateSalesRepValues: start: Default Value is :: " +
                     defaultVal);
        StringBuilder errorMsg = new StringBuilder("");
        String temp = null, orgvalues = null;
        //        StringBuilder orgVals = new StringBuilder();
        StringBuilder orgValuessb = new StringBuilder("(");
        BigDecimal defaultId = null;
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        ViewObjectImpl salesRepVO = this.getSalesRepForUserPrefVO();
        //        List orgList =
        //            (List)ADFContext.getCurrent().getPageFlowScope().get("orglist");
        //        if (orgId != null ) {
        //            for (int i = 0; i < orgList.size(); i++)
        //                orgVals.append(orgList.get(i)).append(",");
        //        }
        //        orgvalues = orgVals.toString();
        //        if (orgvalues != null && orgvalues.endsWith(",")) {
        //            orgvalues = orgvalues.substring(0, orgvalues.length() - 1);
        //        }
        //        orgValuessb.append(orgvalues).append(")");
        if (defaultVal != null) {
            salesRepVO.clearCache();
            salesRepVO.setWhereClause(null);
            Row filteredRows[] =
                salesRepVO.getFilteredRows("ResourceName", defaultVal);
            if (filteredRows != null && filteredRows.length > 0) {
                defaultId =
                        (BigDecimal)filteredRows[0].getAttribute("ResourceId");
            }
            _logger.info("SudokuAmimpl: validateSalesRepValues: start: :: default Id:: " +
                         defaultId);
            System.out.println("default resource Id is:" + defaultId);
        }
        StringBuilder salesRepValsb = new StringBuilder();
        if (salesRepVals != null && salesRepVals.size() > 0) {
            StringBuilder sb = new StringBuilder("('");
            sb.append(salesRepVals.get(0));
            for (int i = 1; i < salesRepVals.size(); i++) {
                System.out.println("selected valuseaa:" + salesRepVals.get(i));
                sb.append("','").append(salesRepVals.get(i));
            }
            sb.append("')");
            _logger.info("SudokuAmimpl: validateSalesRepValues: start: :: Sales Rep Values:: " +
                         sb.toString());
            if (salesRepVO != null) {
                salesRepVO.clearCache();
                salesRepVO.setWhereClause(null);
                if (orgId != null) {
                    salesRepVO.setWhereClause("resource_name in" +
                                              sb.toString());
                    System.out.println("Query::" + salesRepVO.getQuery());
                    salesRepVO.executeQuery();
                    RowSetIterator iter = salesRepVO.getRowSetIterator();
                    while (iter.hasNext()) {
                        Row row = iter.next();
                        salesRepValsb.append(row.getAttribute("ResourceId")).append(",");
                    }
                    //                RowQualifier rq = new RowQualifier("Orgid in "+orgvalues+" and ResourceName in" + sb.toString());
                    //                Row filteredRow[] = salesRepVO.getFilteredRows(rq);
                    //                for (Row r : filteredRow) {
                    //
                    //                    System.out.println("Value issss:" +
                    //                                       r.getAttribute("ResourceId").toString());
                    //                    salesRepValsb.append(r.getAttribute("ResourceId")).append(",");
                    //                }
                    temp = salesRepValsb.toString();
                    if (temp != null && temp.endsWith(",")) {
                        temp = temp.substring(0, temp.length() - 1);
                    }
                    _logger.info("SudokuAmimpl: validateSalesRepValues: start: :: Sales Rep Ids:: " +
                                 temp);
                    System.out.println("after removing last comma:" + temp);
                }
            }
        }
        Row row = null;
        String colType = "Sales_Rep";
        if (vo != null) {
            vo.clearCache();
            vo.setWhereClause(null);
            RowQualifier rq1 =
                new RowQualifier("ColumnType ='" + colType + "'" +
                                 " and UserId=" + usrId +
                                 " and OperatingUnit ='" + orgId + "'");
            Row[] rows = vo.getFilteredRows(rq1);

            //            Object obj[] = { usrId, colType,orgId };
            //            Key key = new Key(obj);
            //            Row[] rows = vo.findByKey(key, 3);
            if (rows != null && rows.length > 0) {
                row = rows[0];
            } else if (defaultId != null || temp != null) {
                row = vo.createRow();
                row.setAttribute("UserId", usrId);
                row.setAttribute("ColumnType", "Sales_Rep");
                row.setAttribute("OperatingUnit", orgId);
                //                if (defaultVal != null)
                row.setAttribute("DefaultVal", defaultId);
            } else
                row = null;
            if (row != null) {
                System.out.println("user Name:" + row.getAttribute("UserId") +
                                   "::column_name::" +
                                   row.getAttribute("ColumnType"));
                //                row.setAttribute("ColumnVal", null);
                //                if (temp != null)
                row.setAttribute("ColumnVal", temp);
                //                if (defaultVal != null)
                row.setAttribute("DefaultVal", defaultId);
                //                        errorMsg = "Success";
            }
            _logger.info("SudokuAmimpl: validateSalesRepValues: End: :: View Object call:: ");

        }
        _logger.info("SudokuAmimpl: validateSalesRepValues: End: ::");
        //            errorMsg = "success";
        return errorMsg.toString();
    }
    //Validate CSR values

    public String validateCsrValues(int usrId, List csrValues, String csr) {
        StringBuilder errorMsg = new StringBuilder("");
        BigDecimal defaultval = null;
        String temp = null;
        ViewObjectImpl csrVO = this.getCSRForGlobalChoiceVO1();
        Row fRows[] = csrVO.getFilteredRows("CustomerName", csr);
        if (fRows != null && fRows.length > 0) {
            defaultval = (BigDecimal)fRows[0].getAttribute("PersonId");
        }
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        String orgId =
            (String)ADFContext.getCurrent().getSessionScope().get("UserBasedOrgId");
        StringBuilder csrsb = new StringBuilder();
        if (csrValues != null && csrValues.size() > 0) {
            StringBuilder sb = new StringBuilder("('");
            sb.append(csrValues.get(0));
            for (int i = 1; i < csrValues.size(); i++) {
                System.out.println("selected valuseaa:" + csrValues.get(i));
                sb.append("','").append(csrValues.get(i));
            }
            sb.append("')");
            RowQualifier rq =
                new RowQualifier("CustomerName in" + sb.toString());
            Row filteredRows[] = csrVO.getFilteredRows(rq);
            //            csrsb.append(filteredRows[0].getAttribute("PersonId"));
            for (Row r : filteredRows) {
                System.out.println("Value issss:" +
                                   r.getAttribute("PersonId").toString());
                csrsb.append(r.getAttribute("PersonId")).append(",");
            }
            temp = csrsb.toString();
            if (temp != null && temp.endsWith(",")) {
                temp = temp.substring(0, temp.length() - 1);
            }
        }
        Row row = null;
        String colType = "CSR";
        if (vo != null) {
            Object obj[] = { usrId, colType };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 2);
            if (rows != null && rows.length > 0) {
                row = rows[0];
            } else if (defaultval != null || temp != null) {
                row = vo.createRow();
                row.setAttribute("UserId", usrId);
                row.setAttribute("ColumnType", colType);
                //row.setAttribute("OperatingUnit", orgId);
                //                if (defaultval != null)
                row.setAttribute("DefaultVal", defaultval);
            }
            if (row != null) {
                System.out.println("user Name:" + row.getAttribute("UserId") +
                                   "::column_name::" +
                                   row.getAttribute("ColumnType"));
                //                if (temp != null) {
                row.setAttribute("ColumnVal", null);
                row.setAttribute("ColumnVal", temp);
                //                }
                //                if (defaultval != null)
                row.setAttribute("DefaultVal", defaultval);
                //                        errorMsg = "Success";
            }
        }
        return errorMsg.toString();
    }


    public String validateIncoTermValues(int usrId, List incoTermValues,
                                         String dafaultVal) {
        StringBuilder errorMsg = new StringBuilder("");
        String defaultval = null;
        String temp = null;
        ViewObjectImpl incoTermVO = this.getIncoTermVO();
        String orgId =
            (String)ADFContext.getCurrent().getSessionScope().get("UserBasedOrgId");
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        Row fRows[] = incoTermVO.getFilteredRows("Description", dafaultVal);
        if (fRows != null && fRows.length > 0) {
            defaultval = (String)fRows[0].getAttribute("Meaning");
        }
        StringBuilder incoTermsb = new StringBuilder();
        if (incoTermValues != null && incoTermValues.size() > 0) {
            StringBuilder sb = new StringBuilder("('");
            sb.append(incoTermValues.get(0));
            for (int i = 1; i < incoTermValues.size(); i++) {
                System.out.println("selected valuseaa:" +
                                   incoTermValues.get(i));
                sb.append("'").append(",").append("'").append(incoTermValues.get(i));
            }
            sb.append("')");
            if (incoTermVO != null) {

                RowQualifier rq = new RowQualifier(incoTermVO);
                rq.setWhereClause("Description in" + sb.toString());
                Row filteredRows[] = incoTermVO.getFilteredRows(rq);
                for (Row r : filteredRows)
                    incoTermsb.append(r.getAttribute("Meaning")).append(",");

                temp = incoTermsb.toString();
                if (temp != null && temp.endsWith(",")) {
                    temp = temp.substring(0, temp.length() - 1);
                }
            }
        }
        Row row = null;
        String colType = "IncoTerm";
        if (vo != null) {
            vo.clearCache();
            vo.setWhereClause(null);
            Object obj[] = { usrId, colType };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 2);
            if (rows != null && rows.length > 0) {
                row = rows[0];
            } else if (defaultval != null || temp != null) {
                row = vo.createRow();
                row.setAttribute("UserId", usrId);
                row.setAttribute("ColumnType", "IncoTerm");
                //                row.setAttribute("OperatingUnit", orgId);
                //                if (defaultval != null)
                row.setAttribute("DefaultVal", defaultval);
            } else
                row = null;
            if (row != null) {
                System.out.println("user Name:" + row.getAttribute("UserId") +
                                   "::column_name::" +
                                   row.getAttribute("ColumnType"));

                //                if (temp != null) {
                row.setAttribute("ColumnVal", temp);
                //                }
                //                if (defaultval != null)
                row.setAttribute("DefaultVal", defaultval);
                //                        errorMsg = "Success";
            }
        }
        return errorMsg.toString();
    }


    public String validatePaymentTermValues(int usrId, String defaultVal) {
        ViewObjectImpl paymentTermVO = this.getPaymentTermsVO();
        String orgId =
            (String)ADFContext.getCurrent().getSessionScope().get("UserBasedOrgId");
        StringBuilder errorMsg = new StringBuilder("");
        Row fRows[] = paymentTermVO.getFilteredRows("Description", defaultVal);
        if (fRows != null && fRows.length > 0) {
            defaultVal = (String)fRows[0].getAttribute("Name");
        }
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        Row row = null;
        String colType = "PaymentTerms";
        if (vo != null) {
            Object obj[] = { usrId, colType };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 2);
            if (rows != null && rows.length > 0) {
                row = rows[0];
            } else if (defaultVal != null) {
                row = vo.createRow();
                row.setAttribute("UserId", usrId);
                row.setAttribute("ColumnType", colType);
                //row.setAttribute("OperatingUnit", orgId);
                //                if (defaultVal != null)
                row.setAttribute("DefaultVal", defaultVal);
            } else
                row = null;
            if (row != null) {
                System.out.println("user Name:" + row.getAttribute("UserId") +
                                   "::column_name::" +
                                   row.getAttribute("ColumnType"));
                row.setAttribute("ColumnVal", null);
                //                if (defaultVal != null)
                row.setAttribute("DefaultVal", defaultVal);
                //                        errorMsg = "Success";
            }
        }
        return errorMsg.toString();
    }

    public String validateSalesChannelForSC(int usrId, List salesChannel) {
        StringBuilder errorMsg = new StringBuilder("");
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        //        String orgId = (String)ADFContext.getCurrent().getSessionScope().get("UserBasedOrgId");
        _logger.info("SudokuAmimpl: validateSalesChannelForSC: start: :: ");
        Row row = null;
        String colType = "Sales_Channel";
        StringBuilder salesChannelsb = new StringBuilder("");
        if (salesChannel != null && salesChannel.size() > 0) {
            salesChannelsb.append(salesChannel.get(0));
            for (int i = 1; i < salesChannel.size(); i++) {
                salesChannelsb.append(",").append(salesChannel.get(i));
            }
        }
        if (vo != null) {
            vo.clearCache();
            vo.setWhereClause(null);
            Object obj[] = { usrId, colType };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 2);
            if (rows != null && rows.length > 0) {
                row = rows[0];
            } else if (salesChannelsb.toString() != null &&
                       !salesChannelsb.toString().equalsIgnoreCase("")) {
                row = vo.createRow();
                row.setAttribute("UserId", usrId);
                row.setAttribute("ColumnType", colType);
                //                row.setAttribute("OperatingUnit", orgId);
            }
            if (row != null) {

                if (salesChannelsb.toString() != null) {
                    row.setAttribute("ColumnVal", null);
                    row.setAttribute("ColumnVal", salesChannelsb.toString());
                }

            }
        }
        return errorMsg.toString();
    }


    public String validateCurrencyValuesForSC(int usrId, List currencyValues,
                                              String defaultVal,
                                              String salesChannel) {
        StringBuilder errorMsg = new StringBuilder("");
        String defaultCode = null;
        ViewObjectImpl currencyVO = this.getCurrencyVO();
        Row fRows[] = currencyVO.getFilteredRows("Name", defaultVal);
        if (fRows != null && fRows.length > 0) {
            defaultCode = (String)fRows[0].getAttribute("CurrencyCode");
        }
        _logger.info("SudokuAmimpl: validateCurrencyValuesForSC: start: :: ");
        ViewObjectImpl vo = this.getuserPrefSCVO1();
        String orgId =
            (String)ADFContext.getCurrent().getSessionScope().get("SCBasedOrgId");
        StringBuilder currencysb = new StringBuilder("");
        if (currencyValues != null && currencyValues.size() > 0) {
            StringBuilder sb = new StringBuilder("('");
            sb.append(currencyValues.get(0));
            for (int i = 1; i < currencyValues.size(); i++) {
                System.out.println("selected valuseaa:" +
                                   currencyValues.get(i));
                sb.append("','").append(currencyValues.get(i));
            }
            sb.append("')");
            _logger.info("SudokuAmimpl: validateCurrencyValuesForSC: names list: :: " +
                         sb.toString());
            System.out.println("currency list:" + sb.toString());
            if (currencyVO != null) {
                currencyVO.clearCache();
                System.out.println(currencyVO.getEstimatedRowCount());
                RowQualifier rq = new RowQualifier("Name in" + sb.toString());
                //            rq.setWhereClause();
                Row filteredRows[] = currencyVO.getFilteredRows(rq);
                currencysb.append(filteredRows[0].getAttribute("CurrencyCode"));
                for (int i = 1; i < filteredRows.length; i++) {
                    System.out.println("Value issss:" +
                                       filteredRows[i].getAttribute("CurrencyCode").toString());
                    currencysb.append(",").append(filteredRows[i].getAttribute("CurrencyCode"));
                }
            }
            _logger.info("SudokuAmimpl: validateCurrencyValuesForSC: codes lis: :: " +
                         currencysb.toString());
        }
        Row row = null;
        String colType = "Currency";
        if (vo != null) {
            Object obj[] = { usrId, colType, salesChannel, orgId };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 4);
            if (rows != null && rows.length > 0) {
                row = rows[0];
            } else if (defaultCode != null ||
                       !currencysb.toString().equalsIgnoreCase("")) {
                row = vo.createRow();
                row.setAttribute("UserId", usrId);
                row.setAttribute("ColumnType", "Currency");
                row.setAttribute("SalesChannel", salesChannel);
                row.setAttribute("OperatingUnit", orgId);
                //                if (defaultCode != null)
                row.setAttribute("DefaultVal", defaultCode);
            } else
                row = null;
            if (row != null) {
                System.out.println("user Name:" + row.getAttribute("UserId") +
                                   "::column_name::" +
                                   row.getAttribute("ColumnType"));
                //                if (currencysb.toString() != null) {
                //                    row.setAttribute("ColumnVal", null);
                row.setAttribute("ColumnVal", currencysb.toString());
                //                }
                //                if (defaultCode != null)
                row.setAttribute("DefaultVal", defaultCode);
                //                        errorMsg = "Success";
            }
        }
        return errorMsg.toString();
    }


    public String validateIncoTermValuesForSC(int usrId, List incoTermValues,
                                              String defaultVal,
                                              String salesChannel) {
        _logger.info("SudokuAmimpl: validateIncoTermValuesForSC: Start :: ");
        StringBuilder errorMsg = new StringBuilder("");
        String defaultCode = null;
        ViewObjectImpl incoTermVO = this.getIncoTermVO();
        Row fRows[] = incoTermVO.getFilteredRows("Description", defaultVal);
        if (fRows != null && fRows.length > 0) {
            defaultCode = (String)fRows[0].getAttribute("Meaning");
        }
        ViewObjectImpl vo = this.getuserPrefSCVO1();
        String orgId =
            (String)ADFContext.getCurrent().getSessionScope().get("SCBasedOrgId");
        StringBuilder incoTermsb = new StringBuilder();
        if (incoTermValues != null && incoTermValues.size() > 0) {
            StringBuilder sb = new StringBuilder("('");
            sb.append(incoTermValues.get(0));
            for (int i = 1; i < incoTermValues.size(); i++) {
                System.out.println("selected valuseaa:" +
                                   incoTermValues.get(i));
                sb.append("','").append(incoTermValues.get(i));
            }
            sb.append("')");
            _logger.info("SudokuAmimpl: validateIncoTermValuesForSC: descriptions list :: " +
                         sb.toString());
            if (incoTermVO != null) {
                RowQualifier rq = new RowQualifier(incoTermVO);
                rq.setWhereClause("Description in" + sb.toString());
                Row filteredRows[] = incoTermVO.getFilteredRows(rq);
                incoTermsb.append(filteredRows[0].getAttribute("Meaning"));
                for (int i = 1; i < filteredRows.length; i++) {
                    System.out.println("Value issss:" +
                                       filteredRows[i].getAttribute("Meaning").toString());
                    incoTermsb.append(",").append(filteredRows[i].getAttribute("Meaning"));
                }
                _logger.info("SudokuAmimpl: validateIncoTermValuesForSC: Meanings: :: " +
                             incoTermsb.toString());
            }
        }
        Row row = null;
        String colType = "IncoTerm";
        if (vo != null) {
            Object obj[] = { usrId, colType, salesChannel, orgId };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 4);
            if (rows != null && rows.length > 0) {
                row = rows[0];
            } else if (defaultCode != null ||
                       (incoTermsb.toString() != null && !incoTermsb.toString().equalsIgnoreCase(""))) {
                row = vo.createRow();
                row.setAttribute("UserId", usrId);
                row.setAttribute("ColumnType", "IncoTerm");
                row.setAttribute("SalesChannel", salesChannel);
                row.setAttribute("OperatingUnit", orgId);
                //                if (defaultCode != null)
                row.setAttribute("DefaultVal", defaultCode);
            }
            if (row != null) {
                System.out.println("user Name:" + row.getAttribute("UserId") +
                                   "::column_name::" +
                                   row.getAttribute("ColumnType"));
                //                row.setAttribute("ColumnVal", null);
                row.setAttribute("ColumnVal", incoTermsb.toString());
                //                if (defaultCode != null)
                row.setAttribute("DefaultVal", defaultCode);
                //                        errorMsg = "Success";
            }
        }
        return errorMsg.toString();
    }


    public String validateBAForSC(int usrId, List baValues, String defaultVal,
                                  String salesChannel) {
        StringBuilder errorMsg = new StringBuilder("");
        BigDecimal defaultCode = null;
        ViewObjectImpl baVO = this.getbusinessAgreementVo();
        baVO.clearCache();
        baVO.setWhereClause(null);
        Row fRows[] = baVO.getFilteredRows("Name", defaultVal);
        if (fRows != null && fRows.length > 0) {
            defaultCode = (BigDecimal)fRows[0].getAttribute("AgreementId");
        }
        String orgId =
            (String)ADFContext.getCurrent().getSessionScope().get("SCBasedOrgId");

        ViewObjectImpl vo = this.getuserPrefSCVO1();

        StringBuilder basb = new StringBuilder();
        if (baValues != null && baValues.size() > 0) {
            StringBuilder sb = new StringBuilder("('");
            sb.append(baValues.get(0));
            for (int i = 1; i < baValues.size(); i++) {
                System.out.println("selected valuseaa:" + baValues.get(i));
                sb.append("','").append(baValues.get(i));
            }
            sb.append("')");
            _logger.info("SudokuAmimpl: validateBAForSC: List of selected BA Names::: " +
                         sb.toString());
            if (baVO != null) {
                RowQualifier rq = new RowQualifier(baVO);
                rq.setWhereClause("Name in" + sb.toString());
                Row filteredRows[] = baVO.getFilteredRows(rq);
                basb.append(filteredRows[0].getAttribute("AgreementId"));
                for (Row r : filteredRows) {
                    System.out.println("Value issss:" +
                                       r.getAttribute("AgreementId").toString());
                    basb.append(",").append(r.getAttribute("AgreementId"));
                }
            }
        }
        _logger.info("SudokuAmimpl: validateBAForSC: BA Id's::: " +
                     basb.toString());
        Row row = null;
        String colType = "Business_Agreement";
        if (vo != null) {
            Object obj[] = { usrId, colType, salesChannel, orgId };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 4);
            if (rows != null && rows.length > 0) {
                row = rows[0];
            } else if (defaultCode != null ||
                       (basb.toString() != null && !basb.toString().equalsIgnoreCase(""))) {
                row = vo.createRow();
                row.setAttribute("UserId", usrId);
                row.setAttribute("ColumnType", colType);
                row.setAttribute("SalesChannel", salesChannel);
                row.setAttribute("OperatingUnit", orgId);
            }
            if (row != null) {
                System.out.println("user Name:" + row.getAttribute("UserId") +
                                   "::column_name::" +
                                   row.getAttribute("ColumnType"));
                //                if (basb.toString() != null) {
                //                    row.setAttribute("ColumnVal", null);
                row.setAttribute("ColumnVal", basb.toString());
                //                }
                //                if (defaultCode != null)
                row.setAttribute("DefaultVal", defaultCode);
                //                        errorMsg = "Success";
            }
        }
        return errorMsg.toString();
    }

    public String validatePaymentTermValuesforSC(int usrId,
                                                 List PaymentTermValues,
                                                 String defaultVal,
                                                 String salesChannel) {
        StringBuilder errorMsg = new StringBuilder("");
        String defaultCode = null, temp = null;
        String orgId =
            (String)ADFContext.getCurrent().getSessionScope().get("SCBasedOrgId");
        ViewObjectImpl vo = this.getuserPrefSCVO1();
        ViewObjectImpl paymentTermsVO = this.getPaymentTermsVO();
        StringBuilder paymentTermssb = new StringBuilder();
        _logger.info("SudokuAmimpl: validatePaymentTermValuesforSC: Start :: ");
        Row fRows[] =
            paymentTermsVO.getFilteredRows("Description", defaultVal);
        if (fRows != null && fRows.length > 0) {
            defaultCode = (String)fRows[0].getAttribute("Name");
        }
        if (PaymentTermValues != null && PaymentTermValues.size() > 0) {
            StringBuilder sb = new StringBuilder("('");

            sb.append(PaymentTermValues.get(0));
            for (int i = 1; i < PaymentTermValues.size(); i++) {
                System.out.println("selected valuseaa:" +
                                   PaymentTermValues.get(i));
                sb.append("','").append(PaymentTermValues.get(i));
            }
            sb.append("')");
            _logger.info("SudokuAmimpl: validatePaymentTermValuesforSC: paymentTerm DEsc :: " +
                         sb.toString());
            if (paymentTermsVO != null) {
                RowQualifier rq =
                    new RowQualifier("Description in" + sb.toString());
                Row filteredRows[] = paymentTermsVO.getFilteredRows(rq);
                for (Row r : filteredRows) {
                    paymentTermssb.append(r.getAttribute("Name")).append(",");
                }

                System.out.println("Query::" + paymentTermsVO.getQuery());
            }
            temp = paymentTermssb.toString();
            if (temp != null && temp.endsWith(",")) {
                temp = temp.substring(0, temp.length() - 1);
            }
            _logger.info("SudokuAmimpl: validatePaymentTermValuesforSC: Names :: " +
                         temp);
            System.out.println("after removing last comma:" + temp);
        }
        Row row = null;
        String colType = "PaymentTerms";
        if (vo != null) {
            Object obj[] = { usrId, colType, salesChannel, orgId };
            Key key = new Key(obj);
            Row[] rows = vo.findByKey(key, 4);
            if (rows != null && rows.length > 0) {
                row = rows[0];
            } else if (defaultCode != null || temp != null) {
                row = vo.createRow();
                row.setAttribute("UserId", usrId);
                row.setAttribute("ColumnType", colType);
                row.setAttribute("SalesChannel", salesChannel);
                row.setAttribute("OperatingUnit", orgId);
                //                if (defaultCode != null)
                row.setAttribute("DefaultVal", defaultCode);
            }
            if (row != null) {
                System.out.println("user Name:" + row.getAttribute("UserId") +
                                   "::column_name::" +
                                   row.getAttribute("ColumnType"));

                //                if (temp != null) {
                //                    row.setAttribute("ColumnVal", null);
                row.setAttribute("ColumnVal", temp);

                //                    if (defaultCode != null)
                row.setAttribute("DefaultVal", defaultCode);
                //                        errorMsg = "Success";
                //                }
            }
        }
        return errorMsg.toString();
    }

    // for getting Sales Representative values  getSelectedSalesRepValues

    public String getDefaultSelectedRows(String colType, int usrId) {
        StringBuilder sb = new StringBuilder("'");
        sb.append(colType).append("'");
        String defaultVal = null;
        if (colType != null) {
            ViewObjectImpl vo = this.getuserPrefEntityVO();
            if (vo != null) {
                vo.clearCache();
                vo.setWhereClause(null);
                Object obj[] = { usrId, colType };
                Key key = new Key(obj);
                Row[] r = vo.findByKey(key, 2);
                //                RowQualifier rq =
                //                    new RowQualifier("ColumnType =" + sb.toString() +
                //                                     " and UserId=" + usrId + " and OperatingUnit ='"+orgId+"'");
                //         Row r[] = vo.getFilteredRows(rq);
                {
                    if (r != null && r.length > 0) {
                        defaultVal = (String)r[0].getAttribute("DefaultVal");
                    }
                }
            }
        }
        return defaultVal;
    }

    public String getDefaultSelectedRowsForOUDependencies(String colType,
                                                          int usrId,
                                                          String orgId) {
        StringBuilder sb = new StringBuilder("'");
        sb.append(colType).append("'");
        String defaultVal = null;
        if (colType != null) {
            ViewObjectImpl vo = this.getuserPrefEntityVO();
            if (vo != null) {
                vo.clearCache();
                vo.setWhereClause(null);
                RowQualifier rq =
                    new RowQualifier("ColumnType =" + sb.toString() +
                                     " and UserId=" + usrId +
                                     " and OperatingUnit ='" + orgId + "'");
                Row r[] = vo.getFilteredRows(rq);
                {
                    if (r != null && r.length > 0) {
                        defaultVal = (String)r[0].getAttribute("DefaultVal");
                    }
                }
            }
        }
        return defaultVal;
    }

    public Map defaultValsOUDependencies(int usrId, String orgId) {
        String defaultOrderType = null, defaultCustNum =
            null, defaultSalesRep = null;
        String orderType = null, salesRep = null;
        Map map = new HashMap();
        if (orgId != null) {
            defaultOrderType =
                    getDefaultSelectedRowsForOUDependencies("Order_type",
                                                            usrId, orgId);
            defaultCustNum =
                    getDefaultSelectedRowsForOUDependencies("Customer", usrId,
                                                            orgId);
            defaultSalesRep =
                    getDefaultSelectedRowsForOUDependencies("Sales_Rep", usrId,
                                                            orgId);

            ViewObjectImpl orderTypeVO = this.getOrderTypeVO();
            if (orderTypeVO != null && defaultOrderType != null) {
                orderTypeVO.clearCache();
                orderTypeVO.setWhereClause(null);
                orderTypeVO.setNamedWhereClauseParam("p_orgId", orgId);
                orderTypeVO.setWhereClause("transaction_type_id =" +
                                           defaultOrderType);
                orderTypeVO.executeQuery();
                RowSetIterator iter = orderTypeVO.createRowSetIterator(null);
                while (iter.hasNext()) {
                    Row r = iter.next();
                    orderType = (String)r.getAttribute("Name");
                }
            }
            ViewObjectImpl salesRepVO = this.getSalesRepForUserPrefVO();

            if (salesRepVO != null && defaultSalesRep != null) {
                RowQualifier rq =
                    new RowQualifier("ResourceId =" + defaultSalesRep);
                Row r[] = salesRepVO.getFilteredRows(rq);
                if (r != null && r.length > 0) {
                    salesRep = (String)r[0].getAttribute("ResourceName");
                }
            }
            if (map != null) {
                map.put("orderType", orderType);
                map.put("custNum", defaultCustNum);
                map.put("salesRep", salesRep);
            }
        }
        return map;
    }

    public Map defaultVals(int usrId) {
        _logger.info("SudokuAmimpl: defaultVals: Start :: ");

        String defaultCurrency = getDefaultSelectedRows("Currency", usrId);
        String defaultIncoTerm = getDefaultSelectedRows("IncoTerm", usrId);
        String defaultCSR = getDefaultSelectedRows("CSR", usrId);
        String defaultPaymentTerm =
            getDefaultSelectedRows("PaymentTerms", usrId);
        String currency = null;
        ViewObjectImpl currencyVO = this.getCurrencyVO();

        if (currencyVO != null && defaultCurrency != null) {
            RowQualifier rq =
                new RowQualifier("CurrencyCode =" + "'" + defaultCurrency +
                                 "'");
            Row r[] = currencyVO.getFilteredRows(rq);
            if (r != null && r.length > 0) {
                currency = (String)r[0].getAttribute("Name");
            }
        }

        String incoTerm = null;
        ViewObjectImpl incoTermVO = this.getIncoTermVO();
        if (incoTermVO != null && defaultIncoTerm != null) {
            RowQualifier rq =
                new RowQualifier("Meaning =" + "'" + defaultIncoTerm + "'");
            Row r[] = incoTermVO.getFilteredRows(rq);
            if (r != null && r.length > 0) {
                incoTerm = (String)r[0].getAttribute("Description");
            }
        }


        String paymentTerm = null;
        ViewObjectImpl paymentTermVO = this.getPaymentTermsVO();
        if (paymentTermVO != null && defaultPaymentTerm != null) {
            RowQualifier rq =
                new RowQualifier("Name =" + "'" + defaultPaymentTerm + "'");
            Row r[] = paymentTermVO.getFilteredRows(rq);
            if (r != null && r.length > 0) {
                paymentTerm = (String)r[0].getAttribute("Description");
            }
        }
        String csr = null;
        ViewObjectImpl csrVO = this.getCSRForGlobalChoiceVO1();
        if (csrVO != null && defaultCSR != null) {
            RowQualifier rq = new RowQualifier("PersonId =" + defaultCSR);
            Row r[] = csrVO.getFilteredRows(rq);
            if (r != null && r.length > 0) {
                csr = (String)r[0].getAttribute("CustomerName");
            }
        }
        _logger.info("Sudoku AMImpl: print defaultVals: Currency:" +
                     defaultCurrency + "::IncoTerm::" + defaultIncoTerm +
                     "::CSR:" + defaultCSR + "::paymentTerm:" +
                     defaultPaymentTerm);


        Map map = new HashMap();
        if (map != null) {
            map.put("currency", currency);
            map.put("paymentTerm", paymentTerm);
            map.put("csr", csr);
            map.put("incoTerm", incoTerm);
        }
        return map;
    }


    public String getDefaultSelectedRowsForSC(String colType, int usrId,
                                              String salesChannel,
                                              String orgId) {
        StringBuilder sb = new StringBuilder("'");
        sb.append(colType).append("'");
        String defaultVal = null;
        if (colType != null) {
            ViewObjectImpl vo = this.getuserPrefSCVO1();
            if (vo != null) {
                vo.clearCache();
                vo.setWhereClause(null);
                if (orgId != null) {
                    Object obj[] = { usrId, colType, salesChannel, orgId };
                    Key key = new Key(obj);
                    Row[] rows = vo.findByKey(key, 4);
                    if (rows != null && rows.length > 0)
                        defaultVal =
                                (String)rows[0].getAttribute("DefaultVal");
                }

            }
        }
        return defaultVal;
    }


    public Map defaultValsForSC(int usrId, String salesChannel,
                                List customerNums, String orgId) {
        String defaultCurrency =
            getDefaultSelectedRowsForSC("Currency", usrId, salesChannel,
                                        orgId);
        String defaultCustName =
            getDefaultSelectedRowsForSC("Customer", usrId, salesChannel,
                                        orgId);
        String defaultIncoTerm =
            getDefaultSelectedRowsForSC("IncoTerm", usrId, salesChannel,
                                        orgId);
        String defaultBA =
            getDefaultSelectedRowsForSC("Business_Agreement", usrId,
                                        salesChannel, orgId);
        String defaultPaymentTerm =
            getDefaultSelectedRowsForSC("PaymentTerms", usrId, salesChannel,
                                        orgId);

        ViewObjectImpl custNameVO = this.getCustomerNumberVO();

        String customer = null;
        if (custNameVO != null && defaultCustName != null) {
            custNameVO.clearCache();
            custNameVO.setWhereClause(null);
            Row r[] =
                custNameVO.getFilteredRows("Accountnumber", defaultCustName);
            if (r != null && r.length > 0) {
                customer = (String)r[0].getAttribute("Customername");
            }
        }

        ViewObjectImpl currencyVO = this.getCurrencyVO();
        String currency = null;
        if (currencyVO != null && defaultCurrency != null) {
            currencyVO.clearCache();
            currencyVO.setWhereClause(null);
            RowQualifier rq =
                new RowQualifier("CurrencyCode =" + "'" + defaultCurrency +
                                 "'");
            Row r[] = currencyVO.getFilteredRows(rq);
            if (r != null && r.length > 0) {
                currency = (String)r[0].getAttribute("Name");
            }
        }

        String incoTerm = null;
        ViewObjectImpl incoTermVO = this.getIncoTermVO();
        if (incoTermVO != null && defaultIncoTerm != null) {
            RowQualifier rq =
                new RowQualifier("Meaning =" + "'" + defaultIncoTerm + "'");
            Row r[] = incoTermVO.getFilteredRows(rq);
            if (r != null && r.length > 0) {
                incoTerm = (String)r[0].getAttribute("Description");
            }
        }

        String paymentTerm = null;
        ViewObjectImpl paymentTermVO = this.getPaymentTermsVO();
        if (paymentTermVO != null && defaultPaymentTerm != null) {
            RowQualifier rq =
                new RowQualifier("Name =" + "'" + defaultPaymentTerm + "'");
            Row r[] = paymentTermVO.getFilteredRows(rq);
            if (r != null && r.length > 0) {
                paymentTerm = (String)r[0].getAttribute("Description");
            }
        }

        String ba = null;
        ViewObjectImpl baVO = this.getbusinessAgreementVo();
        if (baVO != null && defaultBA != null) {
            RowQualifier rq = new RowQualifier("AgreementId =" + defaultBA);
            Row r[] = baVO.getFilteredRows(rq);
            if (r != null && r.length > 0) {
                ba = (String)r[0].getAttribute("Name");
            }
        }

        Map map = new HashMap();
        if (map != null) {
            map.put("currency", currency);
            map.put("customer", customer);
            map.put("incoTerm", incoTerm);
            map.put("paymentTerm", paymentTerm);
            map.put("ba", ba);

        }
        return map;
    }
    //    String salesRepQuery = "select DISTINCT jreb.resource_id, \n" +
    //        "          pp.phone_number fax,\n" +
    //        "          jreb.CATEGORY,\n" +
    //        "          jreb.source_name AS resource_name,\n" +
    //        "          jreb.source_email,\n" +
    //        "         jreb.source_phone  from jtf_rs_resource_extns jreb,JTF_RS_SALESREPS JRS, (select parent_id,PHONE_NUMBER from per_phones where phone_type='WF') pp,\n" +
    //        "          (select parent_id,PHONE_NUMBER from per_phones where phone_type='W1') ppfax\n" +
    //        "          where jreb.source_id = pp.parent_id(+)\n" +
    //        "          and jreb.source_id = ppfax.parent_id(+)\n" +
    //        "           AND jreb.resource_id=  JRS.RESOURCE_ID";

    public List getAllSalesRepValues(String orgId) {
        List salesRepValues = new ArrayList();
        if (orgId != null) {
            ViewObjectImpl vo = this.getSalesRepresentativeVO();
            if (vo != null) {
                vo.clearCache();
                vo.setWhereClause(null);
                vo.setNamedWhereClauseParam("p_orgId", null);
                vo.setNamedWhereClauseParam("p_orgId", new BigDecimal(orgId));
                System.out.println("result Query is:" + vo.getQuery());
                _logger.info("All SalesRep Query from SudokuAMImpl: " +
                             vo.getQuery());
                vo.executeQuery();
                RowSetIterator iter = vo.createRowSetIterator(null);
                while (iter.hasNext()) {
                    Row r = iter.next();
                    salesRepValues.add(r.getAttribute("ResourceName"));
                }
                iter.closeRowSetIterator();
            }
        }
        return salesRepValues;
    }

    public List getSelectedSalesRepValues(int usrId, String orgId) { //salesRep
        long startTime = System.currentTimeMillis();
        System.out.println("SudokuAMIMpl:getSelctedSalesRepValues:Start" +
                           (System.currentTimeMillis() - startTime));
        StringBuilder salesRepV = new StringBuilder("(");
        String salesRepId = null;
        List selectedNames = new ArrayList();
        ViewObjectImpl vo = this.getuserPrefEntityVO();
        ViewObjectImpl salesRepVO = this.getSalesRepresentativeVO();
        String col_type = "'Sales_Rep'";
        vo.clearCache();
        vo.setWhereClause(null);
        RowQualifier rq1 =
            new RowQualifier("ColumnType =" + col_type + " and UserId=" +
                             usrId + " and OperatingUnit ='" + orgId + "'");
        Row[] rows = vo.getFilteredRows(rq1);
        //        Object obj[] = { usrId, col_type,orgId};
        //        Key key = new Key(obj);
        //        Row[] rows = vo.findByKey(key, 3);
        if (rows != null && rows.length > 0)
            salesRepId = (String)rows[0].getAttribute("ColumnVal");

        if (salesRepId != null) {
            salesRepV.append(salesRepId).append(")");
            if (salesRepVO != null) {
                salesRepVO.clearCache();
                salesRepVO.setWhereClause(null);
                salesRepVO.setNamedWhereClauseParam("p_orgId", orgId);
                salesRepVO.setWhereClause("resource_id in" +
                                          salesRepV.toString());
                salesRepVO.executeQuery();
                System.out.println("SalesRep Count:" +
                                   salesRepVO.getEstimatedRowCount());
                RowSetIterator iter = salesRepVO.createRowSetIterator(null);
                while (iter.hasNext()) {
                    Row r = iter.next();
                    System.out.println("Value issss:" +
                                       r.getAttribute("ResourceName").toString());
                    selectedNames.add(r.getAttribute("ResourceName").toString());
                }
            }
            //            RowQualifier rq =
            //                new RowQualifier("ResourceId in" + salesRepV.toString());
            //            Row filteredRows[] = salesRepVO.getFilteredRows(rq);
            System.out.println("SudokuAMIMpl:getSelctedSalesRepValues:4" +
                               (System.currentTimeMillis() - startTime));
        }
        return selectedNames;
    }


    public boolean commitEntities() {
        _logger.info("SudokuAMImpl : commitEntities Starts ");
        try {
            this.getDBTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        _logger.info("SudokuAMImpl : commitEntities Ends ");
        return true;
    }


    //    public void getSCBasedQuoteUpdateValues() {
    //        String salesChannel = null;
    //        String defaultCurrency = null;
    //        String defaultIncoTerm = null;
    //        String defaultPaymentTerm = null;
    //        String defaultBA = null;
    //        String custNum = null,custName = null;
    //        Map custMap = new HashMap();
    //        ViewObjectImpl vo = this.getQuoteUpdateVO1();
    //        if (vo != null) {
    //            Row r = vo.getCurrentRow();
    //            if (r != null) {
    //                salesChannel = (String)r.getAttribute("Saleschannel");
    //            }
    //            QuoteUpdateVORowImpl rowImpl =
    //                (QuoteUpdateVORowImpl)vo.getCurrentRow();
    //            if (rowImpl != null) {
    //                defaultCurrency =
    //                        rowImpl.getSalesChannelBasedCurrency(salesChannel);
    //                defaultIncoTerm =
    //                        rowImpl.getSalesChannelBasedIncoTerm(salesChannel);
    //                defaultPaymentTerm =
    //                        rowImpl.getSalesChannelBasedPaymentTerm(salesChannel);
    //                defaultBA = rowImpl.getSalesChannelBasedBA(salesChannel);
    //                custMap =
    //                        rowImpl.getSalesChannelBasedCustomerDetails(salesChannel);
    //                if(custMap !=null){
    //                    custNum = (String)custMap.get("custNum");
    //                    custName = (String)custMap.get("custName");
    //                    }
    //            }
    //            r.setAttribute("CurrencyCode", defaultCurrency);
    //            r.setAttribute("Incoterms", defaultIncoTerm);
    //            r.setAttribute("Paymentterms", defaultPaymentTerm);
    //            r.setAttribute("Agrimentname", defaultBA);
    //                        r.setAttribute("Customernumber", custNum);
    //                        r.setAttribute("Customername", custName);
    //        }
    //
    //    }

    public List getAllCustNumValues(BigDecimal orgId) {
        List custNumList = new ArrayList();
        ViewObjectImpl vo = this.getCustomerNameVO();
        if (vo != null && orgId != null) {
            vo.clearCache();
            vo.setNamedWhereClauseParam("p_orgId", null);
            vo.setWhereClause(null);
            vo.setNamedWhereClauseParam("p_orgId", orgId);
            vo.executeQuery();
            RowSetIterator iter = vo.createRowSetIterator(null);
            while (iter.hasNext()) {
                Row r = iter.next();
                custNumList.add(r.getAttribute("Accountnumber"));
            }
        }
        return custNumList;
    }


    ////From Vamshi

    public Map<String, String> getQuoteHdrOrgID(String pquoteNo) {
        DBTransaction trans = this.getDBTransaction();

        String QuoteHid = null;
        String OrgId = null;
        HashMap<String, String> QuoteHdrOrgMap = new HashMap<String, String>();
        PreparedStatement ps = null;
        try {


            String sql =
                "Select QUOTE_HEADER_ID,ORG_ID from ASO_QUOTE_HEADERS_ALL where QUOTE_NUMBER=" +
                pquoteNo;

            ps = trans.createPreparedStatement(sql, 0);
            ResultSet rs = ps.executeQuery();
            rs.next();


            QuoteHid = rs.getString(1);
            OrgId = rs.getString(2);
            _logger.info("print OrgId in AM" + OrgId);
            QuoteHdrOrgMap.put("vQuoteHid", QuoteHid);
            QuoteHdrOrgMap.put("vOrgId", OrgId);


        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (ps != null) {
                try {
                    ps.close();

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }

        return QuoteHdrOrgMap;
    }

    //From Vamshi

    public String getPath() {

        ViewObjectImpl vo = getXXATGlobalDirRVO1();

        Row row = vo.first();

        String path = row.getAttribute("Description").toString();

        return path;


    }
    //From Vamshi

    public int callDUTReport(String confighid, String configrevno,
                             String orderhid, String quoteno, String ponum,
                             int respId, int usrId) {
        CallableStatement cs = null;
        String stmt = "XXAT_DUT_REP(:1,:2,:3,:4,:5,:6,:7,:8)";
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        int reqid = 0;
        try {

            cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);


            cs.setString(1, confighid);
            cs.setString(2, configrevno);
            cs.setString(3, orderhid);
            cs.setString(4, quoteno);
            cs.setString(5, ponum);
            cs.setInt(6, respId);
            cs.setInt(7, usrId);
            cs.registerOutParameter(8, Types.INTEGER);
            System.out.println("print before execute the procedure");


            cs.executeUpdate();
            reqid = cs.getInt(8);

            System.out.println("print after execute the procedure");

            System.out.println("print reqid" + reqid);
        } catch (Exception e) {
            errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
            System.out.println("print error found in package execution" +
                               e.getMessage());
            //                e.printStackTrace();
        } finally {
            try {
                if (cs != null)
                    cs.close();
            } catch (SQLException s) {
                errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                //                    s.printStackTrace();
                System.out.println("print error found in package execution1" +
                                   s.getMessage());
            }
        }

        return reqid;
    }
    //From Vamshi

    public String callMOFReport(String confighid, String configrevno,
                                String orderhid, String quoteno,
                                String ponum) {
        CallableStatement cs = null;
        String stmt =
            "XXAT_ASO_QUOTE_PKG.XXAT_MOF_REPORT_PRINT(:1,:2,:3,:4,:5,:6)";
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String output = null;
        try {

            cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);


            cs.setString(1, confighid);
            cs.setString(2, configrevno);
            cs.setString(3, orderhid);
            cs.setString(4, quoteno);
            cs.setString(5, ponum);
            //            cs.setInt(6, respId);
            //            cs.setInt(7, usrId);
            cs.registerOutParameter(6, Types.VARCHAR);
            System.out.println("print before execute the procedure");


            cs.executeUpdate();
            output = cs.getString(6);

            System.out.println("print after execute the procedure");

            System.out.println("print output" + output);
        } catch (Exception e) {
            errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
            System.out.println("print error found in package execution" +
                               e.getMessage());
            //                e.printStackTrace();
        } finally {
            try {
                if (cs != null)
                    cs.close();
            } catch (SQLException s) {
                errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                //                    s.printStackTrace();
                System.out.println("print error found in package execution1" +
                                   s.getMessage());
            }
        }

        return output;
    }
    //From Vamshi

    public String callCFDReport(String quoteNum, int respId, int usrId) {

        CallableStatement cs = null;
        //        String returnval = null;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String reqstid = "";
        //        String returnStatus = "";
        String stmt = "   XXAT_CFD_REPT(:1,:2,:3,:4)";
        try {
            cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);
            if (quoteNum != null) {
                quoteNum = quoteNum.trim();
                cs.setString(1, quoteNum);
            } else
                errorMsg.append("<p><b> Quote Number is Missing.</b></p>");


            cs.setInt(2, respId);
            cs.setInt(3, usrId);
            cs.registerOutParameter(4, Types.VARCHAR);


            errorMsg.append("</body></html>");
            cs.executeUpdate();
            reqstid = cs.getString(4);
            //  String output =cs.getString(5);
            System.out.println("print req id" + reqstid);
            //            if ("<html><body></body></html>".equalsIgnoreCase(errorMsg.toString())) {
            //                cs.executeUpdate();
            //                returnStatus = cs.getString(5);
            //                returnMessage = cs.getString(6);
            //            }
        } catch (Exception e) {
            errorMsg.append("<p><b>" + e.getMessage() + "</b></p>");
            //                e.printStackTrace();
        } finally {
            try {
                if (cs != null)
                    cs.close();
            } catch (SQLException s) {
                errorMsg.append("<p><b>" + s.getMessage() + "</b></p>");
                //                    s.printStackTrace();
            }
        }

        return reqstid;
    }

    /**
     * Container's getter for FileUpdDwnEOView1.
     * @return FileUpdDwnEOView1
     */
    public ViewObjectImpl getFileUpdDwnEOView1() {
        return (ViewObjectImpl)findViewObject("FileUpdDwnEOView1");
    }

    /**
     * Container's getter for NodeCategoryVO1.
     * @return NodeCategoryVO1
     */
    public ViewObjectImpl getNodeCategoryVO1() {
        return (ViewObjectImpl)findViewObject("NodeCategoryVO1");
    }

    @Override
    public void prepareSession(SessionData sessionData) {
        super.prepareSession(sessionData);
    }

    /**
     * Container's getter for QuotesVO1.
     * @return QuotesVO1
     */
    public ViewObjectImpl getQuotesVO() {
        return (ViewObjectImpl)findViewObject("QuotesVO");
    }

    /**
     * Container's getter for CustomerFaxNumForQuoteVO.
     * @return CustomerFaxNumForQuoteVO
     */
    public ViewObjectImpl getCustomerFaxNumForQuoteVO() {
        return (ViewObjectImpl)findViewObject("CustomerFaxNumForQuoteVO");
    }

    /**
     * Container's getter for QuoteSearchVO1.
     * @return QuoteSearchVO1
     */
    public ViewObjectImpl getQuoteSearchVO() {
        return (ViewObjectImpl)findViewObject("QuoteSearchVO");
    }

    /**
     * Container's getter for QuoteSearchTabVO1.
     * @return QuoteSearchTabVO1
     */
    public ViewObjectImpl getQuoteSearchTabVO() {
        return (ViewObjectImpl)findViewObject("QuoteSearchTabVO");
    }

    /**
     * Container's getter for ImportSourceVO1.
     * @return ImportSourceVO1
     */
    public ViewObjectImpl getImportSourceVO1() {
        return (ViewObjectImpl)findViewObject("ImportSourceVO1");
    }

    /**
     * Container's getter for QuoteUpdateVO1.
     * @return QuoteUpdateVO1
     */
    public ViewObjectImpl getQuoteUpdateVO1() {
        return (ViewObjectImpl)findViewObject("QuoteUpdateVO1");
    }

    /**
     * Container's getter for SalesRepresentativeVO.
     * @return SalesRepresentativeVO
     */
    public ViewObjectImpl getSalesRepresentativeVO() {
        return (ViewObjectImpl)findViewObject("SalesRepresentativeVO");
    }

    /**
     * Container's getter for CustomerSupportRepresentVO.
     * @return CustomerSupportRepresentVO
     */
    public ViewObjectImpl getCustomerSupportRepresentVO() {
        return (ViewObjectImpl)findViewObject("CustomerSupportRepresentVO");
    }

    /**
     * Container's getter for PaymentTermsVO.
     * @return PaymentTermsVO
     */
    public ViewObjectImpl getPaymentTermsVO() {
        return (ViewObjectImpl)findViewObject("PaymentTermsVO");
    }

    /**
     * Container's getter for RuleSetBaseVO1.
     * @return RuleSetBaseVO1
     */
    public ViewObjectImpl getRuleSetBaseVO1() {
        return (ViewObjectImpl)findViewObject("RuleSetBaseVO1");
    }

    /**
     * Container's getter for RuleSetVO1.
     * @return RuleSetVO1
     */
    public ViewObjectImpl getRuleSetVO1() {
        return (ViewObjectImpl)findViewObject("RuleSetVO1");
    }

    /**
     * Container's getter for OUVO1.
     * @return OUVO1
     */
    public ViewObjectImpl getOUVO() {
        return (ViewObjectImpl)findViewObject("OUVO");
    }


    /**
     * Container's getter for CustomerNumberVO1.
     * @return CustomerNumberVO1
     */
    public ViewObjectImpl getCustomerNumberVO() {
        return (ViewObjectImpl)findViewObject("CustomerNumberVO");
    }

    /**
     * Container's getter for CustomerNameVO1.
     * @return CustomerNameVO1
     */
    public ViewObjectImpl getCustomerNameVO() {
        return (ViewObjectImpl)findViewObject("CustomerNameVO");
    }

    /**
     * Container's getter for IncoTermVO.
     * @return IncoTermVO
     */
    public ViewObjectImpl getIncoTermVO() {
        return (ViewObjectImpl)findViewObject("IncoTermVO");
    }

    /**
     * Container's getter for PrimarySalesRepVO.
     * @return PrimarySalesRepVO
     */
    public ViewObjectImpl getPrimarySalesRepVO() {
        return (ViewObjectImpl)findViewObject("PrimarySalesRepVO");
    }


    /**
     * Container's getter for QuoteExportVO1.
     * @return QuoteExportVO1
     */
    public ViewObjectImpl getQuoteExportVO1() {
        return (ViewObjectImpl)findViewObject("QuoteExportVO1");
    }

    /**
     * Container's getter for CurrencyVO1.
     * @return CurrencyVO1
     */
    public ViewObjectImpl getCurrencyVO() {
        return (ViewObjectImpl)findViewObject("CurrencyVO");
    }

    /**
     * Container's getter for SalesChannelVO.
     * @return SalesChannelVO
     */
    public ViewObjectImpl getSalesChannelVO() {
        return (ViewObjectImpl)findViewObject("SalesChannelVO");
    }

    /**
     * Container's getter for businessAgreementVo.
     * @return businessAgreementVo
     */
    public ViewObjectImpl getbusinessAgreementVo() {
        return (ViewObjectImpl)findViewObject("businessAgreementVo");
    }

    /**
     * Container's getter for PriceListVO.
     * @return PriceListVO
     */
    public ViewObjectImpl getPriceListVO() {
        return (ViewObjectImpl)findViewObject("PriceListVO");
    }

    /**
     * Container's getter for OrderTypeVO.
     * @return OrderTypeVO
     */
    public ViewObjectImpl getOrderTypeVO() {
        return (ViewObjectImpl)findViewObject("OrderTypeVO");
    }


    /**
     * Container's getter for FndNewMessagesVO.
     * @return FndNewMessagesVO
     */
    public ViewObjectImpl getFndNewMessagesVO() {
        return (ViewObjectImpl)findViewObject("FndNewMessagesVO");
    }

    /**
     * Container's getter for RuleSetVO.
     * @return RuleSetVO
     */
    public ViewObjectImpl getRuleSetVO() {
        return (ViewObjectImpl)findViewObject("RuleSetVO");
    }

    public void initConfiguratorRuleSet() {
    }

    /**
     * Container's getter for userPrefEntityVO.
     * @return userPrefEntityVO
     */
    public ViewObjectImpl getuserPrefEntityVO() {
        return (ViewObjectImpl)findViewObject("userPrefEntityVO");
    }

    /**
     * Container's getter for userPrefSCVO1.
     * @return userPrefSCVO1
     */
    public ViewObjectImpl getuserPrefSCVO1() {
        return (ViewObjectImpl)findViewObject("userPrefSCVO1");
    }

    /**
     * Container's getter for SalesChannelDefaultUsrPrefVO1.
     * @return SalesChannelDefaultUsrPrefVO1
     */
    public ViewObjectImpl getSalesChannelDefaultUsrPrefVO1() {
        return (ViewObjectImpl)findViewObject("SalesChannelDefaultUsrPrefVO1");
    }

    /**
     * Container's getter for UserPrefGlobalChoiceDefaultVO1.
     * @return UserPrefGlobalChoiceDefaultVO1
     */
    public ViewObjectImpl getUserPrefGlobalChoiceDefaultVO1() {
        return (ViewObjectImpl)findViewObject("UserPrefGlobalChoiceDefaultVO1");
    }

    /**
     * Container's getter for CSRForGlobalChoiceVO1.
     * @return CSRForGlobalChoiceVO1
     */
    public ViewObjectImpl getCSRForGlobalChoiceVO1() {
        return (ViewObjectImpl)findViewObject("CSRForGlobalChoiceVO1");
    }

    /**
     * Container's getter for SalesRepForUserPrefVO.
     * @return SalesRepForUserPrefVO
     */
    public ViewObjectImpl getSalesRepForUserPrefVO() {
        return (ViewObjectImpl)findViewObject("SalesRepForUserPrefVO");
    }

    //    public void setSalesRepQuery(String salesRepQuery) {
    //        this.salesRepQuery = salesRepQuery;
    //    }
    //
    //    public String getSalesRepQuery() {
    //        return salesRepQuery;
    //    }

    /**
     * Container's getter for XXATGlobalDirRVO1.
     * @return XXATGlobalDirRVO1
     */
    public XXATGlobalDirRVOImpl getXXATGlobalDirRVO1() {
        return (XXATGlobalDirRVOImpl)findViewObject("XXATGlobalDirRVO1");
    }

    /**
     * Container's getter for CFDReportVO1.
     * @return CFDReportVO1
     */
    public CFDReportVOImpl getCFDReportVO1() {
        return (CFDReportVOImpl)findViewObject("CFDReportVO1");
    }

    /**
     * Container's getter for UIGroupsVO.
     * @return UIGroupsVO
     */
    public ViewObjectImpl getUIGroupsVO() {
        return (ViewObjectImpl)findViewObject("UIGroupsVO");
    }

    /**
     * Container's getter for OrderTypeForUserPrefVO1.
     * @return OrderTypeForUserPrefVO1
     */
    public ViewObjectImpl getOrderTypeForUserPrefVO1() {
        return (ViewObjectImpl)findViewObject("OrderTypeForUserPrefVO1");
    }

    public Hashtable getUiGrpMap() {
        Hashtable<String, String> uiGrpMap = new Hashtable<String, String>();
        ViewObjectImpl uiGrpVO = this.getUIGroupsVO();
        if (uiGrpVO != null) {
            uiGrpVO.executeQuery();
            RowSetIterator rsi = uiGrpVO.createRowSetIterator(null);
            if (rsi != null) {
                while (rsi.hasNext()) {
                    Row r = rsi.next();
                    if (r != null) {
                        uiGrpMap.put((String)r.getAttribute("UiIndex"),
                                     (String)r.getAttribute("AdfUiCategory"));
                    }
                }
            }
        }
        ADFContext.getCurrent().getSessionScope().put("uiGrpMap", uiGrpMap);
        return uiGrpMap;
    }

    public String getCurrencyFormat(String userId) {
        String currencyFormat = null;
        String query =
            "xxat_userpref_globalchoice where user_id =:1 and column_type = 'Num_format'";
        DBTransaction dbTrans = (DBTransaction)this.getTransaction();
        PreparedStatement ps = dbTrans.createPreparedStatement(query, 0);


        try {
            ps.setString(1, userId == null ? "0" : userId);
            ResultSet rs = ps.executeQuery();
            rs.next();
            currencyFormat = rs.getString(1);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return currencyFormat;
    }

//    public Hashtable getPriceProductChoices(String userId) {
//        Hashtable choiceHashTable = new Hashtable();
//        String query =
//            "select * from xxat_userpref_globalchoice where user_id=:1 and column_type IN ('Prd_num_ref_config','Prd_num_target_config','Ref_price_ref_config','Ref_price_target_config')";
//        DBTransaction dbTrans = (DBTransaction)this.getTransaction();
//        PreparedStatement ps = dbTrans.createPreparedStatement(query, 0);
//        try {
//            ps.setString(1, userId == null ? "0" : userId);
//            ResultSet rs = ps.executeQuery();
//            while (rs.next()) {
//                choiceHashTable.put(rs.getString(2), rs.getString(3));
//            }
//        } catch (SQLException e) {
//        }
//        return choiceHashTable;
//    }


public HashMap getPriceProductChoices() {
 
        HashMap choiceHashTable =
            (HashMap)ADFContext.getCurrent().getSessionScope().get("userPrefMap");
        if (choiceHashTable == null ||
            (choiceHashTable != null && choiceHashTable.isEmpty())) {
            choiceHashTable = new HashMap();
            String userId =
                (String)ADFContext.getCurrent().getSessionScope().get("UserId");
            String query =
                "select * from xxat_userpref_globalchoice where user_id=:1 and column_type IN ('Prd_num_ref_config','Prd_num_target_config','Ref_price_ref_config','Ref_price_target_config')";
            DBTransaction dbTrans = (DBTransaction)this.getTransaction();
            PreparedStatement ps = dbTrans.createPreparedStatement(query, 0);
            try {
                ps.setString(1, userId == null ? "0" : userId);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    choiceHashTable.put(rs.getString(2), rs.getString(3));
                }
            } catch (SQLException e) {
            }
            ADFContext.getCurrent().getSessionScope().put("userPrefMap",
                                                          choiceHashTable);
           
        }
        return choiceHashTable;
    }
 
    public Hashtable getPriceProductChoices(String userId) {
        return null;
    }






}
